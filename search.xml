<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>Hexo搭建个人博客：yilia主题配置(一) - 基础配置</title>
    <url>/archives/31784.html</url>
    <content><![CDATA[<p>前两天搭建了一下个人博客，使用Hexo工具+GitHub/Gitee部署博客网站，这里简单记录一下搭建过程：</p>
<a id="more"></a>

<h2 id="1-安装Hexo"><a href="#1-安装Hexo" class="headerlink" title="1.安装Hexo"></a>1.安装Hexo</h2><blockquote>
<p>首先，确保已有node环境。</p>
</blockquote>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm install hexo-cli -g</span><br><span class="line">npm install hexo-deployer-git --save  <span class="comment"># 最后如果需要部署到git，就要安装这个包</span></span><br></pre></td></tr></table></figure>

<h2 id="2-安装yilia主题"><a href="#2-安装yilia主题" class="headerlink" title="2.安装yilia主题"></a>2.安装yilia主题</h2><blockquote>
<p>首先，确保已安装git工具。</p>
</blockquote>
<h3 id="2-1-安装"><a href="#2-1-安装" class="headerlink" title="2.1.安装"></a>2.1.安装</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git <span class="built_in">clone</span> https://github.com/litten/hexo-theme-yilia.git themes/yilia   <span class="comment"># 将hexo-theme-yilia安装到themes目录下</span></span><br></pre></td></tr></table></figure>
<blockquote>
<p>这里推荐 <a href="https://github.com/JoeyBling/hexo-theme-yilia-plus" target="_blank" rel="noopener">hexo-theme-yilia-plus</a> 项目，该项目对yilia主题做了一些优化和补充，感谢作者 JoeyBling 的贡献。以下皆以该主题做部署配置。</p>
</blockquote>
<h3 id="2-2-使用yilia主题"><a href="#2-2-使用yilia主题" class="headerlink" title="2.2.使用yilia主题"></a>2.2.使用yilia主题</h3><p>此处以 <a href="https://github.com/JoeyBling/hexo-theme-yilia-plus" target="_blank" rel="noopener">hexo-theme-yilia-plus</a>为例，打开根目录下的_config.yml文件，找到 <code>theme</code> 处, 修改配置：</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Extensions</span></span><br><span class="line"><span class="comment">## Plugins: https://hexo.io/plugins/</span></span><br><span class="line"><span class="comment">## Themes: https://hexo.io/themes/</span></span><br><span class="line"><span class="comment"># theme: landscape  # 默认主题</span></span><br><span class="line"><span class="attr">theme:</span> <span class="string">yilia-plus</span>  <span class="comment"># yilia</span></span><br></pre></td></tr></table></figure>
<p>其他配置：</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Site 网站</span></span><br><span class="line"><span class="attr">title:</span> <span class="string">''</span>             <span class="comment"># 网站标题</span></span><br><span class="line"><span class="attr">subtitle:</span> <span class="string">''</span>          <span class="comment"># 网站副标题</span></span><br><span class="line"><span class="attr">description:</span> <span class="string">''</span>       <span class="comment"># 网站描述</span></span><br><span class="line"><span class="attr">keywords:</span> <span class="string">''</span></span><br><span class="line"><span class="attr">author:</span> <span class="string">''</span>            <span class="comment"># 博主的名字</span></span><br><span class="line"><span class="attr">language:</span> <span class="string">zh-CN</span>       <span class="comment"># 网站使用的语言</span></span><br><span class="line"><span class="attr">timezone:</span> <span class="string">''</span>          <span class="comment"># 网站时区。Hexo 默认使用您电脑的时区</span></span><br></pre></td></tr></table></figure>

<h2 id="3-配置“所有文章”"><a href="#3-配置“所有文章”" class="headerlink" title="3.配置“所有文章”"></a>3.配置“所有文章”</h2><blockquote>
<p>“所有文章”按钮，需要插件生效。</p>
</blockquote>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm i hexo-generator-json-content --save</span><br></pre></td></tr></table></figure>
<p>同时在根目录文件<code>_config.yml</code>下, 配置：</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 新增内容</span></span><br><span class="line"><span class="attr">jsonContent:</span></span><br><span class="line">  <span class="attr">meta:</span> <span class="literal">false</span></span><br><span class="line">  <span class="attr">pages:</span> <span class="literal">false</span></span><br><span class="line">  <span class="attr">posts:</span></span><br><span class="line">    <span class="attr">title:</span> <span class="literal">true</span></span><br><span class="line">    <span class="attr">date:</span> <span class="literal">true</span></span><br><span class="line">    <span class="attr">path:</span> <span class="literal">true</span></span><br><span class="line">    <span class="attr">text:</span> <span class="literal">false</span></span><br><span class="line">    <span class="attr">raw:</span> <span class="literal">false</span></span><br><span class="line">    <span class="attr">content:</span> <span class="literal">false</span></span><br><span class="line">    <span class="attr">slug:</span> <span class="literal">false</span></span><br><span class="line">    <span class="attr">updated:</span> <span class="literal">false</span></span><br><span class="line">    <span class="attr">comments:</span> <span class="literal">false</span></span><br><span class="line">    <span class="attr">link:</span> <span class="literal">false</span></span><br><span class="line">    <span class="attr">permalink:</span> <span class="literal">false</span></span><br><span class="line">    <span class="attr">excerpt:</span> <span class="literal">false</span></span><br><span class="line">    <span class="attr">categories:</span> <span class="literal">false</span></span><br><span class="line">    <span class="attr">tags:</span> <span class="literal">true</span></span><br></pre></td></tr></table></figure>

<h2 id="4-代码高亮"><a href="#4-代码高亮" class="headerlink" title="4.代码高亮"></a>4.代码高亮</h2><blockquote>
<p>在根目录和主题目录下，打开 <code>_config.yml</code> 文件，添加配置：</p>
</blockquote>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 代码高亮</span></span><br><span class="line"><span class="attr">highlight:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">line_number:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">auto_detect:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">tab_replace:</span> <span class="string">''</span></span><br><span class="line">  <span class="attr">wrap:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">hljs:</span> <span class="literal">false</span></span><br></pre></td></tr></table></figure>

<h2 id="5-添加图片资源"><a href="#5-添加图片资源" class="headerlink" title="5.添加图片资源"></a>5.添加图片资源</h2><blockquote>
<p>在根目录 <code>source</code> 目录下或主题目录 <code>source</code> 目录下新建 <code>img</code> 目录，将所需图片资源存入，打开文件 <code>themes\yilia-plus\_config.yml</code>, 修改配置：</p>
</blockquote>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 网站图标</span></span><br><span class="line"><span class="attr">favicon:</span> <span class="string">/img/favicon.ico</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 你的头像url</span></span><br><span class="line"><span class="attr">avatar:</span> <span class="string">/img/avatar.jpg</span>  </span><br><span class="line"></span><br><span class="line"><span class="comment"># 支付宝二维码图片地址，跟设置头像的方式一样。</span></span><br><span class="line"><span class="attr">alipay:</span> <span class="string">/img/alipay.jpg</span></span><br><span class="line"><span class="comment"># 微信二维码图片地址</span></span><br><span class="line"><span class="attr">weixin:</span> <span class="string">/img/weixin.png</span></span><br></pre></td></tr></table></figure>

<h2 id="6-左侧显示总文章数"><a href="#6-左侧显示总文章数" class="headerlink" title="6.左侧显示总文章数"></a>6.左侧显示总文章数</h2><blockquote>
<p>打开 <code>themes\yilia\layout\_partial\left-col.ejs</code> 文件</p>
</blockquote>
<p>找到下面这一段：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">nav</span> <span class="attr">class</span>=<span class="string">"header-menu"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">%</span> <span class="attr">for</span> (<span class="attr">var</span> <span class="attr">i</span> <span class="attr">in</span> <span class="attr">theme.menu</span>)&#123; %&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"&lt;%- url_for(theme.menu[i]) %&gt;"</span>&gt;</span><span class="tag">&lt;<span class="name">%=</span> <span class="attr">i</span> %&gt;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">%&#125;%</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">nav</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>在之后添加：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">nav</span>&gt;</span></span><br><span class="line">    总文章数 <span class="tag">&lt;<span class="name">%=site.posts.length%</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">nav</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="7-新建标签和分类"><a href="#7-新建标签和分类" class="headerlink" title="7.新建标签和分类"></a>7.新建标签和分类</h2><blockquote>
<p>在 <code>git bash</code> 或者 <code>cmd</code> 命令行，输入以下命令:</p>
</blockquote>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">hexo new page tags         <span class="comment"># 新建标签</span></span><br><span class="line">hexo new page categories   <span class="comment"># 新建分类</span></span><br></pre></td></tr></table></figure>
<p>在文件 <code>scaffolds\post.md</code> 中添加：</p>
<figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">tags: </span><br><span class="line">categories:</span><br></pre></td></tr></table></figure>

<p>下次新建文章时，可以设置标签和分类。</p>
<h2 id="8-添加字数统计"><a href="#8-添加字数统计" class="headerlink" title="8.添加字数统计"></a>8.添加字数统计</h2><blockquote>
<p>安装 hexo-wordcount, npm install hexo-wordcount –save</p>
</blockquote>
<p>在文件 <code>themes\yilia\layout\_partial\left-col.ejs</code> 中添加：</p>
<figure class="highlight erb"><table><tr><td class="code"><pre><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">nav</span>&gt;</span></span></span><br><span class="line"><span class="xml">    总字数 <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"post-count"</span>&gt;</span><span class="tag">&lt;<span class="name">%=</span></span></span><span class="ruby"> totalcount(site, <span class="string">'0,0.0a'</span>) </span><span class="xml"><span class="tag">%&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">nav</span>&gt;</span></span></span><br></pre></td></tr></table></figure>

<p>编辑文件 <code>themes\yilia\layout\_partial\article.ejs</code>，在header下，添加：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">align</span>=<span class="string">"center"</span> <span class="attr">class</span>=<span class="string">"post-count"</span>&gt;</span></span><br><span class="line">    字数：<span class="tag">&lt;<span class="name">%=</span> <span class="attr">wordcount</span>(<span class="attr">post.content</span>) %&gt;</span>字 | 预计阅读时长：<span class="tag">&lt;<span class="name">%=</span> <span class="attr">min2read</span>(<span class="attr">post.content</span>) %&gt;</span>分钟</span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="9-不蒜子统计-统计访问量"><a href="#9-不蒜子统计-统计访问量" class="headerlink" title="9.不蒜子统计-统计访问量"></a>9.不蒜子统计-统计访问量</h2><blockquote>
<p>如果主题中没有配置，则：安装不蒜子</p>
</blockquote>
<p>在文件 <code>themes\yilia\layout\_partial\after-footer.ejs</code> 末尾添加：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span>  <span class="attr">async</span>  <span class="attr">src</span>=<span class="string">"https://dn-lbstatics.qbox.me/busuanzi/2.3/busuanzi.pure.mini.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="9-1-统计网站访问量"><a href="#9-1-统计网站访问量" class="headerlink" title="9.1.统计网站访问量"></a>9.1.统计网站访问量</h3><blockquote>
<p>如果主题中没有配置，则：</p>
</blockquote>
<p>修改文件 <code>themes\yilia\layout\_partial\footer.ejs</code>，添加访客数和站点访问总量：</p>
<figure class="highlight routeros"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 总访问量</span></span><br><span class="line">&lt;span <span class="attribute">id</span>=<span class="string">"busuanzi_container_site_pv"</span>&gt;    </span><br><span class="line">    本站总访问量</span><br><span class="line">    &lt;span <span class="attribute">id</span>=<span class="string">"busuanzi_value_site_pv"</span>&gt;&lt;/span&gt;次&lt;/span&gt; |</span><br><span class="line"></span><br><span class="line"><span class="comment"># 访客记录</span></span><br><span class="line">&lt;span <span class="attribute">id</span>=<span class="string">"busuanzi_container_site_uv"</span>&gt;  </span><br><span class="line">    本站访客数</span><br><span class="line">    &lt;span <span class="attribute">id</span>=<span class="string">"busuanzi_value_site_uv"</span>&gt;&lt;/span&gt;人次&lt;/span&gt;</span><br></pre></td></tr></table></figure>

<h3 id="9-2-单篇文章点击量"><a href="#9-2-单篇文章点击量" class="headerlink" title="9.2.单篇文章点击量"></a>9.2.单篇文章点击量</h3><p>打开文件 <code>\themes\yilia-plus\layout\_partial\post\date.ejs</code>，添加： </p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">span</span> <span class="attr">id</span>=<span class="string">"busuanzi_container_page_pv"</span>&gt;</span>  本文总阅读量<span class="tag">&lt;<span class="name">span</span> <span class="attr">id</span>=<span class="string">"busuanzi_value_page_pv"</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span>次<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="10-部署（GitHub-Gitee）"><a href="#10-部署（GitHub-Gitee）" class="headerlink" title="10.部署（GitHub/Gitee）"></a>10.部署（GitHub/Gitee）</h2><blockquote>
<p>这里以 <code>GitHub/Gitee pages</code> 为例，作为个人博客的静态部署</p>
</blockquote>
<p>打开根目录中的 <code>_config.yml</code> 文件，找到 <code>deploy</code> 项，修改如下配置：</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Deployment  配置部署信息</span></span><br><span class="line"><span class="comment">## Docs: https://hexo.io/docs/deployment.html</span></span><br><span class="line"><span class="attr">deploy:</span></span><br><span class="line">  <span class="attr">type:</span> <span class="string">git</span></span><br><span class="line">  <span class="comment"># repository: https://gitee.com/你的账户名/blog.git</span></span><br><span class="line">  <span class="attr">repository:</span> <span class="string">git@gitee.com:你的账户名/blog.git</span></span><br><span class="line">  <span class="attr">branch:</span> <span class="string">master</span></span><br></pre></td></tr></table></figure>

<blockquote>
<p>确保 <code>GitHub/Gitee</code> 上已开启 <code>GitHub/Gitee pages</code> 服务，部署分支选择 <code>master</code></p>
</blockquote>
<p>在 <code>Git bash</code> 或 <code>DOS窗口</code> 中，输入以下命令：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">hexo deploy  <span class="comment"># 部署到GitHub/Gitee 上，需要先安装 `npm install hexo-deployer-git --save`</span></span><br></pre></td></tr></table></figure>

<h2 id="11-Hexo命令"><a href="#11-Hexo命令" class="headerlink" title="11.Hexo命令"></a>11.Hexo命令</h2><h3 id="11-1-常用命令"><a href="#11-1-常用命令" class="headerlink" title="11.1.常用命令"></a>11.1.常用命令</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">hexo new <span class="string">"postName"</span>       <span class="comment">#新建文章</span></span><br><span class="line">hexo new page <span class="string">"pageName"</span>  <span class="comment">#新建页面</span></span><br><span class="line">hexo generate             <span class="comment">#生成静态页面至public目录</span></span><br><span class="line">hexo server --port==8000  <span class="comment">#开启访问（默认端口4000，`ctrl + c` 关闭），查看帮助（hexo server -help）</span></span><br><span class="line">hexo deploy               <span class="comment">#将 `.deploy_git` 目录部署到 GitHub/Gitee</span></span><br></pre></td></tr></table></figure>

<h3 id="11-2常用复合命令："><a href="#11-2常用复合命令：" class="headerlink" title="11.2常用复合命令："></a>11.2常用复合命令：</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">hexo deploy -g</span><br><span class="line">hexo server -g</span><br></pre></td></tr></table></figure>

<h3 id="11-3-简写："><a href="#11-3-简写：" class="headerlink" title="11.3.简写："></a>11.3.简写：</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">hexo n         ==   hexo new</span><br><span class="line">hexo g         ==   hexo generate</span><br><span class="line">hexo s -p 8000 ==   hexo server --port=8000</span><br><span class="line">hexo d         ==   hexo deploy</span><br></pre></td></tr></table></figure>


<hr>
]]></content>
      <categories>
        <category>网站</category>
        <category>Hexo</category>
      </categories>
      <tags>
        <tag>yilia</tag>
        <tag>基本配置</tag>
      </tags>
  </entry>
  <entry>
    <title>Hexo搭建个人博客：yilia主题配置(七) - 自定义Subnav图标</title>
    <url>/archives/ccdc2da1.html</url>
    <content><![CDATA[<p>yilia是一款非常不错的博客主题，它满足几乎大多数博主对个人博客网站的要求，主题作者推崇简约模式，设计的界面非常nice！</p>
<a id="more"></a>
<p>入门要求比较低，适合所有人群，并且可以自己定制喜欢的分风格，比如添加特效、插件等等。</p>
<p>子导航几乎集成了大多社交网站的图标，不过还有些并未补充，这里主要介绍一下如何在子导航社交界面添加自定义的图标。</p>
<h1 id="制作图片文字"><a href="#制作图片文字" class="headerlink" title="制作图片文字"></a>制作图片文字</h1><h2 id="1-下载社交网站图标"><a href="#1-下载社交网站图标" class="headerlink" title="1.下载社交网站图标"></a>1.下载社交网站图标</h2><p>去网上搜索想要编辑的社交网站图标，有的网站图标，在浏览器中按 <code>F12</code> 找到图标位置，是有可能找到图标网址的，这时直接下载（如码云），如果没有可以到一些知名搜索引擎查找，或者到 <a href="https://www.easyicon.net/" target="_blank" rel="noopener">EasyIcon</a> 网站搜索。</p>
<img src="/archives/ccdc2da1/easyicon.png" class title="This is easyicon site image">


<h2 id="2-编辑图标"><a href="#2-编辑图标" class="headerlink" title="2.编辑图标"></a>2.编辑图标</h2><h3 id="2-1-复制-iconfont-svg-到下载目录"><a href="#2-1-复制-iconfont-svg-到下载目录" class="headerlink" title="2.1.复制 iconfont.svg 到下载目录"></a>2.1.复制 <code>iconfont.svg</code> 到下载目录</h3><p>打开文件目录 <code>themes\yilia\source-src\css\fonts</code>，找到 <code>iconfont.svg</code> 并复制到下载目录。</p>
<h3 id="2-2-打开百度字体编辑器"><a href="#2-2-打开百度字体编辑器" class="headerlink" title="2.2.打开百度字体编辑器"></a>2.2.打开<a href="http://fontstore.baidu.com/static/editor/index.html" target="_blank" rel="noopener">百度字体编辑器</a></h3><p>编辑刚刚下载的图标，点 <code>[新建]</code>，创建一个新项目。然后，点中间的 <code>[导入]</code>，选择 <code>[导入svg]</code>，把刚才拷贝过来的 <code>iconfont.svg</code> 导入进，导入完毕后，就出现了yilia自带的图标文字：</p>
<img src="/archives/ccdc2da1/yilia.png" class title="This is yilia image">

<p>导入下载好的社交网站图片(需要加入的图片，可以是SVG格式的图片)，调整大小位置，保存并退出，我导入的是码云网站的图片，如图：</p>
<img src="/archives/ccdc2da1/subnav-gitee.png" class title="This is yilia image">

<p>接着，选中刚编辑完的图片，在左上角点击 <code>[字形信息]</code> ，输入<code>[Unicode]</code>和<code>[图标名]</code>，记下来，会在css文件中用到，最后，点击 <code>[保存项目]</code>，下载 <code>[ZIP]</code> 压缩包。</p>
<img src="/archives/ccdc2da1/gitee-font.png" class title="This is font image">

<h2 id="3-配置hexo主题"><a href="#3-配置hexo主题" class="headerlink" title="3.配置hexo主题"></a>3.配置hexo主题</h2><h3 id="3-1-解压刚刚下载的-ZIP-压缩包"><a href="#3-1-解压刚刚下载的-ZIP-压缩包" class="headerlink" title="3.1.解压刚刚下载的 [ZIP] 压缩包"></a>3.1.解压刚刚下载的 <code>[ZIP]</code> 压缩包</h3><p>保留 <code>eot</code>，<code>svg</code>，<code>ttf</code>，<code>woff</code> 这四个文件。</p>
<h3 id="3-2-修改css文件"><a href="#3-2-修改css文件" class="headerlink" title="3.2.修改css文件"></a>3.2.修改css文件</h3><ul>
<li>到 <code>/themes/yilia/source-src/css</code> 中，修改 <code>font.scss</code> 和 <code>main.0cf68a.css</code>，添加：</li>
</ul>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">.icon-gitee:before &#123;</span><br><span class="line">  content: "\E87A"</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">.icon-statistics:before &#123;</span><br><span class="line">  content: "\E87B";</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>即 <code>.icon-yourApp:before{ content: “刚才的unicode”}</code>。</p>
<ul>
<li>修改 <code>/themes/yilia/source-src/css/social.scss</code> 文件，添加：</li>
</ul>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">a.gitee &#123;</span><br><span class="line">  background: #086ef6;</span><br><span class="line">  border:1px solid #086ef6;</span><br><span class="line">  &amp;:hover &#123;</span><br><span class="line">      border:1px solid #086ef6;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">a.statistics &#123;</span><br><span class="line">  background: #333435;</span><br><span class="line">  border:1px solid #086ef6;</span><br><span class="line">  &amp;:hover &#123;</span><br><span class="line">      border:1px solid #086ef6;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>即 <code>a.yourApp:before{颜色配置}</code>。</p>
<h3 id="3-3-更新子导航配置"><a href="#3-3-更新子导航配置" class="headerlink" title="3.3.更新子导航配置"></a>3.3.更新子导航配置</h3><p>修改 <code>yilia</code> 主题配置文件 <code>_config.yml</code>，在subnav下添加图标名和链接：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"># subNav-子导航</span><br><span class="line">subNav:</span><br><span class="line">  gitee: ''  # 码云</span><br></pre></td></tr></table></figure>

<h3 id="3-4-更新图标配置"><a href="#3-4-更新图标配置" class="headerlink" title="3.4.更新图标配置"></a>3.4.更新图标配置</h3><p>将上面的4个文件重命名后，替换 <code>/themes/yilia/source-src/css/fonts</code> 目录下的原文件。</p>
<p>然后，控制台切换目录到 <code>themes/yilia</code> 下，</p>
<ul>
<li><p>安装依赖：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">nom install</span><br></pre></td></tr></table></figure>
</li>
<li><p>运行打包命令：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm run dev</span><br></pre></td></tr></table></figure>
</li>
<li><p>如果打包成功，执行：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm run dist</span><br></pre></td></tr></table></figure>

</li>
</ul>
<p>回到Hexo根目录，重新生成部署 <code>hexo s -g</code> 就行了</p>
<p><strong><em>错误Error：</em></strong></p>
<p><strong>1.<code>npm install</code> 时，<code>node-sass</code> 错误</strong></p>
<p>如果出现 <code>node-sass@4.13.1 postinstall: node scripts/build.js, Failed at the node-sass@4.13.1</code> 这样的提示，可能是安装源的问题，修改源后再安装：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm config <span class="built_in">set</span> sass_binary_site=https://npm.taobao.org/mirrors/node-sass</span><br><span class="line"></span><br><span class="line">npm install</span><br></pre></td></tr></table></figure>
<p>如果还有问题，出现 <code>./source is not an absolute path</code> 错误，修改 <code>webpack.config.js</code> 文件，在 <code>module.exports</code>中，改成：</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">output</span>: &#123;</span><br><span class="line">    <span class="attribute">path</span>: __dirname + <span class="string">"./source"</span>,</span><br><span class="line">    publicPath: <span class="string">"./"</span>,</span><br><span class="line">    filename: <span class="string">"[name].[chunkhash:6].js"</span></span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure>

<p><strong>2.<code>npm run dev</code> 时，<code>node-sass</code> 错误</strong></p>
<p>先卸载，再重装，或者重建。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm uninstall node-sass</span><br><span class="line">npm install node-sass</span><br><span class="line">npm rebuild node-sass</span><br></pre></td></tr></table></figure>
<p>如果错误信息是 <code>permission denied</code> ，执行：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm install node-sass --unsafe-perm --save-dev</span><br></pre></td></tr></table></figure>

<p><strong>3.<code>npm run dist</code> 报错</strong></p>
<p>检查node版本。</p>
<hr>
<blockquote>
<p>参考：<br><a href="https://ainimini.github.io/2019/07/07/Hexo-yilia%E4%B8%BB%E9%A2%98-%E6%B7%BB%E5%8A%A0-Subnav-%E7%A4%BE%E4%BA%A4%E5%9B%BE%E6%A0%87/" target="_blank" rel="noopener">yilia 添加社交图标</a><br><a href="https://blog.csdn.net/shine_a/article/details/103133384" target="_blank" rel="noopener">npm 安装报错</a><br><a href="https://stackoverflow.com/questions/42166492/getting-error-output-path-needs-to-be-an-absolute-path-or" target="_blank" rel="noopener"><code>output.path</code> Error</a></p>
</blockquote>
]]></content>
      <categories>
        <category>网站</category>
        <category>Hexo</category>
      </categories>
      <tags>
        <tag>yilia</tag>
        <tag>Subnav图标</tag>
      </tags>
  </entry>
  <entry>
    <title>Hexo搭建个人博客：yilia主题配置(三) - 评论系统</title>
    <url>/archives/37394.html</url>
    <content><![CDATA[<p>本文主要是关于 <code>评论系统</code> 在 <code>hexo-yilia</code> 主题中的添加和配置。使用主题： <a href="https://github.com/JoeyBling/hexo-theme-yilia-plus" target="_blank" rel="noopener">hexo-theme-yilia-plus</a></p>
<a id="more"></a>

<h2 id="常用系统"><a href="#常用系统" class="headerlink" title="常用系统"></a>常用系统</h2><p>目前hexo可用的评论系统比较多，如：畅言、来必力、Disqus、Gitment、gitalk、utterances、Giteement、valine等等。不过有些已关停服务。</p>
<p>这里列举五个hexo常用的评论系统：</p>
<ul>
<li><strong>1、<a href="#1-Gitment配置" target="_self">gitment</a></strong> ：基于GitHub issue的评论系统，可参考：<a href="https://www.jianshu.com/p/ac7658cc912f" target="_blank" rel="noopener">简书</a>；</li>
<li><strong>2、<a href="#2-Gitalk配置" target="_self">gitalk</a></strong> : 基于GitHub issue的评论系统，可参考：<a href="https://github.com/gitalk/gitalk" target="_blank" rel="noopener">gitalk</a>；</li>
<li><strong>3、<a href="#3-Utterance配置" target="_self">utterance</a></strong> : 基于GitHub issue的评论系统，可参考：<a href="https://utteranc.es" target="_blank" rel="noopener">详情</a></li>
<li><strong>4、<a href="#4-Giteement配置" target="_self">giteement</a></strong> : 码云评论系统，国内用户建议使用这个，相对比较快，<a href="https://gitee.com/zhousiwei/giteement" target="_blank" rel="noopener">详情</a>；</li>
<li><strong>5、<a href="#5-Valine配置" target="_self">valine</a></strong> : valine 评论系统，到 <a href="https://leancloud.cn/dashboard/login.html#/signup" target="_blank" rel="noopener">leancloud</a> 进行注册。</li>
</ul>
<h2 id="1-Gitment配置"><a href="#1-Gitment配置" class="headerlink" title="1.Gitment配置"></a>1.Gitment配置</h2><blockquote>
<p>首先要注册 <a href="https://github.com/settings/applications/new" target="_blank" rel="noopener">OAuth Application</a> 当别人评论你的文章时，会需要它是授权。</p>
</blockquote>
<br>
<!-- ![OAuth](/images/gitissue/oauth.png) -->
<div align="center">
  <img src="/images/gitissue/oauth.png" width="400px">
</div>

<p>注册成功后，会获取到 <code>Client ID/scerct</code> ，需要填入配置文件中。</p>
<p>打开文件 <code>themes\yilia-plus\_config.yml</code> , 修改配置：</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">gitment_owner:</span> <span class="string">''</span>      <span class="comment"># 你的 GitHub ID (github 账户名)</span></span><br><span class="line"><span class="comment"># 是否使用官方js(false可以提升访问速度，本地修改过一部分的js，官方js可能会出现服务器不稳定，不太建议使用)</span></span><br><span class="line"><span class="attr">gitment_repo:</span> <span class="string">'如：xxx.github.io'</span>  <span class="comment">#存储评论的 repo name(需要在Github创建)</span></span><br><span class="line"><span class="attr">gitment_oauth:</span></span><br><span class="line">  <span class="attr">client_id:</span> <span class="string">''</span>           <span class="comment">#client ID</span></span><br><span class="line">  <span class="attr">client_secret:</span> <span class="string">''</span>       <span class="comment">#client secret</span></span><br></pre></td></tr></table></figure>

<p>在 <code>themes\yilia-plus\layout\_partial\post</code> 目录下，会默认有一个 <code>gitment.ejs</code> 文件，可以自定义样式<br>对应的 <code>themes\yilia-plus\layout\_partial\article.ejs</code> 文件，会有 <code>gitment</code> 相关的配置。</p>
<h2 id="2-Gitalk配置"><a href="#2-Gitalk配置" class="headerlink" title="2.Gitalk配置"></a>2.Gitalk配置</h2><h3 id="2-1-新建-gitalk-ejs-文件"><a href="#2-1-新建-gitalk-ejs-文件" class="headerlink" title="2.1.新建 gitalk.ejs 文件"></a>2.1.新建 <code>gitalk.ejs</code> 文件</h3><p>与 <code>gitment</code> 类似配置，首先在 <code>themes\yilia-plus\layout\_partial\post</code> 目录下，新建 <code>gitalk.ejs</code> 文件，<br>添加如下内容：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"gitalk-container"</span> <span class="attr">style</span>=<span class="string">"padding: 0px 30px 0px 30px;"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span> </span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">"stylesheet"</span> <span class="attr">href</span>=<span class="string">"https://cdn.jsdelivr.net/npm/gitalk@1/dist/gitalk.css"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"https://cdn.jsdelivr.net/npm/gitalk@1/dist/gitalk.min.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="handlebars"><span class="xml">if(<span class="tag">&lt;<span class="name">%=theme.gitalk.enable%</span>&gt;</span>)&#123;</span></span></span><br><span class="line"><span class="actionscript">    <span class="keyword">var</span> gitalk = <span class="keyword">new</span> Gitalk(&#123;</span></span><br><span class="line"><span class="actionscript">    clientID: <span class="string">'&lt;%=theme.gitalk.ClientID%&gt;'</span>,</span></span><br><span class="line"><span class="actionscript">    clientSecret: <span class="string">'&lt;%=theme.gitalk.ClientSecret%&gt;'</span>,</span></span><br><span class="line"><span class="actionscript">    repo: <span class="string">'&lt;%=theme.gitalk.repo%&gt;'</span>,</span></span><br><span class="line"><span class="actionscript">    owner: <span class="string">'&lt;%=theme.gitalk.githubID%&gt;'</span>,</span></span><br><span class="line"><span class="actionscript">    admin: [<span class="string">'&lt;%=theme.gitalk.adminUser%&gt;'</span>],</span></span><br><span class="line"><span class="actionscript">    id: <span class="string">'&lt;%= page.date %&gt;'</span>,</span></span><br><span class="line"><span class="actionscript">    distractionFreeMode: <span class="string">'&lt;%=theme.gitalk.distractionFreeMode%&gt;'</span></span></span><br><span class="line">&#125;)</span><br><span class="line"><span class="actionscript">gitalk.render(<span class="string">'gitalk-container'</span>) </span></span><br><span class="line">&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="2-2-修改文件-comment-scss"><a href="#2-2-修改文件-comment-scss" class="headerlink" title="2.2.修改文件 comment.scss"></a>2.2.修改文件 <code>comment.scss</code></h3><p>在文件 <code>themes\yilia\source-src\css\comment.scss</code> 中，做如下修改：</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-id">#disqus_thread</span>, <span class="selector-class">.duoshuo</span>, <span class="selector-class">.cloud-tie-wrapper</span>, <span class="selector-id">#SOHUCS</span>, <span class="selector-id">#gitment-ctn</span>, <span class="selector-id">#gitalk-container</span> &#123;</span><br><span class="line">    <span class="attribute">padding</span>: <span class="number">0</span> <span class="number">30px</span> <span class="meta">!important</span>;</span><br><span class="line">    <span class="attribute">min-height</span>: <span class="number">20px</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-id">#SOHUCS</span> &#123;</span><br><span class="line">    #SOHU_MAIN .module-cmt-list .block-cont-gw &#123;</span><br><span class="line">        <span class="selector-tag">border-bottom</span>: 1<span class="selector-tag">px</span> <span class="selector-tag">dashed</span> <span class="selector-id">#c8c8c8</span> !<span class="selector-tag">important</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="2-3-修改主题配置文件-config-yml"><a href="#2-3-修改主题配置文件-config-yml" class="headerlink" title="2.3.修改主题配置文件 _config.yml"></a>2.3.修改主题配置文件 <code>_config.yml</code></h3><p>打开文件 <code>themes\yilia-plus\_config.yml</code> , 修改配置：</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">gitalk:</span></span><br><span class="line">  <span class="attr">enable:</span>  <span class="literal">true</span></span><br><span class="line">  <span class="attr">githubID:</span>  <span class="string">''</span>      <span class="comment"># 写自己github的ID</span></span><br><span class="line">  <span class="attr">repo:</span>  <span class="string">''</span>          <span class="comment"># 新建存放评论的仓库名</span></span><br><span class="line">  <span class="attr">ClientID:</span>  <span class="string">''</span>      <span class="comment"># 与 `gitment` 一样</span></span><br><span class="line">  <span class="attr">ClientSecret:</span>  <span class="string">''</span>  <span class="comment"># 同上</span></span><br><span class="line">  <span class="attr">adminUser:</span>  <span class="string">''</span>     <span class="comment"># 也填GitHub的ID</span></span><br><span class="line">  <span class="attr">distractionFreeMode:</span> <span class="literal">true</span></span><br></pre></td></tr></table></figure>

<h3 id="2-4-在文件-article-ejs-中添加配置"><a href="#2-4-在文件-article-ejs-中添加配置" class="headerlink" title="2.4.在文件 article.ejs 中添加配置"></a>2.4.在文件 <code>article.ejs</code> 中添加配置</h3><p>打开 <code>themes\yilia-plus\layout\_partial\article.ejs</code> 文件，添加：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&lt;% <span class="keyword">if</span>(theme.gitalk.enable)&#123; %&gt;</span><br><span class="line">  &lt;%- partial(<span class="string">'post/gitalk'</span>, &#123;</span><br><span class="line">      key: post.slug,</span><br><span class="line">      title: post.title,</span><br><span class="line">      url: config.url+url_for(post.path)</span><br><span class="line">    &#125;) %&gt;</span><br><span class="line">  &lt;% &#125; %&gt;</span><br></pre></td></tr></table></figure>

<h2 id="3-Utterance配置"><a href="#3-Utterance配置" class="headerlink" title="3.Utterance配置"></a>3.Utterance配置</h2><h3 id="3-1-授权Utterance应用能访问仓库的issues"><a href="#3-1-授权Utterance应用能访问仓库的issues" class="headerlink" title="3.1.授权Utterance应用能访问仓库的issues"></a>3.1.授权Utterance应用能访问仓库的issues</h3><p>即安装 <code>Utterance</code> 应用，点击 <a href="https://github.com/apps/utterances" target="_blank" rel="noopener">install utterances</a>，选择需要安装的仓库。</p>
<h3 id="3-2-fork项目"><a href="#3-2-fork项目" class="headerlink" title="3.2.fork项目"></a>3.2.fork项目</h3><p>去 <code>GitHub</code> 上 fork <a href="https://github.com/utterance/utterances" target="_blank" rel="noopener">Utterance</a>项目，按照它的教程在 <strong><code>SITES.md</code></strong> 文件中注册你的博客网址，否则可能会配置失败。</p>
<h3 id="3-3-修改主题配置文件-config-yml"><a href="#3-3-修改主题配置文件-config-yml" class="headerlink" title="3.3.修改主题配置文件 _config.yml"></a>3.3.修改主题配置文件 <code>_config.yml</code></h3><p>打开文件 <code>themes\yilia-plus\_config.yml</code> , 修改配置：</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># utteranc评论： https://utteranc.es (参数配置详见主页) 替换 gitment、gitalk</span></span><br><span class="line"><span class="attr">utterance:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">repo:</span> <span class="string">''</span>     <span class="comment">#仓库名字,格式：你的用户ID/仓库名称，如：blog/utterance_repo</span></span><br><span class="line">  <span class="attr">issue_term:</span> <span class="string">'title'</span>            <span class="comment">#映射配置</span></span><br><span class="line">  <span class="attr">theme:</span> <span class="string">'github-light'</span>          <span class="comment">#主题</span></span><br></pre></td></tr></table></figure>

<h3 id="3-4-在文件-article-ejs-中添加配置"><a href="#3-4-在文件-article-ejs-中添加配置" class="headerlink" title="3.4.在文件 article.ejs 中添加配置"></a>3.4.在文件 <code>article.ejs</code> 中添加配置</h3><p>打开 <code>themes\yilia-plus\layout\_partial\article.ejs</code> 文件，添加：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">%</span> <span class="attr">if</span> (<span class="attr">theme.utterance</span> &amp;&amp; <span class="attr">theme.utterance.enable</span>)&#123; %&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">section</span> <span class="attr">id</span>=<span class="string">"comments"</span> <span class="attr">class</span>=<span class="string">"comments"</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="css">        <span class="selector-class">.utterances</span>&#123;<span class="attribute">max-width</span>: <span class="number">100%</span>;&#125;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"https://utteranc.es/client.js"</span></span></span><br><span class="line"><span class="tag">          <span class="attr">repo</span>=<span class="string">"&lt;%= theme.utterance.repo %&gt;"</span></span></span><br><span class="line"><span class="tag">          <span class="attr">issue-term</span>=<span class="string">"&lt;%= theme.utterance.issue_term %&gt;"</span></span></span><br><span class="line"><span class="tag">          <span class="attr">theme</span>=<span class="string">"&lt;%= theme.utterance.theme %&gt;"</span></span></span><br><span class="line"><span class="tag">          <span class="attr">crossorigin</span>=<span class="string">"anonymous"</span></span></span><br><span class="line"><span class="tag">          <span class="attr">async</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">section</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">%</span> &#125; %&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="4-Giteement配置"><a href="#4-Giteement配置" class="headerlink" title="4.Giteement配置"></a>4.Giteement配置</h2><blockquote>
<p>基于码云的评论系统，类似GitHub的配置</p>
</blockquote>
<h3 id="4-1-新建-giteement-ejs-文件"><a href="#4-1-新建-giteement-ejs-文件" class="headerlink" title="4.1.新建 giteement.ejs 文件"></a>4.1.新建 <code>giteement.ejs</code> 文件</h3><p>在 <code>themes\yilia-plus\layout\_partial\post</code> 目录下，新建 <code>giteement.ejs</code> 文件，添加如下内容：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">%</span> <span class="attr">if</span> (!<span class="attr">index</span> &amp;&amp; <span class="attr">post.comments</span> &amp;&amp; <span class="attr">theme.giteement</span> &amp;&amp; <span class="attr">theme.giteement.enable</span>)&#123; %&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"giteement-ctn"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">%</span> <span class="attr">if</span> (<span class="attr">theme.giteement</span> &amp;&amp; <span class="attr">theme.giteement.remote</span>)&#123; %&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- &lt;link rel="stylesheet" href="https://giteement.oss-cn-beijing.aliyuncs.com/wd-discuss.css"&gt; --&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- &lt;script src="https://giteement.oss-cn-beijing.aliyuncs.com/discuss_hexo.js"&gt;&lt;/script&gt; --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">"stylesheet"</span> <span class="attr">href</span>=<span class="string">"https://giteement.oss-cn-beijing.aliyuncs.com/default.css"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"https://giteement.oss-cn-beijing.aliyuncs.com/giteement.browser.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">%</span> &#125; <span class="attr">else</span> &#123; %&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">"stylesheet"</span> <span class="attr">href</span>=<span class="string">"&lt;%- url_for('lib/default.css') %&gt;"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"&lt;%- url_for('lib/giteement.browser.js') %&gt;"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">%</span> &#125; %&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="handlebars"><span class="xml">  <span class="comment">&lt;!-- id: "&lt;%= page.title %&gt;" --&gt;</span></span></span></span><br><span class="line"><span class="actionscript">  <span class="keyword">var</span> giteement = <span class="keyword">new</span> Giteement(&#123;</span></span><br><span class="line"><span class="actionscript">    id: <span class="string">'&lt;%=page.date.format('</span>YYYYMMDDHHmmss<span class="string">')%&gt;'</span>,</span></span><br><span class="line"><span class="actionscript">    owner: <span class="string">'&lt;%=theme.giteement.giteeID%&gt;'</span>,</span></span><br><span class="line"><span class="actionscript">    repo: <span class="string">'&lt;%=theme.giteement.repo%&gt;'</span>,</span></span><br><span class="line"><span class="actionscript">    backcall_uri: <span class="string">'&lt;%=theme.giteement.redirect_uri%&gt;'</span>,</span></span><br><span class="line"><span class="actionscript">    oauth_uri: <span class="string">'&lt;%=theme.giteement.oauth_uri%&gt;'</span>,</span></span><br><span class="line">    oauth: &#123;</span><br><span class="line"><span class="actionscript">      client_id: <span class="string">'&lt;%=theme.giteement.gitment_oauth.client_id%&gt;'</span>,</span></span><br><span class="line"><span class="actionscript">      client_secret: <span class="string">'&lt;%=theme.giteement.gitment_oauth.client_secret%&gt;'</span></span></span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;)</span><br><span class="line"><span class="actionscript">  giteement.render(<span class="string">'giteement-ctn'</span>)</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">%</span> &#125; %&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="4-2-修改主题配置文件-config-yml"><a href="#4-2-修改主题配置文件-config-yml" class="headerlink" title="4.2.修改主题配置文件 _config.yml"></a>4.2.修改主题配置文件 <code>_config.yml</code></h3><p>打开文件 <code>themes\yilia-plus\_config.yml</code> , 修改配置：</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">giteement:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">true</span>  <span class="comment"># 是否启用码云评论系统</span></span><br><span class="line">  <span class="comment"># 是否使用官方js(false可以提升访问速度)</span></span><br><span class="line">  <span class="attr">remote:</span> <span class="literal">false</span></span><br><span class="line">  <span class="attr">redirect_uri:</span> <span class="string">''</span>   <span class="comment"># 应用回调地址(请和配置的第三方应用保持一致)</span></span><br><span class="line">  <span class="comment"># 不能更改(网上开源项目https://github.com/Rob--W/cors-anywhere作者提供的专门用来跨域服务器的配置)</span></span><br><span class="line">  <span class="attr">oauth_uri:</span> <span class="string">https://cors-anywhere.herokuapp.com/https://gitee.com/oauth/token</span></span><br><span class="line">  <span class="attr">giteeID:</span> <span class="string">''</span>  <span class="comment"># 你的码云账号英文名</span></span><br><span class="line">  <span class="comment"># 存储评论的 repo</span></span><br><span class="line">  <span class="attr">repo:</span> <span class="string">yilia-plus-demo</span></span><br><span class="line">  <span class="attr">gitment_oauth:</span></span><br><span class="line">    <span class="attr">client_id:</span> <span class="string">'*********'</span>           <span class="comment">#client ID</span></span><br><span class="line">    <span class="attr">client_secret:</span> <span class="string">'*********'</span>       <span class="comment">#client secret</span></span><br></pre></td></tr></table></figure>

<h3 id="4-3-在文件-article-ejs-中添加配置"><a href="#4-3-在文件-article-ejs-中添加配置" class="headerlink" title="4.3.在文件 article.ejs 中添加配置"></a>4.3.在文件 <code>article.ejs</code> 中添加配置</h3><p>打开 <code>themes\yilia-plus\layout\_partial\article.ejs</code> 文件，添加：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&lt;% <span class="keyword">if</span> (theme.giteement &amp;&amp; theme.giteement.enable)&#123; %&gt;</span><br><span class="line">&lt;%- partial(<span class="string">'post/giteement'</span>, &#123;</span><br><span class="line">      key: post.slug,</span><br><span class="line">      title: post.title,</span><br><span class="line">      url: config.url+url_for(post.path)</span><br><span class="line">    &#125;) %&gt;</span><br><span class="line">&lt;% &#125; %&gt;</span><br></pre></td></tr></table></figure>

<h2 id="5-Valine配置"><a href="#5-Valine配置" class="headerlink" title="5.Valine配置"></a>5.Valine配置</h2><h3 id="5-1-注册-LeanCloud"><a href="#5-1-注册-LeanCloud" class="headerlink" title="5.1.注册 LeanCloud"></a>5.1.注册 <code>LeanCloud</code></h3><p>先到 <a href="https://leancloud.cn/dashboard/login.html#/signup" target="_blank" rel="noopener">leancloud</a>进行注册、创建应用等等，页面有帮助教程。</p>
<p>到【设置】-【应用keys】，找到 <code>AppID</code> 和 <code>AppKey</code> ，配置需要。</p>
<h3 id="5-2-部署云引擎"><a href="#5-2-部署云引擎" class="headerlink" title="5.2.部署云引擎"></a>5.2.部署云引擎</h3><ol>
<li>在Leancloud 【云引擎】-【设置】界面，创建代码仓库，并保存：<code>https://github.com/DesertsP/Valine-Admin.git</code></li>
<li>设置环境变量</li>
<li>部署（分支选master）</li>
</ol>
<p>可参考：<a href="https://deserts.io/valine-admin-document/" target="_blank" rel="noopener">Valine配置手册</a></p>
<h3 id="5-3-新建-valine-ejs-文件"><a href="#5-3-新建-valine-ejs-文件" class="headerlink" title="5.3.新建 valine.ejs 文件"></a>5.3.新建 <code>valine.ejs</code> 文件</h3><p>在 <code>themes\yilia-plus\layout\_partial\post</code> 目录下，新建 <code>valine.ejs</code> 文件，添加如下内容：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"valine_comment"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--载入js，在&lt;/body&gt;之前插入即可--&gt;</span></span><br><span class="line"><span class="comment">&lt;!--Leancloud 操作库:--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"//cdn1.lncld.net/static/js/3.0.4/av-min.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--Valine 的核心代码库--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"//unpkg.com/valine/dist/Valine.min.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="actionscript">  <span class="keyword">var</span> notify = <span class="string">'&lt;%= theme.valine.notify %&gt;'</span> == <span class="literal">true</span> ? <span class="literal">true</span> : <span class="literal">false</span>;</span></span><br><span class="line"><span class="actionscript">  <span class="keyword">var</span> verify = <span class="string">'&lt;%= theme.valine.verify %&gt;'</span> == <span class="literal">true</span> ? <span class="literal">true</span> : <span class="literal">false</span>;</span></span><br><span class="line"><span class="actionscript">  <span class="keyword">new</span> Valine(&#123;</span></span><br><span class="line">      av: AV,</span><br><span class="line"><span class="actionscript">      el: <span class="string">'.valine_comment'</span>,</span></span><br><span class="line"><span class="actionscript">      emoticon_url: <span class="string">'https://cloud.panjunwen.com/alu'</span>,</span></span><br><span class="line"><span class="actionscript">      emoticon_list: [<span class="string">"狂汗.png"</span>,<span class="string">"不说话.png"</span>,<span class="string">"汗.png"</span>,<span class="string">"坐等.png"</span>,<span class="string">"献花.png"</span>,<span class="string">"不高兴.png"</span>,<span class="string">"中刀.png"</span>,<span class="string">"害羞.png"</span>,<span class="string">"皱眉.png"</span>,<span class="string">"小眼睛.png"</span>,<span class="string">"暗地观察.png"</span>],</span></span><br><span class="line"><span class="actionscript">      app_id: <span class="string">'&lt;%= theme.valine.appid %&gt;'</span>,</span></span><br><span class="line"><span class="actionscript">      app_key: <span class="string">'&lt;%= theme.valine.appkey %&gt;'</span>,</span></span><br><span class="line"><span class="actionscript">      placeholder: <span class="string">'&lt;%= theme.valine.placeholder %&gt;'</span></span></span><br><span class="line">    &#125;);</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="5-4-修改主题配置文件-config-yml"><a href="#5-4-修改主题配置文件-config-yml" class="headerlink" title="5.4.修改主题配置文件 _config.yml"></a>5.4.修改主题配置文件 <code>_config.yml</code></h3><p>打开文件 <code>themes\yilia-plus\_config.yml</code> , 修改配置：</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># valine 评论系统，到leancloud进行注册</span></span><br><span class="line"><span class="comment"># https://leancloud.cn/dashboard/login.html#/signup</span></span><br><span class="line"><span class="attr">valine:</span></span><br><span class="line"> <span class="attr">appid:</span> <span class="string">''</span>  <span class="comment"># Leancloud应用的appId</span></span><br><span class="line"> <span class="attr">appkey:</span> <span class="string">''</span>          <span class="comment"># Leancloud应用的appKey</span></span><br><span class="line"> <span class="attr">verify:</span> <span class="literal">false</span>      <span class="comment"># 验证码</span></span><br><span class="line"> <span class="attr">notify:</span> <span class="literal">true</span>       <span class="comment"># 评论回复提醒</span></span><br><span class="line"> <span class="attr">avatar:</span> <span class="string">mm</span>        <span class="comment"># 评论列表头像样式（https://valine.js.org/avatar）</span></span><br><span class="line"> <span class="attr">placeholder:</span> <span class="string">欢迎您的评论~</span> <span class="comment"># 评论框占位符</span></span><br></pre></td></tr></table></figure>

<h3 id="5-5-在文件-article-ejs-中添加配置"><a href="#5-5-在文件-article-ejs-中添加配置" class="headerlink" title="5.5.在文件 article.ejs 中添加配置"></a>5.5.在文件 <code>article.ejs</code> 中添加配置</h3><p>打开 <code>themes\yilia-plus\layout\_partial\article.ejs</code> 文件，添加：</p>
<figure class="highlight xl"><table><tr><td class="code"><pre><span class="line">&lt;% <span class="keyword">if</span> (<span class="built_in">theme</span>.valine &amp;&amp; <span class="built_in">theme</span>.valine.appid &amp;&amp; <span class="built_in">theme</span>.valine.appkey)&#123; %&gt;</span><br><span class="line">    &lt;section id=<span class="string">"comments"</span> style=<span class="string">"margin:10px;padding:10px;background:#fff;"</span>&gt;</span><br><span class="line">      &lt;%- partial(<span class="string">'post/valine'</span>, &#123;</span><br><span class="line">        key: post.slug,</span><br><span class="line">        <span class="built_in">title</span>: post.<span class="built_in">title</span>,</span><br><span class="line">        url: config.url+url_for(post.<span class="built_in">path</span>)</span><br><span class="line">        &#125;) %&gt;</span><br><span class="line">    &lt;/section&gt;</span><br><span class="line">  &lt;% &#125; %&gt;</span><br></pre></td></tr></table></figure>


<hr>
]]></content>
      <categories>
        <category>网站</category>
        <category>Hexo</category>
      </categories>
      <tags>
        <tag>yilia</tag>
        <tag>评论系统</tag>
      </tags>
  </entry>
  <entry>
    <title>Hexo搭建个人博客：Next主题-相关配置</title>
    <url>/archives/32ea94eb.html</url>
    <content><![CDATA[<p>网上关于搭建个人博客网站所用主题，yilia和next两款比较多，这里记录一下next5.1.4相关的一些配置。</p>
<p>目前升级到 7+</p>
<a id="more"></a>

<h2 id="1-页面显示问题"><a href="#1-页面显示问题" class="headerlink" title="1.页面显示问题"></a>1.页面显示问题</h2><h3 id="1-1-subnav链接错误"><a href="#1-1-subnav链接错误" class="headerlink" title="1.1.subnav链接错误"></a>1.1.subnav链接错误</h3><p>修改主题配置文件后，运行时，出现 <code>subnav子导航</code> 链接中多了 <code>%20</code> 这样的字样，这是主题内置字符串切割时出现错误，可以修改配置，将空格去掉，如：</p>
<p>将</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">menu:</span></span><br><span class="line">  <span class="attr">home:</span> <span class="string">/</span> <span class="string">||</span> <span class="string">home</span></span><br><span class="line">  <span class="comment"># about: /about/ || user</span></span><br><span class="line">  <span class="attr">tags:</span> <span class="string">/tags/</span> <span class="string">||</span> <span class="string">tags</span></span><br><span class="line">  <span class="attr">categories:</span> <span class="string">/categories/</span> <span class="string">||</span> <span class="string">th</span></span><br></pre></td></tr></table></figure>

<p>改为：</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">menu:</span></span><br><span class="line">  <span class="attr">home:</span> <span class="string">/||home</span></span><br><span class="line">  <span class="comment"># about: /about/||user</span></span><br><span class="line">  <span class="attr">tags:</span> <span class="string">/tags/||tags</span></span><br><span class="line">  <span class="attr">categories:</span> <span class="string">/categories/||th</span></span><br></pre></td></tr></table></figure>

<h3 id="1-2-站点概览中的链接错误"><a href="#1-2-站点概览中的链接错误" class="headerlink" title="1.2.站点概览中的链接错误"></a>1.2.站点概览中的链接错误</h3><p>在 <code>themes\hexo-theme-next\layout_macro</code> 中，打开 <code>sidebar.swig</code> 文件，找到 <code>&lt;div class=&quot;site-state-item site-state-posts&quot;&gt;</code>，</p>
<p>将:</p>
<figure class="highlight django"><table><tr><td class="code"><pre><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"</span></span></span><span class="template-variable">&#123;&#123; url_for(theme.menu.archives).split('||')[0] | trim &#125;&#125;</span><span class="xml"><span class="tag"><span class="string">"</span>&gt;</span></span></span><br></pre></td></tr></table></figure>

<p>改为：</p>
<figure class="highlight django"><table><tr><td class="code"><pre><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"</span></span></span><span class="template-variable">&#123;&#123; url_for(theme.menu.archives.split('||')[0]) | trim &#125;&#125;</span><span class="xml"><span class="tag"><span class="string">"</span>&gt;</span></span></span><br></pre></td></tr></table></figure>

<blockquote>
<p>参考：<a href="https://blog.csdn.net/fullbug/article/details/103844424" target="_blank" rel="noopener">导航栏链接URL乱码问题</a></p>
</blockquote>
<h3 id="1-3-hexo-g-运行错误"><a href="#1-3-hexo-g-运行错误" class="headerlink" title="1.3. hexo g 运行错误"></a>1.3. <code>hexo g</code> 运行错误</h3><h4 id="1-检查根目录配置文件中-url-和-root"><a href="#1-检查根目录配置文件中-url-和-root" class="headerlink" title="1) 检查根目录配置文件中 url 和 root"></a>1) 检查根目录配置文件中 url 和 root</h4><p>如：</p>
<figure class="highlight groovy"><table><tr><td class="code"><pre><span class="line"><span class="string">url:</span> <span class="string">http:</span><span class="comment">//yourname.github.io</span></span><br><span class="line"><span class="string">root:</span> /</span><br></pre></td></tr></table></figure>

<h4 id="2-更新-hexo-和依赖"><a href="#2-更新-hexo-和依赖" class="headerlink" title="2) 更新 hexo 和依赖"></a>2) 更新 hexo 和依赖</h4><p>如：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm update appname -g (or --save)</span><br></pre></td></tr></table></figure>

<h4 id="3-检查-post-提交的md文件格式"><a href="#3-检查-post-提交的md文件格式" class="headerlink" title="3) 检查 post 提交的md文件格式"></a>3) 检查 post 提交的md文件格式</h4><blockquote>
<p>可参考：<a href="https://hexo.io/zh-cn/docs/front-matter" target="_blank" rel="noopener">Front-matter</a></p>
</blockquote>
<h3 id="1-4-文章底部标签样式"><a href="#1-4-文章底部标签样式" class="headerlink" title="1.4.文章底部标签样式"></a>1.4.文章底部标签样式</h3><p>位置：<code>themes\next\layout\_macro\post.swig</code>，搜索 <code>&lt;div class=&quot;post-tags&quot;&gt;</code><br>旧版中，可以将a标签中的 <code>#</code> 替换为 <code>&lt;i class=&quot;fa fa-tag&quot;&gt;&lt;/i&gt;</code><br>新版中，可以在主题配置文件中，找到 <code>tag_icon</code> 并改为 <code>tag_icon: true</code> </p>
<h3 id="1-5-文章目录编号显示问题"><a href="#1-5-文章目录编号显示问题" class="headerlink" title="1.5.文章目录编号显示问题"></a>1.5.文章目录编号显示问题</h3><p>大部分人习惯自己给文章标号，此时，自动编号就成了一种 `` 般的存在。<br>在主题配置文件中找到 <code>toc</code> 节点，修改 <code>number</code> 为  <code>false</code></p>
<h3 id="1-6-文章图片显示问题"><a href="#1-6-文章图片显示问题" class="headerlink" title="1.6.文章图片显示问题"></a>1.6.文章图片显示问题</h3><p>为了方便写文章时，给文章添加图片，尽管markdown有插入图片的语法，但为了灵活性考虑，我们可能会用到 <code>hexo-asset-image</code> 这个插件，</p>
<p>它让我们在插入本地图片时变得非常方便，此时，我们要用asset的语法:</p>
<figure class="highlight maxima"><table><tr><td class="code"><pre><span class="line">&#123;<span class="symbol">%</span> asset_img <span class="built_in">demo</span>.png This <span class="built_in">is</span> <span class="built_in">image</span> <span class="symbol">%</span>&#125;</span><br></pre></td></tr></table></figure>

<p>但这个时候不做任何处理的话，生成的图片链接可能会出现重复上一层目录的情况。</p>
<p>找到插件目录，打开index.js文件，将内容替换成如下代码：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="meta">'use strict'</span>;</span><br><span class="line"><span class="keyword">var</span> cheerio = <span class="built_in">require</span>(<span class="string">'cheerio'</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// http://stackoverflow.com/questions/14480345/how-to-get-the-nth-occurrence-in-a-string</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getPosition</span>(<span class="params">str, m, i</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> str.split(m, i).join(m).length;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> version = <span class="built_in">String</span>(hexo.version).split(<span class="string">'.'</span>);</span><br><span class="line">hexo.extend.filter.register(<span class="string">'after_post_render'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">data</span>)</span>&#123;</span><br><span class="line">  <span class="keyword">var</span> config = hexo.config;</span><br><span class="line">  <span class="keyword">if</span>(config.post_asset_folder)&#123;</span><br><span class="line">      <span class="keyword">var</span> link = data.permalink;</span><br><span class="line">  <span class="keyword">if</span>(version.length &gt; <span class="number">0</span> &amp;&amp; <span class="built_in">Number</span>(version[<span class="number">0</span>]) == <span class="number">3</span>)</span><br><span class="line">     <span class="keyword">var</span> beginPos = getPosition(link, <span class="string">'/'</span>, <span class="number">1</span>) + <span class="number">1</span>;</span><br><span class="line">  <span class="keyword">else</span></span><br><span class="line">     <span class="keyword">var</span> beginPos = getPosition(link, <span class="string">'/'</span>, <span class="number">3</span>) + <span class="number">1</span>;</span><br><span class="line">  <span class="comment">// In hexo 3.1.1, the permalink of "about" page is like ".../about/index.html".</span></span><br><span class="line">  <span class="keyword">var</span> endPos = link.lastIndexOf(<span class="string">'/'</span>) + <span class="number">1</span>;</span><br><span class="line">    link = link.substring(beginPos, endPos);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> toprocess = [<span class="string">'excerpt'</span>, <span class="string">'more'</span>, <span class="string">'content'</span>];</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; toprocess.length; i++)&#123;</span><br><span class="line">      <span class="keyword">var</span> key = toprocess[i];</span><br><span class="line"> </span><br><span class="line">      <span class="keyword">var</span> $ = cheerio.load(data[key], &#123;</span><br><span class="line">        ignoreWhitespace: <span class="literal">false</span>,</span><br><span class="line">        xmlMode: <span class="literal">false</span>,</span><br><span class="line">        lowerCaseTags: <span class="literal">false</span>,</span><br><span class="line">        decodeEntities: <span class="literal">false</span></span><br><span class="line">      &#125;);</span><br><span class="line"></span><br><span class="line">      $(<span class="string">'img'</span>).each(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">if</span> ($(<span class="keyword">this</span>).attr(<span class="string">'src'</span>))&#123;</span><br><span class="line">      <span class="comment">// For windows style path, we replace '\' to '/'.</span></span><br><span class="line">      <span class="keyword">var</span> src = $(<span class="keyword">this</span>).attr(<span class="string">'src'</span>).replace(<span class="string">'\\'</span>, <span class="string">'/'</span>);</span><br><span class="line">      <span class="keyword">if</span>(!<span class="regexp">/http[s]*.*|\/\/.*/</span>.test(src) &amp;&amp;</span><br><span class="line">         !<span class="regexp">/^\s*\//</span>.test(src)) &#123;</span><br><span class="line">        <span class="comment">// For "about" page, the first part of "src" can't be removed.</span></span><br><span class="line">        <span class="comment">// In addition, to support multi-level local directory.</span></span><br><span class="line">        <span class="keyword">var</span> linkArray = link.split(<span class="string">'/'</span>).filter(<span class="function"><span class="keyword">function</span>(<span class="params">elem</span>)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> elem != <span class="string">''</span>;</span><br><span class="line">        &#125;);</span><br><span class="line">        <span class="keyword">var</span> srcArray = src.split(<span class="string">'/'</span>).filter(<span class="function"><span class="keyword">function</span>(<span class="params">elem</span>)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> elem != <span class="string">''</span> &amp;&amp; elem != <span class="string">'.'</span>;</span><br><span class="line">        &#125;);</span><br><span class="line">        <span class="keyword">if</span>(srcArray.length &gt; <span class="number">1</span>)</span><br><span class="line">        srcArray.shift();</span><br><span class="line">        src = srcArray.join(<span class="string">'/'</span>);</span><br><span class="line">        $(<span class="keyword">this</span>).attr(<span class="string">'src'</span>, config.root + link + src);</span><br><span class="line">        <span class="built_in">console</span>.info&amp;&amp;<span class="built_in">console</span>.info(<span class="string">"update link as:--&gt;"</span>+config.root + link + src);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">      <span class="built_in">console</span>.info&amp;&amp;<span class="built_in">console</span>.info(<span class="string">"no src attr, skipped..."</span>);</span><br><span class="line">      <span class="built_in">console</span>.info&amp;&amp;<span class="built_in">console</span>.info($(<span class="keyword">this</span>));</span><br><span class="line">    &#125;</span><br><span class="line">      &#125;);</span><br><span class="line">      data[key] = $.html();</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>


<h3 id="1-7-文章内容显示不全"><a href="#1-7-文章内容显示不全" class="headerlink" title="1.7.文章内容显示不全"></a>1.7.文章内容显示不全</h3><p>在主题目录中，找到主题配置文件，搜索 <code>motion</code>，修改如下：</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">motion:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">async:</span> <span class="literal">true</span></span><br></pre></td></tr></table></figure>


<h2 id="2-添加阅读进度"><a href="#2-添加阅读进度" class="headerlink" title="2.添加阅读进度"></a>2.添加阅读进度</h2><h3 id="2-1-向上返回按钮加上阅读进度"><a href="#2-1-向上返回按钮加上阅读进度" class="headerlink" title="2.1.向上返回按钮加上阅读进度"></a>2.1.向上返回按钮加上阅读进度</h3><p>在主题配置文件中，找到 <code>scrollpercent</code> ，更新：</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">scrollpercent:</span> <span class="literal">true</span></span><br></pre></td></tr></table></figure>

<h3 id="2-2-网页顶部添加阅读进度条"><a href="#2-2-网页顶部添加阅读进度条" class="headerlink" title="2.2.网页顶部添加阅读进度条"></a>2.2.网页顶部添加阅读进度条</h3><h4 id="2-2-1-新建文件-custom-reading-js"><a href="#2-2-1-新建文件-custom-reading-js" class="headerlink" title="2.2.1.新建文件 custom_reading.js"></a>2.2.1.新建文件 <code>custom_reading.js</code></h4><p>在 <code>themes\next\source\js\src</code> 中，新建文件 <code>custom_reading.js</code>，添加内容：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">$(<span class="built_in">document</span>).ready(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  $(<span class="built_in">window</span>).scroll(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    $(<span class="string">".top-scroll-bar"</span>).attr(<span class="string">"style"</span>, <span class="string">"width: "</span> + ($(<span class="keyword">this</span>).scrollTop() / ($(<span class="built_in">document</span>).height() - $(<span class="keyword">this</span>).height()) * <span class="number">100</span>) + <span class="string">"%; display: block;"</span>);</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
<h4 id="2-2-2-更新-commons-swig"><a href="#2-2-2-更新-commons-swig" class="headerlink" title="2.2.2.更新 commons.swig"></a>2.2.2.更新 <code>commons.swig</code></h4><p>打开 <code>themes\next\layout\_scripts\commons.swig</code>，在 <code>js_commons</code> 中添加：</p>
<figure class="highlight scheme"><table><tr><td class="code"><pre><span class="line"><span class="symbol">'src/custom_reading.js</span>'</span><br></pre></td></tr></table></figure>

<h4 id="2-2-3-修改-header-swig"><a href="#2-2-3-修改-header-swig" class="headerlink" title="2.2.3.修改 header.swig"></a>2.2.3.修改 <code>header.swig</code></h4><p>打开 <code>themes\next\layout\_partials\header.swig</code>，在 <code>&lt;div class=&quot;custom-logo-site-title&quot;&gt;</code> 上面，添加：</p>
<figure class="highlight applescript"><table><tr><td class="code"><pre><span class="line">&#123;<span class="comment"># 顶部阅读进度条 #&#125;</span></span><br><span class="line">&lt;<span class="keyword">div</span> <span class="built_in">class</span>=<span class="string">"top-scroll-bar"</span>&gt;&lt;/<span class="keyword">div</span>&gt;</span><br></pre></td></tr></table></figure>

<h4 id="2-2-4-修改样式"><a href="#2-2-4-修改样式" class="headerlink" title="2.2.4.修改样式"></a>2.2.4.修改样式</h4><p>打开 <code>themes\next\source\css\_custom\custom.styl</code>，添加：</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.top-scroll-bar</span> &#123;</span><br><span class="line">    <span class="attribute">position</span>: fixed;</span><br><span class="line">    <span class="attribute">top</span>: <span class="number">0</span>;</span><br><span class="line">    <span class="attribute">left</span>: <span class="number">0</span>;</span><br><span class="line">    <span class="attribute">z-index</span>: <span class="number">9999</span>;</span><br><span class="line">    <span class="attribute">display</span>: none;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">0</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">2px</span>;</span><br><span class="line">    <span class="attribute">background</span>: <span class="number">#6d6d6d</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="3-修改友链样式"><a href="#3-修改友链样式" class="headerlink" title="3.修改友链样式"></a>3.修改友链样式</h2><p>原格式是 <code>title+link</code> ，现加上图标和描述，方式自定义。</p>
<h3 id="3-1-修改主题配置文件"><a href="#3-1-修改主题配置文件" class="headerlink" title="3.1.修改主题配置文件"></a>3.1.修改主题配置文件</h3><p>如：</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">links:</span></span><br><span class="line">  <span class="string">Google搜索:</span> </span><br><span class="line">    <span class="attr">name:</span> <span class="string">Google搜索</span></span><br><span class="line">    <span class="attr">url:</span> <span class="string">https://www.google.com/</span></span><br><span class="line">    <span class="attr">ico:</span> <span class="string">/images/ico/google.ico</span></span><br><span class="line">    <span class="attr">description:</span> <span class="string">最受欢迎的搜索引擎，国内使用可用代理或安装助手</span></span><br><span class="line">  <span class="string">Bing搜索:</span> </span><br><span class="line">    <span class="attr">name:</span> <span class="string">Bing搜索</span></span><br><span class="line">    <span class="attr">url:</span> <span class="string">https://cn.bing.com/</span></span><br><span class="line">    <span class="attr">ico:</span> <span class="string">/images/ico/biying.ico</span></span><br><span class="line">    <span class="attr">description:</span> <span class="string">必应搜索，一款好用的搜索引擎</span></span><br></pre></td></tr></table></figure>

<h3 id="3-2-修改-sidebar-swig"><a href="#3-2-修改-sidebar-swig" class="headerlink" title="3.2.修改 sidebar.swig"></a>3.2.修改 <code>sidebar.swig</code></h3><p>打开文件 <code>themes\next\layout\_macro\sidebar.swig</code>，找到 <code>&lt;ul class=&quot;links-of-blogroll-list&quot;&gt;</code>，在下面修改：</p>
<figure class="highlight django"><table><tr><td class="code"><pre><span class="line"><span class="template-tag">&#123;% <span class="name"><span class="name">for</span></span> item <span class="keyword">in</span> theme.links %&#125;</span></span><br><span class="line"><span class="xml">  <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">"links-of-blogroll-item"</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"</span></span></span><span class="template-variable">&#123;&#123; item.url &#125;&#125;</span><span class="xml"><span class="tag"><span class="string">"</span> </span></span><span class="template-tag">&#123;% <span class="name"><span class="name">if</span></span> item.description %&#125;</span><span class="xml"><span class="tag"> <span class="attr">title</span>=<span class="string">"</span></span></span><span class="template-variable">&#123;&#123; item.description &#125;&#125;</span><span class="xml"><span class="tag"><span class="string">"</span> </span></span><span class="template-tag">&#123;% <span class="name"><span class="name">endif</span></span> %&#125;</span><span class="xml"><span class="tag">  <span class="attr">target</span>=<span class="string">"_blank"</span>&gt;</span></span></span><br><span class="line"><span class="xml">      </span><span class="template-tag">&#123;% <span class="name"><span class="name">if</span></span> item.ico %&#125;</span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"</span></span></span><span class="template-variable">&#123;&#123; config.root &#125;&#125;</span><span class="xml"><span class="tag"><span class="string"></span></span></span><span class="template-variable">&#123;&#123; item.ico &#125;&#125;</span><span class="xml"><span class="tag"><span class="string">"</span> <span class="attr">class</span>=<span class="string">"links-item-img"</span>&gt;</span><span class="symbol">&amp;emsp;</span></span></span><br><span class="line"><span class="xml">      </span><span class="template-tag">&#123;% <span class="name"><span class="name">else</span></span> %&#125;</span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;<span class="name">i</span> <span class="attr">class</span>=<span class="string">"icon-link icon"</span>&gt;</span><span class="tag">&lt;/<span class="name">i</span>&gt;</span></span></span><br><span class="line"><span class="xml">      </span><span class="template-tag">&#123;% <span class="name"><span class="name">endif</span></span> %&#125;</span></span><br><span class="line"><span class="xml">      </span><span class="template-variable">&#123;&#123; item.name &#125;&#125;</span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;/<span class="name">a</span>&gt;</span></span></span><br><span class="line"><span class="xml">  <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span><br><span class="line"><span class="template-tag">&#123;% <span class="name"><span class="name">endfor</span></span> %&#125;</span></span><br></pre></td></tr></table></figure>

<h2 id="4-页面背景设置"><a href="#4-页面背景设置" class="headerlink" title="4.页面背景设置"></a>4.页面背景设置</h2><p>打开文件 <code>themes/next/source/css/_custom/custom.styl</code>，添加：</p>
<figure class="highlight scss"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 修改背景图片</span></span><br><span class="line"><span class="selector-tag">body</span> &#123;</span><br><span class="line">  <span class="attribute">background</span>:url(https://source.unsplash.com/random/<span class="number">1600</span>x900?wallpapers);</span><br><span class="line">  <span class="attribute">background-repeat</span>: no-repeat;</span><br><span class="line">  <span class="attribute">background-attachment</span>:fixed;</span><br><span class="line">  <span class="attribute">background-position</span>:<span class="number">50%</span> <span class="number">50%</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 修改主体透明度</span></span><br><span class="line"><span class="selector-class">.main-inner</span> &#123;</span><br><span class="line">  <span class="attribute">background</span>: <span class="number">#fff</span>;</span><br><span class="line">  <span class="attribute">opacity</span>: <span class="number">0.8</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 修改菜单栏透明度</span></span><br><span class="line"><span class="selector-class">.header-inner</span> &#123;</span><br><span class="line">  <span class="attribute">opacity</span>: <span class="number">0.8</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>参考：<a href="https://blog.diqigan.cn/posts/add-background-picture-for-next.html" target="_blank" rel="noopener">next添加背景图片</a></p>
</blockquote>
<h2 id="5-加入代码块复制功能"><a href="#5-加入代码块复制功能" class="headerlink" title="5.加入代码块复制功能"></a>5.加入代码块复制功能</h2><h3 id="5-1-添加-copy-code-swig-文件"><a href="#5-1-添加-copy-code-swig-文件" class="headerlink" title="5.1.添加 copy-code.swig 文件"></a>5.1.添加 <code>copy-code.swig</code> 文件</h3><p>在 <code>themes/next/layout/_third-party/</code> 下，新建 <code>copy-code.swig</code> 文件，内容如下：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line">&#123;% if theme.codeblock.copy_button.enable %&#125;</span><br><span class="line">  <span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="css">    <span class="selector-class">.copy-btn</span> &#123;</span></span><br><span class="line">      display: inline-block;</span><br><span class="line">      padding: 6px 12px;</span><br><span class="line">      font-size: 13px;</span><br><span class="line">      font-weight: 700;</span><br><span class="line">      line-height: 20px;</span><br><span class="line"><span class="css">      <span class="selector-tag">color</span>: <span class="selector-id">#333</span>;</span></span><br><span class="line">      white-space: nowrap;</span><br><span class="line">      vertical-align: middle;</span><br><span class="line">      cursor: pointer;</span><br><span class="line"><span class="css">      <span class="selector-tag">background-color</span>: <span class="selector-id">#eee</span>;</span></span><br><span class="line"><span class="css">      <span class="selector-tag">background-image</span>: <span class="selector-tag">linear-gradient</span>(<span class="selector-id">#fcfcfc</span>, <span class="selector-id">#eee</span>);</span></span><br><span class="line"><span class="css">      <span class="selector-tag">border</span>: 1<span class="selector-tag">px</span> <span class="selector-tag">solid</span> <span class="selector-id">#d5d5d5</span>;</span></span><br><span class="line">      border-radius: 3px;</span><br><span class="line">      user-select: none;</span><br><span class="line">      outline: 0;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="css">    <span class="selector-class">.highlight-wrap</span> <span class="selector-class">.copy-btn</span> &#123;</span></span><br><span class="line"><span class="css">      <span class="selector-tag">transition</span>: <span class="selector-tag">opacity</span> <span class="selector-class">.3s</span> <span class="selector-tag">ease-in-out</span>;</span></span><br><span class="line">      opacity: 0;</span><br><span class="line">      padding: 2px 6px;</span><br><span class="line">      position: absolute;</span><br><span class="line">      right: 4px;</span><br><span class="line">      top: 8px;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="css">    <span class="selector-class">.highlight-wrap</span><span class="selector-pseudo">:hover</span> <span class="selector-class">.copy-btn</span>,</span></span><br><span class="line"><span class="css">    <span class="selector-class">.highlight-wrap</span> <span class="selector-class">.copy-btn</span><span class="selector-pseudo">:focus</span> &#123;</span></span><br><span class="line">      opacity: 1</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="css">    <span class="selector-class">.highlight-wrap</span> &#123;</span></span><br><span class="line">      position: relative;</span><br><span class="line">    &#125;</span><br><span class="line">  <span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line">  </span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">    $(<span class="string">'.highlight'</span>).each(<span class="function"><span class="keyword">function</span> (<span class="params">i, e</span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">      <span class="keyword">var</span> $wrap = $(<span class="string">'&lt;div&gt;'</span>).addClass(<span class="string">'highlight-wrap'</span>)</span></span><br><span class="line"><span class="javascript">      $(e).after($wrap)</span></span><br><span class="line"><span class="javascript">      $wrap.append($(<span class="string">'&lt;button&gt;'</span>).addClass(<span class="string">'copy-btn'</span>).append(<span class="string">'&#123;&#123;__("post.copy_button")&#125;&#125;'</span>).on(<span class="string">'click'</span>, <span class="function"><span class="keyword">function</span> (<span class="params">e</span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">        <span class="keyword">var</span> code = $(<span class="keyword">this</span>).parent().find(<span class="string">'.code'</span>).find(<span class="string">'.line'</span>).map(<span class="function"><span class="keyword">function</span> (<span class="params">i, e</span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">          <span class="keyword">return</span> $(e).text()</span></span><br><span class="line"><span class="actionscript">        &#125;).toArray().join(<span class="string">'\n'</span>)</span></span><br><span class="line"><span class="javascript">        <span class="keyword">var</span> ta = <span class="built_in">document</span>.createElement(<span class="string">'textarea'</span>)</span></span><br><span class="line"><span class="javascript">        <span class="built_in">document</span>.body.appendChild(ta)</span></span><br><span class="line"><span class="actionscript">        ta.style.position = <span class="string">'absolute'</span></span></span><br><span class="line"><span class="actionscript">        ta.style.top = <span class="string">'0px'</span></span></span><br><span class="line"><span class="actionscript">        ta.style.left = <span class="string">'0px'</span></span></span><br><span class="line">        ta.value = code</span><br><span class="line">        ta.select()</span><br><span class="line">        ta.focus()</span><br><span class="line"><span class="javascript">        <span class="keyword">var</span> result = <span class="built_in">document</span>.execCommand(<span class="string">'copy'</span>)</span></span><br><span class="line"><span class="javascript">        <span class="built_in">document</span>.body.removeChild(ta)</span></span><br><span class="line">        &#123;% if theme.codeblock.copy_button.show_result %&#125;</span><br><span class="line"><span class="javascript">          <span class="keyword">if</span>(result)$(<span class="keyword">this</span>).text(<span class="string">'&#123;&#123;__("post.copy_success")&#125;&#125;'</span>)</span></span><br><span class="line"><span class="javascript">          <span class="keyword">else</span> $(<span class="keyword">this</span>).text(<span class="string">'&#123;&#123;__("post.copy_failure")&#125;&#125;'</span>)</span></span><br><span class="line">        &#123;% endif %&#125;</span><br><span class="line"><span class="javascript">        $(<span class="keyword">this</span>).blur()</span></span><br><span class="line"><span class="actionscript">      &#125;)).on(<span class="string">'mouseleave'</span>, <span class="function"><span class="keyword">function</span> <span class="params">(e)</span> </span>&#123;</span></span><br><span class="line"><span class="javascript">        <span class="keyword">var</span> $b = $(<span class="keyword">this</span>).find(<span class="string">'.copy-btn'</span>)</span></span><br><span class="line"><span class="actionscript">        setTimeout(<span class="function"><span class="keyword">function</span> <span class="params">()</span> </span>&#123;</span></span><br><span class="line"><span class="actionscript">          $b.text(<span class="string">'&#123;&#123;__("post.copy_button")&#125;&#125;'</span>)</span></span><br><span class="line">        &#125;, 300)</span><br><span class="line">      &#125;).append(e)</span><br><span class="line">    &#125;)</span><br><span class="line">  <span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">&#123;% endif %&#125;</span><br></pre></td></tr></table></figure>

<h3 id="5-2-编辑-layout-swig-文件"><a href="#5-2-编辑-layout-swig-文件" class="headerlink" title="5.2.编辑 _layout.swig 文件"></a>5.2.编辑 <code>_layout.swig</code> 文件</h3><p>返回上一层，在layout文件夹下，修改 _layout.swig，在 <code>&lt;/body&gt;</code> 上面，加上：</p>
<figure class="highlight django"><table><tr><td class="code"><pre><span class="line"><span class="template-tag">&#123;% <span class="name"><span class="name">include</span></span> '_third-party/copy-code.swig' %&#125;</span></span><br></pre></td></tr></table></figure>

<h3 id="5-3-添加复制按钮显示的文字"><a href="#5-3-添加复制按钮显示的文字" class="headerlink" title="5.3.添加复制按钮显示的文字"></a>5.3.添加复制按钮显示的文字</h3><p>在 <code>themes/next/languages/</code> 目录下，找到 <code>在zh-CN.yml</code> 或 <code>在zh-Hans.yml</code> 文件中的 <code>post</code> 节点，向其中添加：</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">copy_button:</span> <span class="string">复制</span></span><br><span class="line"><span class="attr">copy_success:</span> <span class="string">复制成功</span></span><br><span class="line"><span class="attr">copy_failure:</span> <span class="string">复制失败</span></span><br></pre></td></tr></table></figure>

<p>在 <code>en.yml</code> 文件中同一节点位置，添加：</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">copy_button:</span> <span class="string">Copy</span></span><br><span class="line"><span class="attr">copy_success:</span> <span class="string">success</span></span><br><span class="line"><span class="attr">copy_failure:</span> <span class="string">Copy</span> <span class="string">failed</span></span><br></pre></td></tr></table></figure>

<h3 id="5-4-修改主题配置文件"><a href="#5-4-修改主题配置文件" class="headerlink" title="5.4.修改主题配置文件"></a>5.4.修改主题配置文件</h3><p>更新 <code>themes/next/_config.yml</code>，添加：</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">codeblock:</span></span><br><span class="line">  <span class="attr">border_radius:</span></span><br><span class="line">  <span class="comment"># Add copy button on codeblock</span></span><br><span class="line">  <span class="attr">copy_button:</span></span><br><span class="line">    <span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line">    <span class="comment"># Show text copy result</span></span><br><span class="line">    <span class="attr">show_result:</span> <span class="literal">true</span></span><br></pre></td></tr></table></figure>

<blockquote>
<p>参考：<a href="https://qiming.info/Hexo%E5%8D%9A%E5%AE%A2%E4%B8%AD%E5%8A%A0%E5%85%A5%E4%BB%A3%E7%A0%81%E5%9D%97%E5%A4%8D%E5%88%B6%E5%8A%9F%E8%83%BD/" target="_blank" rel="noopener">next主题代码块复制</a></p>
</blockquote>
<h2 id="6-修改版权信息"><a href="#6-修改版权信息" class="headerlink" title="6.修改版权信息"></a>6.修改版权信息</h2><h3 id="6-1-修改主题配置文件"><a href="#6-1-修改主题配置文件" class="headerlink" title="6.1.修改主题配置文件"></a>6.1.修改主题配置文件</h3><p>改为：</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">post_copyright:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">license:</span> <span class="string">Attribution-NonCommercial-NoDerivatives</span> <span class="number">4.0</span> <span class="string">International</span> <span class="string">(CC</span> <span class="string">BY-NC-ND</span> <span class="number">4.0</span><span class="string">)</span></span><br><span class="line">  <span class="attr">license_url:</span> <span class="string">https://creativecommons.org/licenses/by-nc-nd/4.0/</span></span><br></pre></td></tr></table></figure>

<h3 id="6-2-新建-my-copyright-swig-文件"><a href="#6-2-新建-my-copyright-swig-文件" class="headerlink" title="6.2.新建 my-copyright.swig 文件"></a>6.2.新建 <code>my-copyright.swig</code> 文件</h3><p>在目录 <code>themes\next\layout\_macro</code> 下，新建文件 <code>my-copyright.swig</code>，添加内容：</p>
<figure class="highlight twig"><table><tr><td class="code"><pre><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"my_post_copyright"</span>&gt;</span></span></span><br><span class="line"><span class="xml">  <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"//cdn.bootcss.com/clipboard.js/1.5.10/clipboard.min.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br><span class="line"><span class="xml">  </span></span><br><span class="line"><span class="xml">  </span><span class="comment">&#123;# JS库 sweetalert 可修改路径 #&#125;</span></span><br><span class="line"><span class="xml">  <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"https://cdn.bootcss.com/jquery/2.0.0/jquery.min.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br><span class="line"><span class="xml">  <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"https://unpkg.com/sweetalert/dist/sweetalert.min.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br><span class="line"><span class="xml">  <span class="tag">&lt;<span class="name">p</span>&gt;</span><span class="tag">&lt;<span class="name">span</span>&gt;</span>本文标题:<span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"</span></span></span><span class="template-variable">&#123;&#123; url_for(page.path) &#125;&#125;</span><span class="xml"><span class="tag"><span class="string">"</span>&gt;</span></span><span class="template-variable">&#123;&#123; page.title &#125;&#125;</span><span class="xml"><span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span><br><span class="line"><span class="xml">  <span class="tag">&lt;<span class="name">p</span>&gt;</span><span class="tag">&lt;<span class="name">span</span>&gt;</span>文章作者:<span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"/"</span> <span class="attr">title</span>=<span class="string">"访问 </span></span></span><span class="template-variable">&#123;&#123; theme.author &#125;&#125;</span><span class="xml"><span class="tag"><span class="string"> 的个人博客"</span>&gt;</span></span><span class="template-variable">&#123;&#123; theme.author &#125;&#125;</span><span class="xml"><span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span><br><span class="line"><span class="xml">  <span class="tag">&lt;<span class="name">p</span>&gt;</span><span class="tag">&lt;<span class="name">span</span>&gt;</span>发布时间:<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><span class="template-variable">&#123;&#123; page.<span class="name">date</span>.format("YYYY年MM月DD日 - HH:mm") &#125;&#125;</span><span class="xml"><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span><br><span class="line"><span class="xml">  <span class="tag">&lt;<span class="name">p</span>&gt;</span><span class="tag">&lt;<span class="name">span</span>&gt;</span>最后更新:<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><span class="template-variable">&#123;&#123; page.updated.format("YYYY年MM月DD日 - HH:mm") &#125;&#125;</span><span class="xml"><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span><br><span class="line"><span class="xml">  <span class="tag">&lt;<span class="name">p</span>&gt;</span><span class="tag">&lt;<span class="name">span</span>&gt;</span>原始链接:<span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"</span></span></span><span class="template-variable">&#123;&#123; url_for(page.path) &#125;&#125;</span><span class="xml"><span class="tag"><span class="string">"</span> <span class="attr">title</span>=<span class="string">"</span></span></span><span class="template-variable">&#123;&#123; page.title &#125;&#125;</span><span class="xml"><span class="tag"><span class="string">"</span>&gt;</span></span><span class="template-variable">&#123;&#123; page.permalink &#125;&#125;</span><span class="xml"><span class="tag">&lt;/<span class="name">a</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"copy-path"</span>  <span class="attr">title</span>=<span class="string">"点击复制文章链接"</span>&gt;</span></span></span><br><span class="line"><span class="xml">      <span class="tag">&lt;<span class="name">i</span> <span class="attr">class</span>=<span class="string">"fa fa-clipboard"</span> <span class="attr">data-clipboard-text</span>=<span class="string">"</span></span></span><span class="template-variable">&#123;&#123; page.permalink &#125;&#125;</span><span class="xml"><span class="tag"><span class="string">"</span>  <span class="attr">aria-label</span>=<span class="string">"复制成功！"</span>&gt;</span><span class="tag">&lt;/<span class="name">i</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;/<span class="name">span</span>&gt;</span></span></span><br><span class="line"><span class="xml">  <span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span><br><span class="line"><span class="xml">  <span class="tag">&lt;<span class="name">p</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">span</span>&gt;</span>版权声明:<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span></span><br><span class="line"><span class="xml">    本博客所有文章除特别声明外，均采用 </span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">a</span> <span class="attr">rel</span>=<span class="string">"license"</span> <span class="attr">href</span>=<span class="string">"</span></span></span><span class="template-variable">&#123;&#123; theme.post_copyright.license_url &#125;&#125;</span><span class="xml"><span class="tag"><span class="string">"</span> <span class="attr">target</span>=<span class="string">"_blank"</span> <span class="attr">title</span>=<span class="string">"</span></span></span><span class="template-variable">&#123;&#123; theme.post_copyright.license &#125;&#125;</span><span class="xml"><span class="tag"><span class="string">"</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">i</span> <span class="attr">class</span>=<span class="string">"fa fa-creative-commons"</span>&gt;</span><span class="tag">&lt;/<span class="name">i</span>&gt;</span>BY-NC-SA <span class="tag">&lt;/<span class="name">a</span>&gt;</span></span></span><br><span class="line"><span class="xml">    许可协议。转载请注明出处!</span></span><br><span class="line"><span class="xml">  <span class="tag">&lt;/<span class="name">p</span>&gt;</span>  </span></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">script</span>&gt;</span> </span></span><br><span class="line"><span class="xml">    var clipboard = new Clipboard('.fa-clipboard');</span></span><br><span class="line"><span class="xml">      $(".fa-clipboard").click(function()&#123;</span></span><br><span class="line"><span class="xml">      clipboard.on('success', function()&#123;</span></span><br><span class="line"><span class="xml">        swal(&#123;   </span></span><br><span class="line"><span class="xml">          title: "",   </span></span><br><span class="line"><span class="xml">          text: '复制成功',</span></span><br><span class="line"><span class="xml">          icon: "success", </span></span><br><span class="line"><span class="xml">          showConfirmButton: true</span></span><br><span class="line"><span class="xml">          &#125;);</span></span><br><span class="line"><span class="xml">        &#125;);</span></span><br><span class="line"><span class="xml">    &#125;);  </span></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br></pre></td></tr></table></figure>

<h3 id="6-3-引入版权插件"><a href="#6-3-引入版权插件" class="headerlink" title="6.3.引入版权插件"></a>6.3.引入版权插件</h3><p>打开文件 <code>themes\next\layout\_macro\post.swig</code>，</p>
<p>找到:</p>
<figure class="highlight django"><table><tr><td class="code"><pre><span class="line"><span class="template-tag">&#123;% <span class="name"><span class="name">if</span></span> theme.post_copyright.enable and not is_index %&#125;</span></span><br></pre></td></tr></table></figure>

<p>将：</p>
<figure class="highlight stata"><table><tr><td class="code"><pre><span class="line">&#123;% <span class="keyword">include</span> '<span class="keyword">post</span>-<span class="keyword">copyright</span>.swig' with &#123; <span class="keyword">post</span>: <span class="keyword">post</span> &#125; %&#125;</span><br></pre></td></tr></table></figure>

<p>改成：</p>
<figure class="highlight sml"><table><tr><td class="code"><pre><span class="line">&#123;% <span class="keyword">include</span> <span class="symbol">'my</span>-copyright.swig' <span class="keyword">with</span> &#123; post: post &#125; %&#125;</span><br></pre></td></tr></table></figure>

<h2 id="7-修改网站统计显示"><a href="#7-修改网站统计显示" class="headerlink" title="7.修改网站统计显示"></a>7.修改网站统计显示</h2><h3 id="7-1-修改-footer-swig-文件"><a href="#7-1-修改-footer-swig-文件" class="headerlink" title="7.1.修改 footer.swig 文件"></a>7.1.修改 <code>footer.swig</code> 文件</h3><p>修改文件 <code>themes\next\layout\_partials\footer.swig</code>，后面添加：</p>
<figure class="highlight django"><table><tr><td class="code"><pre><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">br</span>&gt;</span></span></span><br><span class="line"><span class="xml">  </span><span class="comment">&#123;# 访问统计 #&#125;</span></span><br><span class="line"><span class="xml">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"powered-by"</span> <span class="attr">style</span>=<span class="string">'color: gray'</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">i</span> <span class="attr">class</span>=<span class="string">"fa fa-user-md"</span>&gt;</span><span class="tag">&lt;/<span class="name">i</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">span</span> <span class="attr">id</span>=<span class="string">"busuanzi_container_site_uv"</span>&gt;</span></span></span><br><span class="line"><span class="xml">      本站总访客数:<span class="symbol">&amp;nbsp;</span><span class="tag">&lt;<span class="name">span</span> <span class="attr">id</span>=<span class="string">"busuanzi_value_site_uv"</span> <span class="attr">style</span>=<span class="string">'color: silver'</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="symbol">&amp;nbsp;</span>人<span class="symbol">&amp;nbsp;</span>| </span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;/<span class="name">span</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">i</span> <span class="attr">class</span>=<span class="string">"fa fa-eye"</span>&gt;</span><span class="tag">&lt;/<span class="name">i</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">span</span> <span class="attr">id</span>=<span class="string">"busuanzi_container_site_pv"</span>&gt;</span></span></span><br><span class="line"><span class="xml">        <span class="symbol">&amp;nbsp;</span>本站总访问量:<span class="symbol">&amp;nbsp;</span><span class="tag">&lt;<span class="name">span</span> <span class="attr">id</span>=<span class="string">"busuanzi_value_site_pv"</span> <span class="attr">style</span>=<span class="string">'color: silver'</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="symbol">&amp;nbsp;</span>次</span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;/<span class="name">span</span>&gt;</span></span></span><br><span class="line"><span class="xml">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">br</span>&gt;</span></span></span><br><span class="line"><span class="xml">  </span><span class="comment">&#123;# 建站时间 #&#125;</span></span><br><span class="line"><span class="xml">  <span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">span</span> <span class="attr">id</span>=<span class="string">"timeDate"</span> <span class="attr">class</span>=<span class="string">"color: lightblue;"</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span>  </span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">span</span> <span class="attr">id</span>=<span class="string">"times"</span> <span class="attr">class</span>=<span class="string">"color: lightgreen;"</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span></span><br><span class="line"><span class="xml">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">&#123;# 建站时间 #&#125;</span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span></span><br><span class="line"><span class="xml">  var now = new Date(); </span></span><br><span class="line"><span class="xml">  function createtime() &#123; </span></span><br><span class="line"><span class="xml">      var grt= new Date("02/12/2020 18:00:00"); </span></span><br><span class="line"><span class="xml">      now.setTime(now.getTime()+250); </span></span><br><span class="line"><span class="xml">      days = (now - grt ) / 1000 / 60 / 60 / 24; dnum = Math.floor(days); </span></span><br><span class="line"><span class="xml">      hours = (now - grt ) / 1000 / 60 / 60 - (24 * dnum); hnum = Math.floor(hours); </span></span><br><span class="line"><span class="xml">      if(String(hnum).length ==1 )&#123;hnum = "0" + hnum;&#125; minutes = (now - grt ) / 1000 /60 - (24 * 60 * dnum) - (60 * hnum); </span></span><br><span class="line"><span class="xml">      mnum = Math.floor(minutes); if(String(mnum).length ==1 )&#123;mnum = "0" + mnum;&#125; </span></span><br><span class="line"><span class="xml">      seconds = (now - grt ) / 1000 - (24 * 60 * 60 * dnum) - (60 * 60 * hnum) - (60 * mnum); </span></span><br><span class="line"><span class="xml">      snum = Math.round(seconds); if(String(snum).length ==1 )&#123;snum = "0" + snum;&#125; </span></span><br><span class="line"><span class="xml">      document.getElementById("timeDate").innerHTML = "本站已安全运行 "+dnum+" 天 "; </span></span><br><span class="line"><span class="xml">      document.getElementById("times").innerHTML = hnum + " 小时 " + mnum + " 分 " + snum + " 秒"; </span></span><br><span class="line"><span class="xml">  &#125; </span></span><br><span class="line"><span class="xml">  setInterval("createtime()",250);</span></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br></pre></td></tr></table></figure>

<h3 id="7-2-修改主题配置文件"><a href="#7-2-修改主题配置文件" class="headerlink" title="7.2.修改主题配置文件"></a>7.2.修改主题配置文件</h3><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">busuanzi_count:</span></span><br><span class="line">  <span class="comment"># count values only if the other configs are false</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line">  <span class="comment"># custom uv span for the whole site</span></span><br><span class="line">  <span class="attr">site_uv:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">site_uv_header:</span> <span class="string">&lt;i</span> <span class="string">class="fa</span> <span class="string">fa-user"&gt;&lt;/i&gt;</span></span><br><span class="line">  <span class="attr">site_uv_footer:</span></span><br><span class="line">  <span class="comment"># custom pv span for the whole site</span></span><br><span class="line">  <span class="attr">site_pv:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">site_pv_header:</span> <span class="string">&lt;i</span> <span class="string">class="fa</span> <span class="string">fa-eye"&gt;&lt;/i&gt;</span></span><br><span class="line">  <span class="attr">site_pv_footer:</span></span><br></pre></td></tr></table></figure>

<h2 id="8-流动线条和页面点击效果"><a href="#8-流动线条和页面点击效果" class="headerlink" title="8.流动线条和页面点击效果"></a>8.流动线条和页面点击效果</h2><h3 id="8-1-红心效果"><a href="#8-1-红心效果" class="headerlink" title="8.1.红心效果"></a>8.1.红心效果</h3><p>在 <code>themes\next\layout\_layout.swig</code> 文件中，末尾添加：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="actionscript">! <span class="function"><span class="keyword">function</span> <span class="params">(e, t, a)</span> </span>&#123;</span></span><br><span class="line"><span class="actionscript">  <span class="function"><span class="keyword">function</span> <span class="title">n</span><span class="params">()</span> </span>&#123;</span></span><br><span class="line"><span class="actionscript">    c(<span class="string">".heart&#123;width: 10px;height: 10px;position: fixed;background: #f00;transform: rotate(45deg);-webkit-transform: rotate(45deg);-moz-transform: rotate(45deg);&#125;.heart:after,.heart:before&#123;content: '';width: inherit;height: inherit;background: inherit;border-radius: 50%;-webkit-border-radius: 50%;-moz-border-radius: 50%;position: fixed;&#125;.heart:after&#123;top: -5px;&#125;.heart:before&#123;left: -5px;&#125;"</span>), o(), r()</span></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line"><span class="actionscript">  <span class="function"><span class="keyword">function</span> <span class="title">r</span><span class="params">()</span> </span>&#123;</span></span><br><span class="line"><span class="actionscript">    <span class="keyword">for</span> (<span class="keyword">var</span> e = <span class="number">0</span>; e &lt; d.length; e++) d[e].alpha &lt;= <span class="number">0</span> ? (t.body.removeChild(d[e].el), d.splice(e, <span class="number">1</span>)) : (d[e].y--, d[e].scale += <span class="number">.004</span>, d[e].alpha -= <span class="number">.013</span>, d[e].el.style.cssText = <span class="string">"left:"</span> + d[e].x + <span class="string">"px;top:"</span> + d[e].y + <span class="string">"px;opacity:"</span> + d[e].alpha + <span class="string">";transform:scale("</span> + d[e].scale + <span class="string">","</span> + d[e].scale + <span class="string">") rotate(45deg);background:"</span> + d[e].color + <span class="string">";z-index:99999"</span>);</span></span><br><span class="line">    requestAnimationFrame(r)</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line"><span class="actionscript">  <span class="function"><span class="keyword">function</span> <span class="title">o</span><span class="params">()</span> </span>&#123;</span></span><br><span class="line"><span class="actionscript">    <span class="keyword">var</span> t = <span class="string">"function"</span> == <span class="keyword">typeof</span> e.onclick &amp;&amp; e.onclick;</span></span><br><span class="line"><span class="actionscript">    e.onclick = <span class="function"><span class="keyword">function</span> <span class="params">(e)</span> </span>&#123;</span></span><br><span class="line">      t &amp;&amp; t(), i(e)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line"><span class="actionscript">  <span class="function"><span class="keyword">function</span> <span class="title">i</span><span class="params">(e)</span> </span>&#123;</span></span><br><span class="line"><span class="actionscript">    <span class="keyword">var</span> a = t.createElement(<span class="string">"div"</span>);</span></span><br><span class="line"><span class="actionscript">    a.className = <span class="string">"heart"</span>, d.push(&#123;</span></span><br><span class="line">      el: a,</span><br><span class="line">      x: e.clientX - 5,</span><br><span class="line">      y: e.clientY - 5,</span><br><span class="line">      scale: 1,</span><br><span class="line">      alpha: 1,</span><br><span class="line">      color: s()</span><br><span class="line">    &#125;), t.body.appendChild(a)</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line"><span class="actionscript">  <span class="function"><span class="keyword">function</span> <span class="title">c</span><span class="params">(e)</span> </span>&#123;</span></span><br><span class="line"><span class="actionscript">    <span class="keyword">var</span> a = t.createElement(<span class="string">"style"</span>);</span></span><br><span class="line"><span class="actionscript">    a.type = <span class="string">"text/css"</span>;</span></span><br><span class="line"><span class="actionscript">    <span class="keyword">try</span> &#123;</span></span><br><span class="line">      a.appendChild(t.createTextNode(e))</span><br><span class="line"><span class="actionscript">    &#125; <span class="keyword">catch</span> (t) &#123;</span></span><br><span class="line">      a.styleSheet.cssText = e</span><br><span class="line">    &#125;</span><br><span class="line"><span class="actionscript">    t.getElementsByTagName(<span class="string">"head"</span>)[<span class="number">0</span>].appendChild(a)</span></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line"><span class="actionscript">  <span class="function"><span class="keyword">function</span> <span class="title">s</span><span class="params">()</span> </span>&#123;</span></span><br><span class="line"><span class="javascript">    <span class="keyword">return</span> <span class="string">"rgb("</span> + ~~(<span class="number">255</span> * <span class="built_in">Math</span>.random()) + <span class="string">","</span> + ~~(<span class="number">255</span> * <span class="built_in">Math</span>.random()) + <span class="string">","</span> + ~~(<span class="number">255</span> * <span class="built_in">Math</span>.random()) + <span class="string">")"</span></span></span><br><span class="line">  &#125;</span><br><span class="line"><span class="actionscript">  <span class="keyword">var</span> d = [];</span></span><br><span class="line"><span class="actionscript">  e.requestAnimationFrame = <span class="function"><span class="keyword">function</span> <span class="params">()</span> </span>&#123;</span></span><br><span class="line"><span class="actionscript">    <span class="keyword">return</span> e.requestAnimationFrame || e.webkitRequestAnimationFrame || e.mozRequestAnimationFrame || e.oRequestAnimationFrame || e.msRequestAnimationFrame || <span class="function"><span class="keyword">function</span> <span class="params">(e)</span> </span>&#123;</span></span><br><span class="line">      setTimeout(e, 1e3 / 60)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;(), n()</span><br><span class="line"><span class="javascript">&#125;(<span class="built_in">window</span>, <span class="built_in">document</span>);</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="8-2-流动线条"><a href="#8-2-流动线条" class="headerlink" title="8.2.流动线条"></a>8.2.流动线条</h3><p>在主题配置文件中，修改：</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 动态线条效果，会向鼠标集中</span></span><br><span class="line"><span class="attr">canvas_nest:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">color:</span> <span class="string">'0,0,255'</span>        <span class="comment"># color of lines, default: '0,0,0'; RGB values: (R,G,B).(<span class="doctag">note:</span> use ',' to separate.)</span></span><br><span class="line">  <span class="attr">pointColor:</span> <span class="string">'249, 72, 137'</span>     <span class="comment"># color of points, default: '0,0,0'; RGB values: (R,G,B).(<span class="doctag">note:</span> use ',' to separate.)</span></span><br><span class="line">  <span class="attr">opacity:</span> <span class="string">'0.8'</span>               <span class="comment"># the opacity of line (0~1), default: 0.5.</span></span><br><span class="line">  <span class="attr">count:</span> <span class="string">'99'</span>                  <span class="comment"># the number of lines, default: 99.</span></span><br><span class="line">  <span class="attr">zIndex:</span> <span class="string">'-2'</span>                 <span class="comment"># z-index property of the background, default: -1. 底层</span></span><br></pre></td></tr></table></figure>

<p>在文件 <code>themes\next\layout\_scripts\vendors.swig</code> 中添加：</p>
<figure class="highlight twig"><table><tr><td class="code"><pre><span class="line"><span class="comment">&#123;# 动态线条效果 #&#125;</span></span><br><span class="line"><span class="template-tag">&#123;% <span class="name"><span class="keyword">if</span></span> theme.canvas_nest &amp;&amp; theme.canvas_nest.enable  %&#125;</span></span><br><span class="line"><span class="xml">  </span><span class="template-tag">&#123;% <span class="name"><span class="keyword">set</span></span> js_vendors.canvas_nest  = 'canvas-nest/canvas-nest.<span class="name">min</span>.js' %&#125;</span></span><br><span class="line"><span class="xml">  <span class="tag">&lt;<span class="name">script</span> </span></span></span><br><span class="line"><span class="xml">    type="text/javascript" </span></span><br><span class="line"><span class="xml">    color="</span><span class="template-variable">&#123;&#123; theme.canvas_nest.color &#125;&#125;</span><span class="xml">" </span></span><br><span class="line"><span class="xml">    opacity="</span><span class="template-variable">&#123;&#123; theme.canvas_nest.opacity &#125;&#125;</span><span class="xml">" </span></span><br><span class="line"><span class="xml">    zIndex="</span><span class="template-variable">&#123;&#123; theme.canvas_nest.zIndex &#125;&#125;</span><span class="xml">" </span></span><br><span class="line"><span class="xml">    count="</span><span class="template-variable">&#123;&#123; theme.canvas_nest.count &#125;&#125;</span><span class="xml">" </span></span><br><span class="line"><span class="xml">    src="//cdn.bootcss.com/canvas-nest.js/1.0.0/canvas-nest.min.js" &gt;</span></span><br><span class="line"><span class="xml">  <span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br><span class="line"><span class="template-tag">&#123;% <span class="name"><span class="keyword">endif</span></span> %&#125;</span></span><br></pre></td></tr></table></figure>


<h2 id="9-添加-utterance-评论系统"><a href="#9-添加-utterance-评论系统" class="headerlink" title="9.添加 utterance 评论系统"></a>9.添加 <code>utterance</code> 评论系统</h2><blockquote>
<p>Next 主题集成了常用的几种评论系统，这里只提一下 <code>utterance</code>，用来替代 <code>gitment</code>、<code>gitalk</code> 的最佳选择。</p>
</blockquote>
<h3 id="9-1-安装utteranc插件"><a href="#9-1-安装utteranc插件" class="headerlink" title="9.1.安装utteranc插件"></a>9.1.安装utteranc插件</h3><ul>
<li><code>git bash</code> 或 <code>Dos</code> 窗口下，运行：</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm install --save github:theme-next/hexo-next-utteranc</span><br></pre></td></tr></table></figure>

<ul>
<li>在主题配置文件中，添加：</li>
</ul>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">utteranc:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">repo:</span> <span class="string">''</span>     <span class="comment">#Github repo such as :blog/utterance_repo</span></span><br><span class="line">  <span class="attr">pathname:</span> <span class="string">pathname</span></span><br><span class="line">  <span class="comment"># theme: github-light,github-dark,github-dark-orange</span></span><br><span class="line">  <span class="attr">theme:</span> <span class="string">github-light</span></span><br><span class="line">  <span class="attr">cdn:</span> <span class="string">https://utteranc.es/client.js</span></span><br></pre></td></tr></table></figure>

<blockquote>
<p>针对新版本，可以作如下修改：</p>
</blockquote>
<h3 id="9-2-自定义添加"><a href="#9-2-自定义添加" class="headerlink" title="9.2.自定义添加"></a>9.2.自定义添加</h3><ul>
<li>配置文件，添加：</li>
</ul>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">utterance:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">repo:</span> <span class="string">''</span>     <span class="comment">#仓库名字,格式：你的用户ID/仓库名称，如：blog/utterance_repo</span></span><br><span class="line">  <span class="attr">issue_term:</span> <span class="string">'title'</span>            <span class="comment">#映射配置</span></span><br><span class="line">  <span class="attr">theme:</span> <span class="string">'github-light'</span>          <span class="comment">#主题</span></span><br></pre></td></tr></table></figure>

<ul>
<li>新建 <code>utterance.swig</code> 文件</li>
</ul>
<p>在路径 <code>themes\next\layout\_third-party\comments\</code> 下，新建 <code>utterance.swig</code> 文件，添加内容：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;script type&#x3D;&quot;text&#x2F;javascript&quot;&gt;</span><br><span class="line">  (function() &#123;</span><br><span class="line">    &#x2F;&#x2F; 匿名函数，防止污染全局变量</span><br><span class="line">    var utterances &#x3D; document.createElement(&#39;script&#39;);</span><br><span class="line">    utterances.type &#x3D; &#39;text&#x2F;javascript&#39;;</span><br><span class="line">    utterances.async &#x3D; true;</span><br><span class="line">    utterances.setAttribute(&#39;issue-term&#39;,&#39;&#123;&#123; theme.utterance.issue_term &#125;&#125;&#39;)</span><br><span class="line">    utterances.setAttribute(&#39;theme&#39;,&#39;&#123;&#123; theme.utterance.theme &#125;&#125;&#39;)</span><br><span class="line">    utterances.setAttribute(&#39;repo&#39;,&#39;&#123;&#123; theme.utterance.repo &#125;&#125;&#39;)</span><br><span class="line">    utterances.crossorigin &#x3D; &#39;anonymous&#39;;</span><br><span class="line">    utterances.src &#x3D; &#39;https:&#x2F;&#x2F;utteranc.es&#x2F;client.js&#39;;</span><br><span class="line">    &#x2F;&#x2F; content 是要插入评论的地方</span><br><span class="line">    document.getElementById(&#39;utterance-container&#39;).appendChild(utterances);</span><br><span class="line">  &#125;)();</span><br><span class="line">&lt;&#x2F;script&gt;</span><br></pre></td></tr></table></figure>

<ul>
<li>新建 <code>utterance.js</code> 文件</li>
</ul>
<p>在路径 <code>themes\next\scripts\filters\comment\</code> 下，新建 <code>utterance.js</code> 文件，添加内容：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* global hexo */</span></span><br><span class="line"></span><br><span class="line"><span class="meta">'use strict'</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> path = <span class="built_in">require</span>(<span class="string">'path'</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// Add comment</span></span><br><span class="line">hexo.extend.filter.register(<span class="string">'theme_inject'</span>, injects =&gt; &#123;</span><br><span class="line">  <span class="keyword">let</span> theme = hexo.theme.config;</span><br><span class="line">  <span class="keyword">if</span> (!theme.utterance || !theme.utterance.enable) <span class="keyword">return</span>;</span><br><span class="line"></span><br><span class="line">  injects.comment.raw(<span class="string">'utterance'</span>, <span class="string">'&lt;div class="comments" id="utterance-container"&gt;&lt;/div&gt;'</span>, &#123;&#125;, &#123;<span class="attr">cache</span>: <span class="literal">true</span>&#125;);</span><br><span class="line"></span><br><span class="line">  injects.bodyEnd.file(<span class="string">'utterance'</span>, path.join(hexo.theme_dir, <span class="string">'layout/_third-party/comments/utterance.swig'</span>));</span><br><span class="line"></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<h2 id="10-静态资源压缩"><a href="#10-静态资源压缩" class="headerlink" title="10.静态资源压缩"></a>10.静态资源压缩</h2><h3 id="10-1-hexo-neat-压缩"><a href="#10-1-hexo-neat-压缩" class="headerlink" title="10.1.hexo-neat 压缩"></a>10.1.<code>hexo-neat</code> 压缩</h3><ul>
<li>安装</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm install hexo-neat --save-dev</span><br></pre></td></tr></table></figure>

<ul>
<li>在站点目录下的_config.yml的末尾，添加配置信息:</li>
</ul>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># hexo-neat</span></span><br><span class="line"><span class="comment"># 博文压缩</span></span><br><span class="line"><span class="attr">neat_enable:</span> <span class="literal">true</span></span><br><span class="line"><span class="comment"># 压缩html</span></span><br><span class="line"><span class="attr">neat_html:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">exclude:</span>  <span class="comment">#排除的文件</span></span><br><span class="line">  </span><br><span class="line"><span class="comment"># 压缩css  跳过min.css</span></span><br><span class="line"><span class="attr">neat_css:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">exclude:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">'**/*.min.css'</span></span><br><span class="line">    </span><br><span class="line"><span class="comment"># 压缩js 跳过min.js</span></span><br><span class="line"><span class="attr">neat_js:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">mangle:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">output:</span></span><br><span class="line">  <span class="attr">compress:</span></span><br><span class="line">  <span class="attr">exclude:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">'**/*.min.js'</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">'**/jquery.fancybox.pack.js'</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">'**/index.js'</span>  </span><br><span class="line"><span class="comment"># 压缩博文配置结束</span></span><br><span class="line"><span class="comment"># 注意上面的路径 **/* ,需要自己去配置正确的路径。，不然生成的是空白页面，当然你也可以删掉，全部压缩。</span></span><br></pre></td></tr></table></figure>

<h3 id="10-2-gulp-压缩"><a href="#10-2-gulp-压缩" class="headerlink" title="10.2.gulp 压缩"></a>10.2.<code>gulp</code> 压缩</h3><ul>
<li>安装</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm install gulp -g</span><br><span class="line"><span class="comment"># or</span></span><br><span class="line">npm install gulp-cli -g</span><br><span class="line"></span><br><span class="line">npm install gulp-minify-css gulp-uglify gulp-htmlmin gulp-htmlclean gulp --save</span><br></pre></td></tr></table></figure>

<ul>
<li>博客根目录下新建 <code>gulpfile.js</code> ，并添加内容：</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> gulp = <span class="built_in">require</span>(<span class="string">'gulp'</span>);</span><br><span class="line"><span class="keyword">var</span> minifycss = <span class="built_in">require</span>(<span class="string">'gulp-minify-css'</span>);</span><br><span class="line"><span class="keyword">var</span> uglify = <span class="built_in">require</span>(<span class="string">'gulp-uglify'</span>);</span><br><span class="line"><span class="keyword">var</span> htmlmin = <span class="built_in">require</span>(<span class="string">'gulp-htmlmin'</span>);</span><br><span class="line"><span class="keyword">var</span> htmlclean = <span class="built_in">require</span>(<span class="string">'gulp-htmlclean'</span>);</span><br><span class="line"><span class="keyword">var</span> imagemin = <span class="built_in">require</span>(<span class="string">'gulp-imagemin'</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 压缩html</span></span><br><span class="line">gulp.task(<span class="string">'minify-html'</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> gulp.src(<span class="string">'./public/**/*.html'</span>)</span><br><span class="line">    .pipe(htmlclean())</span><br><span class="line">    .pipe(htmlmin(&#123;</span><br><span class="line">      collapseWhitespace: <span class="literal">true</span>, <span class="comment">//从字面意思应该可以看出来，清除空格，压缩html，这一条比较重要，作用比较大，引起的改变压缩量也特别大</span></span><br><span class="line">      collapseBooleanAttributes: <span class="literal">true</span>, <span class="comment">//省略布尔属性的值，比如：&lt;input checked="checked"/&gt;,那么设置这个属性后，就会变成 &lt;input checked/&gt;</span></span><br><span class="line">      removeComments: <span class="literal">true</span>, <span class="comment">//清除html中注释的部分</span></span><br><span class="line">      removeEmptyAttributes: <span class="literal">true</span>, <span class="comment">//清除所有的空属性</span></span><br><span class="line">      removeScriptTypeAttributes: <span class="literal">true</span>, <span class="comment">//清除所有script标签中的type="text/javascript"属性。</span></span><br><span class="line">      removeStyleLinkTypeAttributes: <span class="literal">true</span>, <span class="comment">//清楚所有Link标签上的type属性。</span></span><br><span class="line">      minifyJS: <span class="literal">true</span>,</span><br><span class="line">      minifyCSS: <span class="literal">true</span>,</span><br><span class="line">      minifyURLs: <span class="literal">true</span>,</span><br><span class="line">    &#125;))</span><br><span class="line">    .pipe(gulp.dest(<span class="string">'./public'</span>));</span><br><span class="line">&#125;);</span><br><span class="line"><span class="comment">// 压缩css</span></span><br><span class="line">gulp.task(<span class="string">'minify-css'</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> gulp.src(<span class="string">'./public/**/*.css'</span>)</span><br><span class="line">    .pipe(minifycss(&#123;</span><br><span class="line">        compatibility: <span class="string">'ie8'</span></span><br><span class="line">    &#125;))</span><br><span class="line">    .pipe(gulp.dest(<span class="string">'./public'</span>));</span><br><span class="line">&#125;);</span><br><span class="line"><span class="comment">// 压缩js !代表排除的js,例如['!./public/js/**/*min.js']</span></span><br><span class="line">gulp.task(<span class="string">'minify-js'</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> gulp.src([<span class="string">'./public/js/**/.js'</span>])</span><br><span class="line">    .pipe(uglify()) <span class="comment">//压缩混淆</span></span><br><span class="line">    .pipe(gulp.dest(<span class="string">'./public'</span>));</span><br><span class="line">&#125;);</span><br><span class="line"><span class="comment">// 压缩图片</span></span><br><span class="line">gulp.task(<span class="string">'minify-images'</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> gulp.src(<span class="string">'./public/images/**/*.*'</span>)</span><br><span class="line">    .pipe(imagemin(</span><br><span class="line">    [imagemin.gifsicle(&#123;<span class="string">'optimizationLevel'</span>: <span class="number">3</span>&#125;),</span><br><span class="line">    imagemin.jpegtran(&#123;<span class="string">'progressive'</span>: <span class="literal">true</span>&#125;),</span><br><span class="line">    imagemin.optipng(&#123;<span class="string">'optimizationLevel'</span>: <span class="number">7</span>&#125;),</span><br><span class="line">    imagemin.svgo()],</span><br><span class="line">    &#123;<span class="string">'verbose'</span>: <span class="literal">true</span>&#125;))</span><br><span class="line">    .pipe(gulp.dest(<span class="string">'./public/images'</span>));</span><br><span class="line">&#125;);</span><br><span class="line"><span class="comment">// 默认任务</span></span><br><span class="line">gulp.task(<span class="string">'default'</span>,gulp.series(gulp.parallel(<span class="string">'minify-html'</span>,<span class="string">'minify-css'</span>,<span class="string">'minify-js'</span>,<span class="string">'minify-images'</span>)));</span><br></pre></td></tr></table></figure>
<blockquote>
<p>执行 <code>hexo g &amp;&amp; gulp</code> 就会根据 <code>gulpfile.js</code> 中的配置，对 <code>public</code> 目录中的静态资源文件进行压缩。</p>
</blockquote>
<blockquote>
<p>参考：<a href="https://segmentfault.com/a/1190000021486140" target="_blank" rel="noopener">静态资源压缩</a></p>
</blockquote>
<hr>
]]></content>
      <categories>
        <category>网站</category>
        <category>Hexo</category>
      </categories>
      <tags>
        <tag>基本配置</tag>
        <tag>next</tag>
      </tags>
  </entry>
  <entry>
    <title>Hexo搭建个人博客：yilia主题配置(二) - 背景图片</title>
    <url>/archives/4235.html</url>
    <content><![CDATA[<p>本文主要讲述 <code>Hexo-yilia</code> 主题中，关于背景和图片的相关配置。与前面一样，使用主题： <a href="https://github.com/JoeyBling/hexo-theme-yilia-plus" target="_blank" rel="noopener">hexo-theme-yilia-plus</a></p>
<a id="more"></a>

<h2 id="1-头像与网站图标"><a href="#1-头像与网站图标" class="headerlink" title="1.头像与网站图标"></a>1.头像与网站图标</h2><h3 id="1-1-添加头像和网站图标"><a href="#1-1-添加头像和网站图标" class="headerlink" title="1.1.添加头像和网站图标"></a>1.1.添加头像和网站图标</h3><p>打开主题配置文件 <code>_config.yml</code>, 添加：</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 网站图标</span></span><br><span class="line"><span class="attr">favicon:</span> <span class="string">/img/favicon.ico</span></span><br><span class="line"><span class="comment"># 你的头像url</span></span><br><span class="line"><span class="attr">avatar:</span> <span class="string">/images/avatar.jpg</span></span><br></pre></td></tr></table></figure>
<p><strong>头像地址可以分两种</strong>：</p>
<ul>
<li>本地<ul>
<li>根目录中的 <code>source</code> 目录：可以在 <code>source</code> 目录下建立 <code>images</code> 文件夹，存放图片</li>
<li>主题目录的 <code>source</code> 目录：建立 <code>img</code> 文件夹，存放图片</li>
</ul>
</li>
<li>网络<ul>
<li>配置后写链接地址</li>
</ul>
</li>
</ul>
<h3 id="1-2-头像旋转"><a href="#1-2-头像旋转" class="headerlink" title="1.2.头像旋转"></a>1.2.头像旋转</h3><p>修改 <code>yilia-plus\source\main.b8fa34.css</code> 文件 (原ylia主题是 <code>main.0cf68a.css</code> 文件)<br>文本编辑器 <code>Ctrl+F</code> , 搜索 <code>.left-col #header .profilepic img</code> ,修改为：</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.left-col</span> <span class="selector-id">#header</span> <span class="selector-class">.profilepic</span> <span class="selector-tag">img</span> &#123;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">100%</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">100%</span>;</span><br><span class="line">    <span class="attribute">background</span>: <span class="number">#88acdb</span>;</span><br><span class="line">    <span class="attribute">border-radius</span>: <span class="number">50%</span>;</span><br><span class="line">    <span class="attribute">border</span>: <span class="number">0</span>;</span><br><span class="line">    <span class="attribute">-webkit-transition</span>: -webkit-transform <span class="number">1s</span> ease-out;</span><br><span class="line">    <span class="attribute">-moz-transition</span>: -moz-transform <span class="number">1s</span> ease-out;</span><br><span class="line">    <span class="attribute">-o-transition</span>: -o-transform <span class="number">1s</span> ease-out;</span><br><span class="line">    <span class="attribute">-ms-transition</span>: -ms-transform <span class="number">1s</span> ease-out</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.left-col</span> <span class="selector-id">#header</span> <span class="selector-class">.profilepic</span> <span class="selector-tag">img</span><span class="selector-class">.show</span> &#123;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">100%</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">100%</span>;</span><br><span class="line">    <span class="attribute">opacity</span>: <span class="number">1</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.left-col</span> <span class="selector-id">#header</span> <span class="selector-class">.profilepic</span> <span class="selector-tag">img</span><span class="selector-pseudo">:hover</span> &#123;</span><br><span class="line">    <span class="attribute">transform</span>: <span class="built_in">rotate</span>(<span class="number">1turn</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="2-左侧边栏配置"><a href="#2-左侧边栏配置" class="headerlink" title="2.左侧边栏配置"></a>2.左侧边栏配置</h2><blockquote>
<p>同上，可以在css文件中设置，这里 <code>yilia-plus</code> 做了灵活的配置。</p>
</blockquote>
<h3 id="2-1-头像上方动图"><a href="#2-1-头像上方动图" class="headerlink" title="2.1.头像上方动图"></a>2.1.头像上方动图</h3><ul>
<li>打开主题配置文件 <code>themes\yilia-plus\_config.yml</code>，找到 <code>style</code> 配置项，作如下修改：</li>
</ul>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">style:</span></span><br><span class="line"><span class="comment"># 左侧头像板块动态图效果</span></span><br><span class="line">  <span class="attr">gif:</span></span><br><span class="line">    <span class="comment"># 是否启用</span></span><br><span class="line">    <span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line">    <span class="comment"># 自定义背景图路径(默认可以不设置，提供默认背景图biubiubiu.gif)</span></span><br><span class="line">    <span class="attr">path:</span> <span class="string">这里是gif图片地址</span></span><br></pre></td></tr></table></figure>

<ul>
<li>打开left-col.ejs文件，修改配置：</li>
</ul>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">%</span> <span class="attr">var</span> <span class="attr">defaultBg</span> = <span class="string">'#4d4d4d'</span>; %&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">%</span> <span class="attr">var</span> <span class="attr">defaultBgImg</span> = <span class="string">'/img/biubiubiu.gif'</span>; %&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">%</span> <span class="attr">var</span> <span class="attr">overlayBgImg</span>= <span class="string">theme.style.gif</span> &amp;&amp; <span class="attr">theme.style.gif.enable</span> &amp;&amp; <span class="attr">theme.style.gif.path</span> ? <span class="attr">theme.style.gif.path</span> <span class="attr">:</span> <span class="attr">defaultBgImg</span>; %&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"overlay"</span> <span class="attr">style</span>=<span class="string">"background: &lt;%= theme.style &amp;&amp; theme.style.header ? theme.style.header : defaultBg %&gt;;&lt;% if (theme.style.gif &amp;&amp; theme.style.gif.enable)&#123; %&gt;background: url('&lt;%- url_for(overlayBgImg) %&gt;') no-repeat ;&lt;%&#125;%&gt; z-index:-1"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="2-2-左侧边栏背景"><a href="#2-2-左侧边栏背景" class="headerlink" title="2.2.左侧边栏背景"></a>2.2.左侧边栏背景</h3><ul>
<li>打开主题配置文件 <code>themes\yilia-plus\_config.yml</code>，找到 <code>style</code> 配置项，作如下修改：</li>
</ul>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">style:</span></span><br><span class="line">  <span class="comment"># 头像上面的背景颜色 e.g. linear-gradient(rgba(255, 255, 255, 0.5), rgba(255, 255, 255, 0.5))</span></span><br><span class="line">  <span class="comment"># header: '#D3D1DC'</span></span><br><span class="line">  <span class="attr">header:</span> <span class="string">'rgba(0,0,0,0.5)'</span> <span class="comment">#设置背景透明度，不然头像上方是默认色</span></span><br><span class="line">  <span class="comment">#左侧头像板块的背景颜色(IE兼容设置：filter:alpha(opacity=80);)</span></span><br><span class="line">  <span class="attr">left_ground:</span> </span><br><span class="line">    <span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line">    <span class="attr">default:</span> <span class="string">'rgba(0,0,0,0.5)'</span></span><br><span class="line">    <span class="attr">url:</span> <span class="string">'url(这里是图片链接) no-repeat 100%;background-size:cover;opacity:0.8;filter:alpha(opacity=80);'</span></span><br></pre></td></tr></table></figure>
<ul>
<li>打开布局文件 <code>themes\yilia-plus\layout\layout.ejs</code>，找到 <code>&lt;div class=&quot;left-col&quot; ... &lt;/div&gt;</code> ，改成:</li>
</ul>
<figure class="highlight cs"><table><tr><td class="code"><pre><span class="line">&lt;div <span class="keyword">class</span>=<span class="string">"left-col"</span> q-<span class="keyword">class</span>=<span class="string">"show:isShow"</span>  style=<span class="string">"background: &lt;%= theme.style &amp;&amp; theme.style.left_ground.enable &amp;&amp; theme.style.left_ground.url ? theme.style.left_ground.url : theme.style.left_ground.default %&gt;"</span>&gt;</span><br><span class="line">      &lt;%- <span class="keyword">partial</span>(<span class="string">'_partial/left-col'</span>, <span class="literal">null</span>, &#123;cache: !config.relative_link&#125;) %&gt;</span><br><span class="line">    &lt;/div&gt;</span><br></pre></td></tr></table></figure>

<ul>
<li>打开样式文件 <code>yilia-plus\source\main.b8fa34.css</code>，搜索 <code>.left-col</code> ，修改背景颜色如下：</li>
</ul>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.left-col</span> &#123;</span><br><span class="line">    <span class="comment">/*background: #fff;*/</span></span><br><span class="line">    <span class="attribute">background-color</span>: <span class="built_in">linear-gradient</span>(rgba(<span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">0.5</span>), <span class="built_in">rgba</span>(<span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">0.5</span>));</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">300px</span>;</span><br><span class="line">    <span class="attribute">position</span>: fixed;</span><br><span class="line">    <span class="attribute">opacity</span>: <span class="number">1</span>;</span><br><span class="line">    <span class="attribute">transition</span>: all .<span class="number">2s</span> ease-in;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">100%</span>;</span><br><span class="line">    <span class="attribute">z-index</span>: <span class="number">999</span>;</span><br><span class="line">    <span class="attribute">overflow</span>: hidden;</span><br><span class="line">    <span class="attribute">overflow-y</span>: auto;</span><br><span class="line">    <span class="attribute">margin-bottom</span>: <span class="number">15px</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="2-3-右滑板块背景"><a href="#2-3-右滑板块背景" class="headerlink" title="2.3.右滑板块背景"></a>2.3.右滑板块背景</h3><p>打开主题配置文件 <code>themes\yilia-plus\_config.yml</code>，找到 <code>style</code> 配置项修改 <code>slider</code>：</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">style:</span></span><br><span class="line">  <span class="comment"># 右滑板块背景</span></span><br><span class="line">  <span class="attr">slider:</span> <span class="string">'linear-gradient(200deg,#ccc,#000)'</span></span><br></pre></td></tr></table></figure>
<p>可以根据自己喜好调整</p>
<h3 id="2-4-背景音乐插件"><a href="#2-4-背景音乐插件" class="headerlink" title="2.4.背景音乐插件"></a>2.4.背景音乐插件</h3><blockquote>
<p>插入音乐视频前，先安装插件：</p>
</blockquote>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm install hexo-tag-dplayer --save</span><br><span class="line">npm install hexo-tag-aplayer --save</span><br></pre></td></tr></table></figure>

<ul>
<li><p>这里用<a href="https://music.163.com/" target="_blank" rel="noopener">网易云</a>插件，打开一首歌，下方有 <code>生成外链</code> 提示，如：</p>
<div align="center">
  <img src="/images/wangyiyun/changyemanman-20-02-20.png" width="400px">
</div>
</li>
<li><p>点击该链接，然后复制生成的HTML代码，配置时用。：</p>
</li>
</ul>
<div align="center">
    <img src="/images/wangyiyun/changyemanman-link-20-02-20.png" width="450px">
</div>

<ul>
<li>在主题配置文件 <code>_config.yml</code> 找到</li>
</ul>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 网易云音乐插件</span></span><br><span class="line"><span class="attr">music:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line">  <span class="comment"># 播放器尺寸类型(1：短尺寸、2：长尺寸)</span></span><br><span class="line">  <span class="attr">type:</span> <span class="number">2</span></span><br><span class="line">  <span class="attr">id:</span> <span class="number">411907505</span>  <span class="comment"># 网易云分享的音乐ID(更换音乐请更改此配置项)</span></span><br><span class="line">  <span class="attr">autoPlay:</span> <span class="literal">true</span>  <span class="comment"># 是否开启自动播放</span></span><br><span class="line">  <span class="comment"># 提示文本(关闭请设置为false)</span></span><br><span class="line">  <span class="attr">text:</span> <span class="string">'写一段说明文字'</span></span><br></pre></td></tr></table></figure>

<ul>
<li>在left-col.ejs文件中，添加配置：</li>
</ul>
<figure class="highlight erb"><table><tr><td class="code"><pre><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">%</span></span></span><span class="ruby"> <span class="keyword">if</span> (theme.music &amp;&amp; theme.music.enable)&#123; </span><span class="xml"><span class="tag">%&gt;</span></span></span><br><span class="line"><span class="xml">            </span><span class="comment">&lt;%# "网易云音乐插件" %&gt;</span></span><br><span class="line"><span class="xml">            </span><span class="comment">&lt;%# "bottom:120px; left:auto;position:absolute;  width:85%" %&gt;</span></span><br><span class="line"><span class="xml">            <span class="tag">&lt;<span class="name">%</span></span></span><span class="ruby"> var defaultHeight = theme.music.type == <span class="number">1</span> ? <span class="string">'32'</span> : <span class="string">'66'</span>; </span><span class="xml"><span class="tag">%&gt;</span></span></span><br><span class="line"><span class="xml">            <span class="tag">&lt;<span class="name">%</span></span></span><span class="ruby"> var defaultIframeHeight = theme.music.type == <span class="number">1</span> ? <span class="string">'52'</span> : <span class="string">'86'</span>; </span><span class="xml"><span class="tag">%&gt;</span></span></span><br><span class="line"><span class="xml">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">style</span>=<span class="string">"margin-right:10px;margin-left:0; padding:5px 0"</span>&gt;</span></span></span><br><span class="line"><span class="xml">                <span class="tag">&lt;<span class="name">iframe</span> <span class="attr">frameborder</span>=<span class="string">"no"</span> <span class="attr">border</span>=<span class="string">"0"</span> <span class="attr">marginwidth</span>=<span class="string">"0"</span> <span class="attr">marginheight</span>=<span class="string">"0"</span> <span class="attr">width</span>=<span class="string">"250"</span> <span class="attr">height</span>=<span class="string">"&lt;%=</span></span></span><span class="ruby">defaultIframeHeight</span><span class="xml"><span class="tag"><span class="string">%&gt;"</span> <span class="attr">src</span>=<span class="string">"//music.163.com/outchain/player?type=2&amp;id=&lt;%=</span></span></span><span class="ruby">theme.music.id<span class="params">||</span><span class="number">411907505</span></span><span class="xml"><span class="tag"><span class="string">%&gt;&amp;auto=&lt;%=</span></span></span><span class="ruby">theme.music.autoPlay?<span class="number">1</span><span class="symbol">:</span><span class="number">0</span></span><span class="xml"><span class="tag"><span class="string">%&gt;&amp;height=&lt;%=</span></span></span><span class="ruby">defaultHeight</span><span class="xml"><span class="tag"><span class="string">%&gt;"</span>&gt;</span><span class="tag">&lt;/<span class="name">iframe</span>&gt;</span></span></span><br><span class="line"><span class="xml">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="xml">            <span class="tag">&lt;<span class="name">%</span></span></span><span class="ruby"> <span class="keyword">if</span> (theme.music.text <span class="params">||</span> theme.music.text == null)&#123; </span><span class="xml"><span class="tag">%&gt;</span></span></span><br><span class="line"><span class="xml">                <span class="tag">&lt;<span class="name">%</span></span></span><span class="ruby"> var musicText = ( theme.music.text == null <span class="params">||</span> theme.music.text == <span class="literal">true</span> ) ? <span class="string">"默认说明文字"</span> : theme.music.text; </span><span class="xml"><span class="tag">%&gt;</span></span></span><br><span class="line"><span class="xml">                <span class="tag">&lt;<span class="name">p</span> <span class="attr">style</span>=<span class="string">"font-size: 12px;"</span>&gt;</span><span class="tag">&lt;<span class="name">%-</span></span></span><span class="ruby">musicText</span><span class="xml"><span class="tag">%&gt;</span><span class="tag">&lt;<span class="name">p</span>&gt;</span></span></span><br><span class="line"><span class="xml">            <span class="tag">&lt;<span class="name">%</span></span></span><span class="ruby"> &#125; </span><span class="xml"><span class="tag">%&gt;</span></span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;<span class="name">%</span></span></span><span class="ruby"> &#125; </span><span class="xml"><span class="tag">%&gt;</span></span></span><br></pre></td></tr></table></figure>


<h2 id="3-右边正文背景"><a href="#3-右边正文背景" class="headerlink" title="3.右边正文背景"></a>3.右边正文背景</h2><ul>
<li>和左侧边栏修改类似，打开文件 <code>themes\yilia-plus\_config.yml</code>，找到 <code>style</code> 配置项，作如下修改：</li>
</ul>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">style:</span></span><br><span class="line">  <span class="comment"># 正文的背景颜色(IE兼容设置：opacity:0.8;filter:alpha(opacity=80);)</span></span><br><span class="line">  <span class="attr">article_ground:</span> </span><br><span class="line">    <span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line">    <span class="attr">default:</span> <span class="string">'rgba(25, 25, 25, 0)'</span>  <span class="comment">#设置背景透明度</span></span><br><span class="line">    <span class="attr">url:</span> <span class="string">'url(图片链接地址) no-repeat 100%;background-size:cover;opacity:0.7;filter:alpha(opacity=70);'</span></span><br></pre></td></tr></table></figure>

<ul>
<li>打开布局文件 <code>themes\yilia-plus\layout\layout.ejs</code>，找到 <code>&lt;div class=&quot;mid-col&quot; ... &gt;</code> ，修改:</li>
</ul>
<figure class="highlight cs"><table><tr><td class="code"><pre><span class="line">&lt;div <span class="keyword">class</span>=<span class="string">"mid-col"</span> q-<span class="keyword">class</span>=<span class="string">"show:isShow,hide:isShow|isFalse"</span> style=<span class="string">"background: &lt;%= theme.style &amp;&amp; theme.style.article_ground.enable &amp;&amp; theme.style.article_ground.url ? theme.style.article_ground.url : theme.style.article_ground.default %&gt;"</span>&gt;</span><br></pre></td></tr></table></figure>

<ul>
<li>如果想修改正文显示部分的样式，可以打开样式文件 <code>yilia-plus\source\main.b8fa34.css</code>，搜索 <code>.article</code>、<code>.article-inner</code> 、<code>.archives-wrap</code> 、 <code>.archives .archive-article-title</code> 等，修改字体、背景颜色：</li>
</ul>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.article</span> &#123;</span><br><span class="line">    <span class="attribute">margin</span>: <span class="number">30px</span>;</span><br><span class="line">    <span class="attribute">position</span>: relative;</span><br><span class="line">    <span class="attribute">border</span>: <span class="number">1px</span> solid <span class="number">#ddd</span>;</span><br><span class="line">    <span class="attribute">border-top</span>: <span class="number">1px</span> solid <span class="number">#fff</span>;</span><br><span class="line">    <span class="attribute">border-bottom</span>: <span class="number">1px</span> solid <span class="number">#fff</span>;</span><br><span class="line">    <span class="comment">/*background: #fff;*/</span></span><br><span class="line">    <span class="attribute">background</span>: <span class="built_in">rgba</span>(<span class="number">255</span>,<span class="number">255</span>,<span class="number">255</span>,.<span class="number">5</span>);</span><br><span class="line">    <span class="attribute">transition</span>: all .<span class="number">2s</span> ease-in;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*主页*/</span></span><br><span class="line"><span class="selector-class">.article-inner</span> &#123;</span><br><span class="line">    <span class="comment">/*border-color: #d1d1d1；*/</span></span><br><span class="line">    <span class="attribute">background-color</span>: <span class="built_in">rgba</span>(<span class="number">193</span>, <span class="number">194</span>, <span class="number">195</span>,<span class="number">0.6</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.left-col</span> &#123;</span><br><span class="line">    <span class="attribute">background-color</span>: <span class="built_in">linear-gradient</span>(rgba(<span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">0.5</span>), <span class="built_in">rgba</span>(<span class="number">255</span>, <span class="number">255</span>,<span class="number">255</span>, <span class="number">0.5</span>));</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">300px</span>;</span><br><span class="line">    <span class="attribute">position</span>: fixed;</span><br><span class="line">    <span class="attribute">opacity</span>: <span class="number">1</span>;</span><br><span class="line">    <span class="attribute">transition</span>: all .<span class="number">2s</span> ease-in;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">100%</span>;</span><br><span class="line">    <span class="attribute">z-index</span>: <span class="number">999</span>;</span><br><span class="line">    <span class="attribute">overflow</span>: hidden;</span><br><span class="line">    <span class="attribute">overflow-y</span>: auto;</span><br><span class="line">    <span class="attribute">margin-bottom</span>: <span class="number">15px</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*归档*/</span></span><br><span class="line"><span class="selector-class">.archives-wrap</span> &#123;</span><br><span class="line">    <span class="attribute">position</span>: relative;</span><br><span class="line">    <span class="attribute">margin</span>: <span class="number">0</span> <span class="number">30px</span>;</span><br><span class="line">    <span class="attribute">padding-right</span>: <span class="number">60px</span>;</span><br><span class="line">    <span class="attribute">border-bottom</span>: <span class="number">1px</span> solid <span class="number">#eee</span>;</span><br><span class="line">    <span class="comment">/*background: #fff;*/</span></span><br><span class="line">    <span class="attribute">background-color</span>: <span class="built_in">rgba</span>(<span class="number">236</span>, <span class="number">236</span>, <span class="number">236</span>,<span class="number">0.6</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*字体*/</span></span><br><span class="line"><span class="selector-class">.archives</span> <span class="selector-class">.archive-article-title</span> &#123;</span><br><span class="line">    <span class="attribute">font-size</span>: <span class="number">16px</span>;</span><br><span class="line">    <span class="attribute">font-weight</span>: bold;</span><br><span class="line">    <span class="comment">/*color: #333;*/</span></span><br><span class="line">    <span class="comment">/*transition: color .3s*/</span></span><br><span class="line">    <span class="attribute">background</span>: transparent;</span><br><span class="line">    <span class="attribute">text-decoration</span>: none;</span><br><span class="line">    <span class="attribute">color</span>: # af9;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="4-动态线条背景"><a href="#4-动态线条背景" class="headerlink" title="4.动态线条背景"></a>4.动态线条背景</h2><blockquote>
<p>安装插件: npm install –save canvas-nest.js，或直接显式配置</p>
</blockquote>
<ul>
<li>主题配置，在文件 <code>themes\yilia-plus\_config.yml</code> 中，添加：</li>
</ul>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 动态线条效果，会向鼠标集中</span></span><br><span class="line"><span class="attr">canvas_nest:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">color:</span> <span class="string">'206, 187, 95'</span></span><br><span class="line">  <span class="attr">pointColor:</span> <span class="string">'249, 72, 97'</span>     </span><br><span class="line">  <span class="attr">opacity:</span> <span class="string">'0.9'</span>             </span><br><span class="line">  <span class="attr">count:</span> <span class="string">'136'</span>     </span><br><span class="line">  <span class="attr">zIndex:</span> <span class="string">'-1'</span></span><br></pre></td></tr></table></figure>

<ul>
<li>找到文件 <code>themes\yilia-plus\layout\layout.ejs</code>，添加：</li>
</ul>
<figure class="highlight routeros"><table><tr><td class="code"><pre><span class="line">&lt;% <span class="keyword">if</span> (theme.canvas_nest)&#123; %&gt;</span><br><span class="line">&lt;script <span class="attribute">type</span>=<span class="string">"text/javascript"</span></span><br><span class="line"><span class="attribute">color</span>=<span class="string">"0,0,255"</span> <span class="attribute">opacity</span>=<span class="string">'0.9'</span> <span class="attribute">zIndex</span>=<span class="string">"-1"</span> <span class="attribute">count</span>=<span class="string">"300"</span> <span class="attribute">src</span>=<span class="string">"&lt;%- url_for('//cdn.bootcss.com/canvas-nest.js/1.0.0/canvas-nest.min.js') %&gt;"</span>&gt;&lt;/script&gt;</span><br><span class="line">&lt;% &#125; %&gt;</span><br></pre></td></tr></table></figure>


<h2 id="5-雪花特效"><a href="#5-雪花特效" class="headerlink" title="5.雪花特效"></a>5.雪花特效</h2><ul>
<li>在主题目录 <code>source/lib</code> 下新建 <code>snow.js</code> 文件，内容添加：</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> snow = &#123;</span><br><span class="line">  info: &#123;</span><br><span class="line">    top: <span class="number">0</span>,</span><br><span class="line">    left: <span class="number">0</span>,</span><br><span class="line">    zIndex: <span class="number">500</span>,</span><br><span class="line">    number: <span class="number">70</span></span><br><span class="line">  &#125;,</span><br><span class="line">  down: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> f = <span class="built_in">window</span>.innerWidth;</span><br><span class="line">    <span class="keyword">var</span> g = <span class="built_in">window</span>.innerHeight;</span><br><span class="line">    <span class="keyword">var</span> d = <span class="built_in">document</span>.createElement(<span class="string">"canvas"</span>);</span><br><span class="line">    d.style.position = <span class="string">"fixed"</span>;</span><br><span class="line">    d.style.pointerEvents = <span class="string">"none"</span>;</span><br><span class="line">    d.style.top = snow.info.top + <span class="string">"px"</span>;</span><br><span class="line">    d.style.left = snow.info.left + <span class="string">"px"</span>;</span><br><span class="line">    d.style.zIndex = snow.info.zIndex;</span><br><span class="line">    d.width = f;</span><br><span class="line">    d.height = g;</span><br><span class="line">    <span class="built_in">document</span>.body.appendChild(d);</span><br><span class="line">    <span class="keyword">var</span> c = [];</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> a = <span class="number">0</span>; a &lt; snow.info.number; a++) &#123;</span><br><span class="line">      c.push(&#123;</span><br><span class="line">        x: <span class="built_in">Math</span>.random() * f,</span><br><span class="line">        y: <span class="built_in">Math</span>.random() * g,</span><br><span class="line">        r: <span class="built_in">Math</span>.random() * <span class="number">4</span> + <span class="number">1</span>,</span><br><span class="line">        n: <span class="built_in">Math</span>.random() * <span class="number">70</span></span><br><span class="line">      &#125;)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">var</span> b = d.getContext(<span class="string">"2d"</span>);</span><br><span class="line">    <span class="keyword">var</span> e = <span class="number">0</span>;</span><br><span class="line">    setInterval(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">        b.clearRect(<span class="number">0</span>, <span class="number">0</span>, f, g);</span><br><span class="line">        b.fillStyle = <span class="string">"rgba(255, 255, 255, 0.6)"</span>;</span><br><span class="line">        b.shadowBlur = <span class="number">5</span>;</span><br><span class="line">        b.shadowColor = <span class="string">"rgba(255, 255, 255, 0.9)"</span>;</span><br><span class="line">        b.beginPath();</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">var</span> j = <span class="number">0</span>; j &lt; <span class="number">70</span>; j++) &#123;</span><br><span class="line">          <span class="keyword">var</span> h = c[j];</span><br><span class="line">          b.moveTo(h.x, h.y);</span><br><span class="line">          b.arc(h.x, h.y, h.r, <span class="number">0</span>, <span class="built_in">Math</span>.PI * <span class="number">2</span>, <span class="number">0</span>)</span><br><span class="line">        &#125;</span><br><span class="line">        b.fill();</span><br><span class="line">        e += <span class="number">0.01</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">var</span> j = <span class="number">0</span>; j &lt; <span class="number">70</span>; j++) &#123;</span><br><span class="line">          <span class="keyword">var</span> h = c[j];</span><br><span class="line">          h.y += <span class="built_in">Math</span>.cos(e + h.n) + h.r / <span class="number">2</span>;</span><br><span class="line">          h.x += <span class="built_in">Math</span>.sin(e) * <span class="number">2</span>;</span><br><span class="line">          <span class="keyword">if</span> (h.x &gt; f + <span class="number">5</span> || h.x &lt; <span class="number">-5</span> || h.y &gt; g) &#123;</span><br><span class="line">            c[j] = j % <span class="number">3</span> &gt; <span class="number">0</span> ? &#123;</span><br><span class="line">              x: <span class="built_in">Math</span>.random() * f,</span><br><span class="line">              y: <span class="number">-10</span>,</span><br><span class="line">              r: h.r,</span><br><span class="line">              n: h.n</span><br><span class="line">            &#125; : <span class="built_in">Math</span>.sin(e) &gt; <span class="number">0</span> ? &#123;</span><br><span class="line">              x: <span class="number">-5</span>,</span><br><span class="line">              y: <span class="built_in">Math</span>.random() * g,</span><br><span class="line">              r: h.r,</span><br><span class="line">              n: h.n</span><br><span class="line">            &#125; : &#123;</span><br><span class="line">              x: f + <span class="number">5</span>,</span><br><span class="line">              y: <span class="built_in">Math</span>.random() * g,</span><br><span class="line">              r: h.r,</span><br><span class="line">              n: h.n</span><br><span class="line">            &#125;</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;,</span><br><span class="line">      <span class="number">15</span>)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">// yilia-plus主题已经集成了，可以直接用</span></span><br></pre></td></tr></table></figure>

<ul>
<li>布局文件<code>layout.ejs</code>，添加：</li>
</ul>
<figure class="highlight erb"><table><tr><td class="code"><pre><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">%</span></span></span><span class="ruby"> <span class="keyword">if</span> (theme.snow)&#123; </span><span class="xml"><span class="tag">%&gt;</span></span></span><br><span class="line"><span class="xml">  <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span> <span class="attr">src</span>=<span class="string">"&lt;%-</span></span></span><span class="ruby"> url_for(<span class="string">'lib/snow.js'</span>) </span><span class="xml"><span class="tag"><span class="string">%&gt;"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br><span class="line"><span class="xml">  <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span> <span class="attr">src</span>=<span class="string">"&lt;%-</span></span></span><span class="ruby"> url_for(<span class="string">'lib/jquery-2.1.4.min.js'</span>) </span><span class="xml"><span class="tag"><span class="string">%&gt;"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br><span class="line"><span class="xml">  <span class="tag">&lt;<span class="name">script</span>&gt;</span></span></span><br><span class="line"><span class="xml">    snow.down();</span></span><br><span class="line"><span class="xml">    $(window).resize(function() &#123;</span></span><br><span class="line"><span class="xml">      $("canvas").css("z-index","500").remove();</span></span><br><span class="line"><span class="xml">      snow.down();</span></span><br><span class="line"><span class="xml">    &#125;);</span></span><br><span class="line"><span class="xml">  <span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br><span class="line"><span class="xml">  <span class="tag">&lt;<span class="name">%</span></span></span><span class="ruby"> &#125; </span><span class="xml"><span class="tag">%&gt;</span></span></span><br></pre></td></tr></table></figure>

<ul>
<li>最后更新一下主题配置文件 <code>_config.yml</code>:</li>
</ul>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 飘雪特效</span></span><br><span class="line"><span class="comment"># https://github.com/MlgmXyysd/snow.js</span></span><br><span class="line"><span class="attr">snow:</span> <span class="literal">true</span></span><br></pre></td></tr></table></figure>


<blockquote>
<p>可以参考这篇博客： <a href="https://yansheng836.github.io/article/cf9c6a5e.html#%E5%8A%A8%E6%80%81%E7%BA%BF%E6%9D%A1%E8%83%8C%E6%99%AF" target="_blank" rel="noopener">hexo多种特效配置</a></p>
</blockquote>
<hr>
]]></content>
      <categories>
        <category>网站</category>
        <category>Hexo</category>
      </categories>
      <tags>
        <tag>yilia</tag>
        <tag>背景图片</tag>
      </tags>
  </entry>
  <entry>
    <title>Hexo搭建个人博客：yilia主题配置(五) - 其他配置</title>
    <url>/archives/915cb590.html</url>
    <content><![CDATA[<p>本文主要讲述 <code>Hexo-yilia</code> 主题对于文章持久化及天气等插件的配置。</p>
<a id="more"></a>

<h2 id="1-持久化URL"><a href="#1-持久化URL" class="headerlink" title="1.持久化URL"></a>1.持久化URL</h2><ul>
<li>首先，安装插件：</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm install hexo-abbrlink --save</span><br></pre></td></tr></table></figure>

<ul>
<li>在根目录中打开 <code>_config.yml</code> 文件，找到 <code>permalink</code> 项，修改：</li>
</ul>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># permalink: :year/:month/:day/:title/  # 原代码, 分层较深</span></span><br><span class="line"><span class="attr">permalink:</span> <span class="string">archives/:abbrlink.html</span></span><br><span class="line"><span class="attr">permalink_defaults:</span></span><br><span class="line"><span class="attr">abbrlink:</span></span><br><span class="line">  <span class="attr">alg:</span> <span class="string">crc32</span>  <span class="comment"># 算法：crc16(default) and crc32</span></span><br><span class="line">  <span class="attr">rep:</span> <span class="string">hex</span>    <span class="comment"># 进制：dec(default) and hex</span></span><br></pre></td></tr></table></figure>

<ul>
<li>分类和标签预设</li>
</ul>
<p>中英文映射：</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># e.g.</span></span><br><span class="line"><span class="attr">category_map:</span></span><br><span class="line">  <span class="string">网站:</span> <span class="string">site</span></span><br><span class="line">  <span class="string">小程序:</span> <span class="string">miniprogram</span></span><br><span class="line">  <span class="string">开发工具:</span> <span class="string">tools</span></span><br><span class="line"><span class="attr">tag_map:</span></span><br><span class="line">  <span class="string">标签分类:</span> <span class="string">kinds</span></span><br><span class="line">  <span class="string">基础:</span> <span class="string">basic</span></span><br><span class="line">  <span class="string">Web框架:</span> <span class="string">web_frame</span></span><br><span class="line">  <span class="string">数据库操作:</span> <span class="string">sql_action</span></span><br><span class="line">  <span class="string">数据分析:</span> <span class="string">data_analysis</span></span><br><span class="line">  <span class="string">爬虫:</span> <span class="string">spider</span></span><br><span class="line">  <span class="string">自动化测试:</span> <span class="string">auto_test</span></span><br></pre></td></tr></table></figure>

<blockquote>
<p>参考：<a href="https://blog.csdn.net/weixin_41287260/article/details/103049779" target="_blank" rel="noopener">hexo持久化配置</a></p>
</blockquote>
<h2 id="2-文章图片的导入"><a href="#2-文章图片的导入" class="headerlink" title="2.文章图片的导入"></a>2.文章图片的导入</h2><blockquote>
<p>在hexo主题中，直接用markdown的语法：如 <img src="/archives/%E5%9B%BE%E7%89%87%E5%9C%B0%E5%9D%80" alt>，是不生效的</p>
</blockquote>
<h3 id="方式一：上传七牛云-入门详情"><a href="#方式一：上传七牛云-入门详情" class="headerlink" title="方式一：上传七牛云 入门详情"></a>方式一：上传七牛云 <a href="https://support.qiniu.com/tickets/new/" target="_blank" rel="noopener">入门详情</a></h3><p>使用： 获取七牛云图片链接</p>
<h3 id="方式二：使用插件："><a href="#方式二：使用插件：" class="headerlink" title="方式二：使用插件："></a>方式二：使用插件：</h3><ul>
<li>安装插件</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm install hexo-asset-image --save</span><br></pre></td></tr></table></figure>
<ul>
<li>打开文件 <code>node_modules/hexo-asset-image/index.js</code> ，替换内容为下面的代码：</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="meta">'use strict'</span>;</span><br><span class="line"><span class="keyword">var</span> cheerio = <span class="built_in">require</span>(<span class="string">'cheerio'</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// http://stackoverflow.com/questions/14480345/how-to-get-the-nth-occurrence-in-a-string</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getPosition</span>(<span class="params">str, m, i</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> str.split(m, i).join(m).length;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> version = <span class="built_in">String</span>(hexo.version).split(<span class="string">'.'</span>);</span><br><span class="line">hexo.extend.filter.register(<span class="string">'after_post_render'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">data</span>)</span>&#123;</span><br><span class="line">  <span class="keyword">var</span> config = hexo.config;</span><br><span class="line">  <span class="keyword">if</span>(config.post_asset_folder)&#123;</span><br><span class="line">        <span class="keyword">var</span> link = data.permalink;</span><br><span class="line">    <span class="keyword">if</span>(version.length &gt; <span class="number">0</span> &amp;&amp; <span class="built_in">Number</span>(version[<span class="number">0</span>]) == <span class="number">3</span>)</span><br><span class="line">       <span class="keyword">var</span> beginPos = getPosition(link, <span class="string">'/'</span>, <span class="number">1</span>) + <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">       <span class="keyword">var</span> beginPos = getPosition(link, <span class="string">'/'</span>, <span class="number">3</span>) + <span class="number">1</span>;</span><br><span class="line">    <span class="comment">// In hexo 3.1.1, the permalink of "about" page is like ".../about/index.html".</span></span><br><span class="line">    <span class="keyword">var</span> endPos = link.lastIndexOf(<span class="string">'/'</span>) + <span class="number">1</span>;</span><br><span class="line">    link = link.substring(beginPos, endPos);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> toprocess = [<span class="string">'excerpt'</span>, <span class="string">'more'</span>, <span class="string">'content'</span>];</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; toprocess.length; i++)&#123;</span><br><span class="line">      <span class="keyword">var</span> key = toprocess[i];</span><br><span class="line"> </span><br><span class="line">      <span class="keyword">var</span> $ = cheerio.load(data[key], &#123;</span><br><span class="line">        ignoreWhitespace: <span class="literal">false</span>,</span><br><span class="line">        xmlMode: <span class="literal">false</span>,</span><br><span class="line">        lowerCaseTags: <span class="literal">false</span>,</span><br><span class="line">        decodeEntities: <span class="literal">false</span></span><br><span class="line">      &#125;);</span><br><span class="line"></span><br><span class="line">      $(<span class="string">'img'</span>).each(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">if</span> ($(<span class="keyword">this</span>).attr(<span class="string">'src'</span>))&#123;</span><br><span class="line">            <span class="comment">// For windows style path, we replace '\' to '/'.</span></span><br><span class="line">            <span class="keyword">var</span> src = $(<span class="keyword">this</span>).attr(<span class="string">'src'</span>).replace(<span class="string">'\\'</span>, <span class="string">'/'</span>);</span><br><span class="line">            <span class="keyword">if</span>(!<span class="regexp">/http[s]*.*|\/\/.*/</span>.test(src) &amp;&amp;</span><br><span class="line">               !<span class="regexp">/^\s*\//</span>.test(src)) &#123;</span><br><span class="line">              <span class="comment">// For "about" page, the first part of "src" can't be removed.</span></span><br><span class="line">              <span class="comment">// In addition, to support multi-level local directory.</span></span><br><span class="line">              <span class="keyword">var</span> linkArray = link.split(<span class="string">'/'</span>).filter(<span class="function"><span class="keyword">function</span>(<span class="params">elem</span>)</span>&#123;</span><br><span class="line">                <span class="keyword">return</span> elem != <span class="string">''</span>;</span><br><span class="line">              &#125;);</span><br><span class="line">              <span class="keyword">var</span> srcArray = src.split(<span class="string">'/'</span>).filter(<span class="function"><span class="keyword">function</span>(<span class="params">elem</span>)</span>&#123;</span><br><span class="line">                <span class="keyword">return</span> elem != <span class="string">''</span> &amp;&amp; elem != <span class="string">'.'</span>;</span><br><span class="line">              &#125;);</span><br><span class="line">              <span class="keyword">if</span>(srcArray.length &gt; <span class="number">1</span>)</span><br><span class="line">                srcArray.shift();</span><br><span class="line">              src = srcArray.join(<span class="string">'/'</span>);</span><br><span class="line">              $(<span class="keyword">this</span>).attr(<span class="string">'src'</span>, config.root + link + src);</span><br><span class="line">              <span class="built_in">console</span>.info&amp;&amp;<span class="built_in">console</span>.info(<span class="string">"update link as:--&gt;"</span>+config.root + link + src);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="built_in">console</span>.info&amp;&amp;<span class="built_in">console</span>.info(<span class="string">"no src attr, skipped..."</span>);</span><br><span class="line">            <span class="built_in">console</span>.info&amp;&amp;<span class="built_in">console</span>.info($(<span class="keyword">this</span>));</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;);</span><br><span class="line">      data[key] = $.html();</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<ul>
<li>打开根目录配置文件 <code>_config.yml</code> ，修改如下：</li>
</ul>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 文章图片路径转换</span></span><br><span class="line"><span class="attr">post_asset_folder:</span> <span class="literal">true</span></span><br></pre></td></tr></table></figure>
<p>重新生成后，会在文章同级目录建立一个同名文件夹，可以存放图片。</p>
<ul>
<li>使用：</li>
</ul>
<figure class="highlight maxima"><table><tr><td class="code"><pre><span class="line">&#123;<span class="symbol">%</span> asset_img <span class="built_in">example</span>.jpg This <span class="built_in">is</span> an <span class="built_in">example</span> <span class="built_in">image</span> <span class="symbol">%</span>&#125;</span><br></pre></td></tr></table></figure>


<blockquote>
<p>参考：<a href="https://blog.csdn.net/xjm850552586/article/details/84101345" target="_blank" rel="noopener">图片引用配置</a></p>
</blockquote>
<h3 id="方式三：存放到根目录"><a href="#方式三：存放到根目录" class="headerlink" title="方式三：存放到根目录"></a>方式三：存放到根目录</h3><ul>
<li>引用：</li>
</ul>
<figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">![<span class="string">描述</span>](<span class="link">/&#123;root&#125;/&#123;图片目录&#125;/你的图片</span>)</span><br><span class="line"><span class="xml"><span class="comment">&lt;!-- e.g. --&gt;</span></span></span><br><span class="line">![<span class="string">issue</span>](<span class="link">/images/gitissue/issue.png</span>)</span><br><span class="line"><span class="xml"><span class="comment">&lt;!-- 使用样式： --&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">""</span> <span class="attr">width</span>=<span class="string">"50%"</span> <span class="attr">height</span>=<span class="string">"50%"</span>&gt;</span></span></span><br></pre></td></tr></table></figure>

<blockquote>
<p>参考：<a href="https://www.zhihu.com/question/23378396" target="_blank" rel="noopener">知乎提问</a></p>
</blockquote>
<h2 id="3-Hexo网站运行时间"><a href="#3-Hexo网站运行时间" class="headerlink" title="3.Hexo网站运行时间"></a>3.Hexo网站运行时间</h2><p>在文件 <code>themes/yelee/layout/_partial/left-col.ejs</code> 中，（具体位置可自选）加入如下代码：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">span</span> <span class="attr">id</span>=<span class="string">"timeDate"</span>&gt;</span>载入天数...<span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;<span class="name">span</span> <span class="attr">id</span>=<span class="string">"times"</span>&gt;</span>载入时分秒...<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">    <span class="keyword">var</span> now = <span class="keyword">new</span> <span class="built_in">Date</span>(); </span></span><br><span class="line"><span class="actionscript">    <span class="function"><span class="keyword">function</span> <span class="title">createtime</span><span class="params">()</span> </span>&#123; </span></span><br><span class="line"><span class="javascript">        <span class="keyword">var</span> grt= <span class="keyword">new</span> <span class="built_in">Date</span>(<span class="string">"11/23/2018 20:00:00"</span>);<span class="comment">//此处修改你的建站时间或者网站上线时间 </span></span></span><br><span class="line">        now.setTime(now.getTime()+250); </span><br><span class="line"><span class="javascript">        days = (now - grt ) / <span class="number">1000</span> / <span class="number">60</span> / <span class="number">60</span> / <span class="number">24</span>; dnum = <span class="built_in">Math</span>.floor(days); </span></span><br><span class="line"><span class="javascript">        hours = (now - grt ) / <span class="number">1000</span> / <span class="number">60</span> / <span class="number">60</span> - (<span class="number">24</span> * dnum); hnum = <span class="built_in">Math</span>.floor(hours); </span></span><br><span class="line"><span class="javascript">        <span class="keyword">if</span>(<span class="built_in">String</span>(hnum).length ==<span class="number">1</span> )&#123;hnum = <span class="string">"0"</span> + hnum;&#125; minutes = (now - grt ) / <span class="number">1000</span> /<span class="number">60</span> - (<span class="number">24</span> * <span class="number">60</span> * dnum) - (<span class="number">60</span> * hnum); </span></span><br><span class="line"><span class="javascript">        mnum = <span class="built_in">Math</span>.floor(minutes); <span class="keyword">if</span>(<span class="built_in">String</span>(mnum).length ==<span class="number">1</span> )&#123;mnum = <span class="string">"0"</span> + mnum;&#125; </span></span><br><span class="line">        seconds = (now - grt ) / 1000 - (24 * 60 * 60 * dnum) - (60 * 60 * hnum) - (60 * mnum); </span><br><span class="line"><span class="javascript">        snum = <span class="built_in">Math</span>.round(seconds); <span class="keyword">if</span>(<span class="built_in">String</span>(snum).length ==<span class="number">1</span> )&#123;snum = <span class="string">"0"</span> + snum;&#125; </span></span><br><span class="line"><span class="javascript">        <span class="built_in">document</span>.getElementById(<span class="string">"timeDate"</span>).innerHTML = <span class="string">"本站已安全运行 "</span>+dnum+<span class="string">" 天 "</span>; </span></span><br><span class="line"><span class="javascript">        <span class="built_in">document</span>.getElementById(<span class="string">"times"</span>).innerHTML = hnum + <span class="string">" 小时 "</span> + mnum + <span class="string">" 分 "</span> + snum + <span class="string">" 秒"</span>; </span></span><br><span class="line">    &#125; </span><br><span class="line"><span class="actionscript">    setInterval(<span class="string">"createtime()"</span>,<span class="number">250</span>);</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>

<blockquote>
<p>日期格式: 月/日/年 时:分:秒。</p>
</blockquote>
<blockquote>
<p>参考：<a href="https://blog.csdn.net/dta0502/article/details/89607895" target="_blank" rel="noopener">Hexo-Yilia进阶笔记</a></p>
</blockquote>
<h2 id="4-添加心知天气"><a href="#4-添加心知天气" class="headerlink" title="4.添加心知天气"></a>4.添加心知天气</h2><h3 id="4-1-注册账号，设置天气样式："><a href="#4-1-注册账号，设置天气样式：" class="headerlink" title="4.1.注册账号，设置天气样式："></a>4.1.注册账号，设置天气样式：</h3><ul>
<li>进入<a href="https://www.seniverse.com/widgetv3" target="_blank" rel="noopener">官网</a>注册，选择样式：</li>
</ul>
<p><img src="/images/weather/xinzhi-weather.png" alt="心知天气"></p>
<ul>
<li>点击生成代码，复制代码：</li>
</ul>
<p>如：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&lt;div id=<span class="string">"tp-weather-widget"</span>&gt;&lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">  &lt;script&gt;</span></span><br><span class="line"><span class="regexp">    (function(a,h,g,f,e,d,c,b)&#123;b=function()&#123;d=h.createElement(g);c=h.getElementsByTagName(g)[0];d.src=e;d.charset="utf-8";d.async=1;c.parentNode.insertBefore(d,c)&#125;;a["SeniverseWeatherWidgetObject"]=f;a[f]||(a[f]=function()&#123;(a[f].q=a[f].q||[]).push(arguments)&#125;);a[f].l=+new Date();if(a.attachEvent)&#123;a.attachEvent("onload",b)&#125;else&#123;a.addEventListener("load",b,false)&#125;&#125;(window,document,"script","SeniverseWeatherWidget","/</span><span class="regexp">/cdn.sencdn.com/</span>widget2/<span class="keyword">static</span>/js/bundle.js?t=<span class="string">"+parseInt((new Date().getTime() / 100000000).toString(),10)));</span></span><br><span class="line"><span class="string">    window.SeniverseWeatherWidget('show', &#123;</span></span><br><span class="line"><span class="string">      flavor: "</span>bubble<span class="string">",</span></span><br><span class="line"><span class="string">      location: "</span>WTSQQYHVQ973<span class="string">",</span></span><br><span class="line"><span class="string">      geolocation: true,</span></span><br><span class="line"><span class="string">      language: "</span>zh-Hans<span class="string">",</span></span><br><span class="line"><span class="string">      unit: "</span>c<span class="string">",</span></span><br><span class="line"><span class="string">      theme: "</span>auto<span class="string">",</span></span><br><span class="line"><span class="string">      token: "</span><span class="number">31</span>a8562e-ae28<span class="number">-47</span>fe<span class="number">-860</span>d-d4e01b0867c2<span class="string">",</span></span><br><span class="line"><span class="string">      hover: "</span>enabled<span class="string">",</span></span><br><span class="line"><span class="string">      container: "</span>tp-weather-widget<span class="string">"</span></span><br><span class="line"><span class="string">    &#125;)</span></span><br><span class="line"><span class="string">  &lt;/script&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="4-2-添加配置"><a href="#4-2-添加配置" class="headerlink" title="4.2.添加配置"></a>4.2.添加配置</h3><ul>
<li>打开主题配置文件 <code>_config.yml</code>，添加：</li>
</ul>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 心知天气</span></span><br><span class="line"><span class="attr">xinzhi_weather:</span> <span class="literal">true</span></span><br></pre></td></tr></table></figure>
<ul>
<li>打开 <code>themes/yilia-plus/layout/_partial/left-col.ejs</code> 文件，在合适位置添加：</li>
</ul>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">%</span> <span class="attr">if</span>(<span class="attr">theme.xinzhi_weather</span>)&#123; %&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- 这是刚刚生成的js代码 --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"tp-weather-widget"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">    (<span class="function"><span class="keyword">function</span>(<span class="params">a,h,g,f,e,d,c,b</span>)</span>&#123;b=<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;d=h.createElement(g);c=h.getElementsByTagName(g)[<span class="number">0</span>];d.src=e;d.charset=<span class="string">"utf-8"</span>;d.async=<span class="number">1</span>;c.parentNode.insertBefore(d,c)&#125;;a[<span class="string">"SeniverseWeatherWidgetObject"</span>]=f;a[f]||(a[f]=<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;(a[f].q=a[f].q||[]).push(<span class="built_in">arguments</span>)&#125;);a[f].l=+<span class="keyword">new</span> <span class="built_in">Date</span>();<span class="keyword">if</span>(a.attachEvent)&#123;a.attachEvent(<span class="string">"onload"</span>,b)&#125;<span class="keyword">else</span>&#123;a.addEventListener(<span class="string">"load"</span>,b,<span class="literal">false</span>)&#125;&#125;(<span class="built_in">window</span>,<span class="built_in">document</span>,<span class="string">"script"</span>,<span class="string">"SeniverseWeatherWidget"</span>,<span class="string">"//cdn.sencdn.com/widget2/static/js/bundle.js?t="</span>+<span class="built_in">parseInt</span>((<span class="keyword">new</span> <span class="built_in">Date</span>().getTime() / <span class="number">100000000</span>).toString(),<span class="number">10</span>)));</span></span><br><span class="line"><span class="javascript">    <span class="built_in">window</span>.SeniverseWeatherWidget(<span class="string">'show'</span>, &#123;</span></span><br><span class="line"><span class="actionscript">      flavor: <span class="string">"bubble"</span>,</span></span><br><span class="line"><span class="actionscript">      location: <span class="string">"WTSQQYHVQ973"</span>,</span></span><br><span class="line"><span class="actionscript">      geolocation: <span class="literal">true</span>,</span></span><br><span class="line"><span class="actionscript">      language: <span class="string">"zh-Hans"</span>,</span></span><br><span class="line"><span class="actionscript">      unit: <span class="string">"c"</span>,</span></span><br><span class="line"><span class="actionscript">      theme: <span class="string">"auto"</span>,</span></span><br><span class="line"><span class="actionscript">      token: <span class="string">"31a8562e-ae28-47fe-860d-d4e01b0867c2"</span>,</span></span><br><span class="line"><span class="actionscript">      hover: <span class="string">"enabled"</span>,</span></span><br><span class="line"><span class="actionscript">      container: <span class="string">"tp-weather-widget"</span></span></span><br><span class="line">    &#125;)</span><br><span class="line">  <span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">%</span> &#125; %&gt;</span></span><br></pre></td></tr></table></figure>

<blockquote>
<p>参考：<a href="https://blog.csdn.net/weixin_41287260/article/details/103050663" target="_blank" rel="noopener">添加天气</a></p>
</blockquote>
<h2 id="5-添加百度推送"><a href="#5-添加百度推送" class="headerlink" title="5.添加百度推送"></a>5.添加百度推送</h2><h3 id="5-1-新建-baidu-push-ejs-文件"><a href="#5-1-新建-baidu-push-ejs-文件" class="headerlink" title="5.1.新建 baidu-push.ejs 文件"></a>5.1.新建 <code>baidu-push.ejs</code> 文件</h3><p>在 <code>yilia-plus/layout/_partial</code> 下添加 <code>baidu-push.ejs</code> 文件，内容如下：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&lt;% <span class="keyword">if</span> (theme.baidu_push)&#123; %&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">var</span> bp = <span class="built_in">document</span>.createElement(<span class="string">'script'</span>);</span><br><span class="line">    <span class="keyword">var</span> curProtocol = <span class="built_in">window</span>.location.protocol.split(<span class="string">':'</span>)[<span class="number">0</span>];</span><br><span class="line">    <span class="keyword">if</span> (curProtocol === <span class="string">'https'</span>) &#123;</span><br><span class="line">        bp.src = <span class="string">'https://zz.bdstatic.com/linksubmit/push.js'</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> &#123;</span><br><span class="line">        bp.src = <span class="string">'http://push.zhanzhang.baidu.com/push.js'</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">var</span> s = <span class="built_in">document</span>.getElementsByTagName(<span class="string">"script"</span>)[<span class="number">0</span>];</span><br><span class="line">    s.parentNode.insertBefore(bp, s);</span><br><span class="line">&#125;)();</span><br><span class="line">&lt;<span class="regexp">/script&gt;</span></span><br><span class="line"><span class="regexp">&lt;% &#125; %&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="5-2-引用-baidu-push-ejs"><a href="#5-2-引用-baidu-push-ejs" class="headerlink" title="5.2.引用 baidu-push.ejs"></a>5.2.引用 <code>baidu-push.ejs</code></h3><p>编辑 <code>layout/_partial/head.ejs</code>，添加：</p>
<figure class="highlight gcode"><table><tr><td class="code"><pre><span class="line">&lt;<span class="meta">%</span>- partial<span class="comment">('baidu-push')</span> <span class="meta">%</span>&gt;</span><br></pre></td></tr></table></figure>

<h3 id="5-3-添加-baidu-push-属性"><a href="#5-3-添加-baidu-push-属性" class="headerlink" title="5.3. 添加 baidu_push 属性"></a>5.3. 添加 <code>baidu_push</code> 属性</h3><p>编辑 <code>yilia/_config.yml</code> ，添加：</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 百度推送</span></span><br><span class="line"><span class="attr">baidu_push:</span> <span class="literal">true</span></span><br></pre></td></tr></table></figure>

<h2 id="6-添加版权声明"><a href="#6-添加版权声明" class="headerlink" title="6.添加版权声明"></a>6.添加版权声明</h2><h3 id="6-1-方式一：修改-aricle-ejs-文件"><a href="#6-1-方式一：修改-aricle-ejs-文件" class="headerlink" title="6.1.方式一：修改 aricle.ejs 文件"></a>6.1.方式一：修改 <code>aricle.ejs</code> 文件</h3><p>在 <code>layout/_partial/aricle.ejs</code> 中合适位置，添加：</p>
<figure class="highlight erb"><table><tr><td class="code"><pre><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">%</span></span></span></span><br><span class="line"><span class="ruby">  var sUrl = url.replace(<span class="regexp">/index\.html$/</span>, <span class="string">''</span>);</span></span><br><span class="line"><span class="ruby">  sUrl = <span class="regexp">/^(http:|https:)\/\//</span>.test(sUrl) ? sUrl : <span class="string">'https:'</span> + sUrl;</span></span><br><span class="line"><span class="xml">%&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;%# "版权说明" %&gt;</span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">%</span></span></span><span class="ruby"> <span class="keyword">if</span> (((theme.copyright.copyright_type === <span class="number">2</span>) <span class="params">||</span> (theme.copyright.copyright_type === <span class="number">1</span> &amp;&amp; post.copyright)) &amp;&amp; !index)&#123; </span><span class="xml"><span class="tag">%&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"declare"</span>&gt;</span> </span></span><br><span class="line"><span class="xml">  <span class="tag">&lt;<span class="name">ul</span> <span class="attr">class</span>=<span class="string">"post-copyright"</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">li</span>&gt;</span></span></span><br><span class="line"><span class="xml">      <span class="tag">&lt;<span class="name">strong</span>&gt;</span>本文作者: <span class="tag">&lt;/<span class="name">strong</span>&gt;</span></span></span><br><span class="line"><span class="xml">      <span class="tag">&lt;<span class="name">%=</span></span></span><span class="ruby"> config.author</span><span class="xml"><span class="tag">%&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">li</span>&gt;</span></span></span><br><span class="line"><span class="xml">      <span class="tag">&lt;<span class="name">strong</span>&gt;</span>本文链接: <span class="tag">&lt;/<span class="name">strong</span>&gt;</span></span></span><br><span class="line"><span class="xml">      <span class="tag">&lt;<span class="name">%=</span></span></span><span class="ruby"> sUrl</span><span class="xml"><span class="tag">%&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">%</span></span></span><span class="ruby"> <span class="keyword">if</span> (theme.copyright_text <span class="params">||</span> theme.copyright_text == null)&#123; </span><span class="xml"><span class="tag">%&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">li</span>&gt;</span></span></span><br><span class="line"><span class="xml">      <span class="tag">&lt;<span class="name">span</span>&gt;</span><span class="tag">&lt;<span class="name">strong</span>&gt;</span>版权声明: <span class="tag">&lt;/<span class="name">strong</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span></span><br><span class="line"><span class="xml">      <span class="tag">&lt;<span class="name">%</span></span></span><span class="ruby"> <span class="keyword">if</span> (theme.copyright.copyright_text == null <span class="params">||</span> theme.copyright.copyright_text == <span class="literal">true</span>)&#123; </span><span class="xml"><span class="tag">%&gt;</span></span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;<span class="name">span</span>&gt;</span></span></span><br><span class="line"><span class="xml">          本博客所有文章除特别声明外，均采用 </span></span><br><span class="line"><span class="xml">          <span class="tag">&lt;<span class="name">a</span> <span class="attr">rel</span>=<span class="string">"license"</span> <span class="attr">href</span>=<span class="string">"&lt;%=</span></span></span><span class="ruby"> theme.copyright.licensee_url</span><span class="xml"><span class="tag"><span class="string">%&gt;"</span> <span class="attr">title</span>=<span class="string">"&lt;%=</span></span></span><span class="ruby"> theme.copyright.licensee_alias </span><span class="xml"><span class="tag"><span class="string">%&gt;"</span>&gt;</span><span class="tag">&lt;<span class="name">%=</span></span></span><span class="ruby"> theme.copyright.licensee_name</span><span class="xml"><span class="tag">%&gt;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span></span></span><br><span class="line"><span class="xml">          进行许可。转载请注明出处！</span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;/<span class="name">span</span>&gt;</span></span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;<span class="name">%</span></span></span><span class="ruby"> <span class="keyword">if</span>(theme.copyright.licensee_img != undefined)&#123; </span><span class="xml"><span class="tag">%&gt;</span></span></span><br><span class="line"><span class="xml">          <span class="tag">&lt;<span class="name">span</span>&gt;</span></span></span><br><span class="line"><span class="xml">            <span class="tag">&lt;<span class="name">a</span> <span class="attr">rel</span>=<span class="string">"license"</span> <span class="attr">href</span>=<span class="string">"&lt;%=</span></span></span><span class="ruby"> theme.copyright.licensee_url</span><span class="xml"><span class="tag"><span class="string">%&gt;"</span>&gt;</span></span></span><br><span class="line"><span class="xml">              <span class="tag">&lt;<span class="name">img</span> <span class="attr">alt</span>=<span class="string">"知识共享许可协议"</span> <span class="attr">style</span>=<span class="string">"border-width:0"</span> <span class="attr">src</span>=<span class="string">"&lt;%-</span></span></span><span class="ruby"> config.root </span><span class="xml"><span class="tag"><span class="string">%&gt;&lt;%=</span></span></span><span class="ruby"> theme.copyright.licensee_img </span><span class="xml"><span class="tag"><span class="string">%&gt;"</span>/&gt;</span></span></span><br><span class="line"><span class="xml">            <span class="tag">&lt;/<span class="name">a</span>&gt;</span></span></span><br><span class="line"><span class="xml">          <span class="tag">&lt;/<span class="name">span</span>&gt;</span></span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;<span class="name">%</span></span></span><span class="ruby"> &#125; </span><span class="xml"><span class="tag">%&gt;</span></span></span><br><span class="line"><span class="xml">      </span></span><br><span class="line"><span class="xml">      <span class="tag">&lt;<span class="name">%</span></span></span><span class="ruby"> &#125; <span class="keyword">else</span> &#123; </span><span class="xml"><span class="tag">%&gt;</span></span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;<span class="name">%=</span></span></span><span class="ruby"> theme.copyright.copyright_text </span><span class="xml"><span class="tag">%&gt;</span></span></span><br><span class="line"><span class="xml">      <span class="tag">&lt;<span class="name">%</span></span></span><span class="ruby"> &#125; </span><span class="xml"><span class="tag">%&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">%</span></span></span><span class="ruby"> &#125; </span><span class="xml"><span class="tag">%&gt;</span></span></span><br><span class="line"><span class="xml">  <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">%</span></span></span><span class="ruby"> &#125; <span class="keyword">else</span> &#123;</span><span class="xml"><span class="tag">%&gt;</span></span></span><br><span class="line"><span class="xml">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"declare"</span> <span class="attr">hidden</span>=<span class="string">"hidden"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">%</span></span></span><span class="ruby"> &#125; </span><span class="xml"><span class="tag">%&gt;</span></span></span><br></pre></td></tr></table></figure>

<h3 id="6-2-方式二：新建-declare-ejs-文件"><a href="#6-2-方式二：新建-declare-ejs-文件" class="headerlink" title="6.2.方式二：新建 declare.ejs 文件"></a>6.2.方式二：新建 <code>declare.ejs</code> 文件</h3><ul>
<li><p>在目录 <code>themes\yilia-plus\layout\_partial\post</code> 下，新建 <code>declare.ejs</code> 文件，存放上面的代码</p>
</li>
<li><p>在 <code>layout/_partial/aricle.ejs</code> 中合适位置，添加：</p>
</li>
</ul>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">%#</span> "版权说明" %&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">%</span> <span class="attr">if</span> (<span class="attr">theme.copyright</span>) &#123;%&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">%-</span> <span class="attr">partial</span>('<span class="attr">post</span>/<span class="attr">declare</span>') %&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">%</span> &#125; %&gt;</span></span><br></pre></td></tr></table></figure>

<ul>
<li>打开样式文件 <code>themes\yilia-plus\source\main.b8fa34.css</code> ，添加样式：</li>
</ul>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.post-copyright</span>&#123;</span><br><span class="line">    <span class="attribute">margin</span>: <span class="number">0em</span> <span class="number">0em</span> <span class="number">0em</span> <span class="number">0em</span>;</span><br><span class="line">    <span class="attribute">padding</span>: <span class="number">0.5em</span> <span class="number">1em</span>;</span><br><span class="line">    <span class="attribute">border-left</span>:<span class="number">3px</span> solid <span class="number">#ff1700</span>;</span><br><span class="line">    <span class="attribute">background-color</span>: <span class="number">#f9f9f9</span>;</span><br><span class="line">    <span class="attribute">list-style</span>: none;</span><br><span class="line">    <span class="attribute">font-size</span>: <span class="number">14px</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="6-3-添加-copyright-属性"><a href="#6-3-添加-copyright-属性" class="headerlink" title="6.3.添加 copyright 属性"></a>6.3.添加 <code>copyright</code> 属性</h3><p>打开主题配置文件 <code>_config.yml</code>，添加：</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 版权声明</span></span><br><span class="line"><span class="comment"># 版权声明type设定：0-关闭版权声明； 1-文章对应的md文件里有copyright: true属性，才有版权声明； 2-所有文章均有版权声明</span></span><br><span class="line"><span class="attr">copyright:</span></span><br><span class="line">  <span class="attr">copyright_type:</span> <span class="number">2</span></span><br><span class="line">  <span class="attr">licensee_url:</span> <span class="string">https://creativecommons.org/licenses/by-nc-sa/4.0/</span>        <span class="comment">#当前应用的版权协议地址。</span></span><br><span class="line">  <span class="attr">licensee_name:</span> <span class="string">'CC BY-NC-SA 4.0'</span>                                        <span class="comment">#版权协议的名称</span></span><br><span class="line">  <span class="attr">licensee_alias:</span> <span class="string">'知识共享署名-非商业性使用-相同方式共享 4.0 国际许可协议'</span>       <span class="comment"># alias别名</span></span><br><span class="line">  <span class="comment"># https://i.creativecommons.org/l/by-nc-sa/4.0/88x31.png</span></span><br><span class="line">  <span class="attr">licensee_img:</span> <span class="string">/images/copyright.png</span>                            <span class="comment">#版权协议的Logo (/images/copyright.png)</span></span><br><span class="line">  <span class="comment"># 版权声明自定义文本(关闭请设置为false)</span></span><br><span class="line">  <span class="attr">copyright_text:</span></span><br></pre></td></tr></table></figure>
<blockquote>
<p>参考：<br><a href="https://blog.csdn.net/weixin_30391339/article/details/98582169" target="_blank" rel="noopener">Yilia主题优化</a><br><a href="https://blog.csdn.net/weixin_41287260/article/details/103050336" target="_blank" rel="noopener">Yilia版权声明</a></p>
</blockquote>
<h2 id="7-添加在线聊天"><a href="#7-添加在线聊天" class="headerlink" title="7.添加在线聊天"></a>7.添加在线聊天</h2><h3 id="7-1-注册"><a href="#7-1-注册" class="headerlink" title="7.1.注册"></a>7.1.注册</h3><ul>
<li>去<a href="http://www.daovoice.io/" target="_blank" rel="noopener">官网</a>注册一个账号，复制我的邀请码<a href="http://dashboard.daovoice.io/get-started" target="_blank" rel="noopener">eb35ef31</a>，然后直接点击开始注册：</li>
</ul>
<div align="center">
  <img src="/images/daovoice/daovoice_register.png" width="50%">
</div>

<ul>
<li>完成后，显示如下界面：<div align="center">
<img src="/images/daovoice/daovoice_config.png" width="75%">
</div>

</li>
</ul>
<p>可以通过点击 <strong><code>点击接入</code></strong> ，或路径 <strong><code>[应用设置]</code></strong> -&gt; <strong><code>[安装到网站]</code></strong> 找到。</p>
<ul>
<li>可以修改喜欢的样式</li>
</ul>
<p>找到 <strong><code>[应用设置]</code></strong> -&gt; <strong><code>[聊天设置]</code></strong>，修改 :</p>
<div align="center">
  <img src="/images/daovoice/daovoice_style.png" width="75%">
</div>

<p>接下来有提示，复制框1、3中的代码到head文件中，放在 <code>&lt;/head&gt;</code> 标签之前。</p>
<h3 id="7-2-在文件-head-ejs-中添加配置"><a href="#7-2-在文件-head-ejs-中添加配置" class="headerlink" title="7.2.在文件 head.ejs 中添加配置"></a>7.2.在文件 <code>head.ejs</code> 中添加配置</h3><p>打开文件 <code>themes\yilia-plus\layout\_partial\head.ejs</code>，添加：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">%#</span> "在线聊天" %&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">%</span> <span class="attr">if</span> (<span class="attr">theme.daovoice</span>) &#123; %&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">    (<span class="function"><span class="keyword">function</span>(<span class="params">i,s,o,g,r,a,m</span>)</span>&#123;i[<span class="string">"DaoVoiceObject"</span>]=r;i[r]=i[r]||<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;(i[r].q=i[r].q||[]).push(<span class="built_in">arguments</span>)&#125;,i[r].l=<span class="number">1</span>*<span class="keyword">new</span> <span class="built_in">Date</span>();a=s.createElement(o),m=s.getElementsByTagName(o)[<span class="number">0</span>];a.async=<span class="number">1</span>;a.src=g;a.charset=<span class="string">"utf-8"</span>;m.parentNode.insertBefore(a,m)&#125;)(<span class="built_in">window</span>,<span class="built_in">document</span>,<span class="string">"script"</span>,(<span class="string">'https:'</span> == <span class="built_in">document</span>.location.protocol ? <span class="string">'https:'</span> : <span class="string">'http:'</span>) + <span class="string">"//widget.daovoice.io/widget/&lt;%= theme.daovoice_app_id %&gt;.js"</span>,<span class="string">"daovoice"</span>)</span></span><br><span class="line"></span><br><span class="line"><span class="actionscript">    daovoice(<span class="string">'init'</span>, &#123;</span></span><br><span class="line"><span class="actionscript">      app_id: <span class="string">"&lt;%= theme.daovoice_app_id %&gt;"</span></span></span><br><span class="line">    &#125;);</span><br><span class="line"><span class="actionscript">    daovoice(<span class="string">'update'</span>);</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">%</span> &#125; %&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="7-3-配置参数"><a href="#7-3-配置参数" class="headerlink" title="7.3.配置参数"></a>7.3.配置参数</h3><p>在主题配置文件 <code>_config.yml</code> 中，添加：</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Daovoice DaoCloud 在线沟通</span></span><br><span class="line"><span class="attr">daovoice:</span> <span class="literal">true</span> </span><br><span class="line"><span class="attr">daovoice_app_id:</span> <span class="string">""</span>   <span class="comment"># 填你的id</span></span><br></pre></td></tr></table></figure>


<hr>
]]></content>
      <categories>
        <category>网站</category>
        <category>Hexo</category>
      </categories>
      <tags>
        <tag>yilia</tag>
        <tag>插件</tag>
      </tags>
  </entry>
  <entry>
    <title>Hexo搭建个人博客：yilia主题配置(六) - 添加相册</title>
    <url>/archives/89f1ac35.html</url>
    <content><![CDATA[<p>创建相册等页面的的大体思路：1.本地存储图片，直接引用；2.使用GitHub存储相册；3.使用七牛云存储相册 …</p>
<a id="more"></a>

<blockquote>
<p>本文主要讲述关于GitHub存储相册的大概思路</p>
</blockquote>
<p>网上大体思路都差不多，之前找了一个别人的相册代码仓，修改了一下其中的脚本，可以参考：<a href="https://github.com/YaoJusheng/blog_photos" target="_blank" rel="noopener">相册脚本</a>，也可以到网上去搜其他的，下载到本地。</p>
<h2 id="1-创建相册仓库"><a href="#1-创建相册仓库" class="headerlink" title="1.创建相册仓库"></a>1.创建相册仓库</h2><p>到GitHub上或者码云，新建仓库，取名随意。</p>
<h2 id="2-本地关联"><a href="#2-本地关联" class="headerlink" title="2.本地关联"></a>2.本地关联</h2><p>初始化仓库，关联刚创的远程仓库，将之前下载的demo复制过来，几个重要的文件：*.py，js、css文件，empty.png，以及json文件。<br>创建两个空目录，<code>min_photos</code>、<code>photos</code>，用来存放照片，本地操作时，将照片按照时间日期的方式命名（e.g.: 2018-06-08_描述.png），<br>然后放到 <code>photos</code> 目录中。</p>
<h2 id="3-生成图片信息"><a href="#3-生成图片信息" class="headerlink" title="3.生成图片信息"></a>3.生成图片信息</h2><p>修改 <code>ins.js</code> ，找到 <code>var minSrc</code> 和 <code>var src</code> 这两个变量，修改成自己的GitHub地址：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> minSrc = <span class="string">'https://raw.githubusercontent.com/&#123;Github ID&#125;/&#123;repo&#125;/&#123;branch&#125;/min_photos/'</span> + data.link[i];</span><br><span class="line"><span class="keyword">var</span> src = <span class="string">'https://raw.githubusercontent.com/&#123;Github ID&#125;/&#123;repo&#125;/&#123;branch&#125;/photos/'</span> + data.link[i];</span><br></pre></td></tr></table></figure>

<p>运行脚本 <code>tool.py</code>:</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">python tool.py</span><br></pre></td></tr></table></figure>
<p>生成 <code>data.json</code> 文件，这就是图片信息文件。</p>
<h2 id="4-创建页面"><a href="#4-创建页面" class="headerlink" title="4.创建页面"></a>4.创建页面</h2><h3 id="4-1-生成相册页面"><a href="#4-1-生成相册页面" class="headerlink" title="4.1.生成相册页面"></a>4.1.生成相册页面</h3><p>cmd或bash窗口，输入命令：</p>
<figure class="highlight routeros"><table><tr><td class="code"><pre><span class="line">hexo new<span class="built_in"> page </span><span class="string">'photos'</span></span><br></pre></td></tr></table></figure>

<h3 id="4-2-主题文件修改"><a href="#4-2-主题文件修改" class="headerlink" title="4.2.主题文件修改"></a>4.2.主题文件修改</h3><p>在menu菜单，添加：</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="string">相册:</span> <span class="string">/photos</span></span><br></pre></td></tr></table></figure>

<h3 id="4-3-放置页面配置文件"><a href="#4-3-放置页面配置文件" class="headerlink" title="4.3.放置页面配置文件"></a>4.3.放置页面配置文件</h3><ul>
<li>将js、css以及json文件放到 <code>source/photos</code> 目录下；</li>
<li>在 <code>source</code> 目录下，依次创建 <code>assets/img</code> 目录，将 <code>empty.png</code> 放置到该目录下；<blockquote>
<p>Tips: 注意根目录的root配置，如果root不是根路径 <code>/</code>，则ins.js要相应更改，避免 <code>empty.png</code> 文件找不到。</p>
</blockquote>
</li>
</ul>
]]></content>
      <categories>
        <category>网站</category>
        <category>Hexo</category>
      </categories>
      <tags>
        <tag>yilia</tag>
        <tag>相册视频</tag>
      </tags>
  </entry>
  <entry>
    <title>Hexo搭建个人博客：yilia主题配置(四) - 分类管理</title>
    <url>/archives/46241.html</url>
    <content><![CDATA[<p>本文主要讲述 <code>Hexo-yilia</code> 主题对于文章的分类和标签方面的配置。</p>
<a id="more"></a>

<h2 id="1-插件安装"><a href="#1-插件安装" class="headerlink" title="1.插件安装"></a>1.插件安装</h2><blockquote>
<p>安装云标签：</p>
</blockquote>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm install hexo-tag-cloud@^2.0.* --save</span><br></pre></td></tr></table></figure>

<h2 id="2-基本配置"><a href="#2-基本配置" class="headerlink" title="2.基本配置"></a>2.基本配置</h2><p>在主题配置文件 <code>_config.yml</code> 中，添加：</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">menu:</span></span><br><span class="line">  <span class="string">主页:</span> <span class="string">/</span></span><br><span class="line">  <span class="string">标签:</span> <span class="string">/tags</span></span><br><span class="line">  <span class="string">分类:</span> <span class="string">/categories</span></span><br></pre></td></tr></table></figure>

<h2 id="3-构建"><a href="#3-构建" class="headerlink" title="3. 构建"></a>3. 构建</h2><h3 id="3-1-分类"><a href="#3-1-分类" class="headerlink" title="3.1.分类"></a>3.1.分类</h3><ul>
<li>打开 <code>DOS</code> 窗口或 <code>git bash</code>，输入以下命令：</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">hexo new page <span class="string">'categories'</span></span><br></pre></td></tr></table></figure>
<ul>
<li>打开 <code>source\categories\index.md</code> 文件，修改如下：</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">---</span><br><span class="line">title: 分类</span><br><span class="line">date: 2020-02-14 22:18:16</span><br><span class="line">type: categories</span><br><span class="line">layout: &quot;categories&quot;</span><br><span class="line">toc: false</span><br><span class="line">comments: false</span><br><span class="line">---</span><br></pre></td></tr></table></figure>

<h3 id="3-2-标签"><a href="#3-2-标签" class="headerlink" title="3.2.标签"></a>3.2.标签</h3><ul>
<li>同样，输入：</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">hexo new page <span class="string">'tags'</span></span><br></pre></td></tr></table></figure>
<ul>
<li>打开 <code>source\tags\index.md</code> 文件，修改如下：</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">---</span><br><span class="line">title: 标签</span><br><span class="line">date: 2020-02-14 22:20:43</span><br><span class="line">type: tags</span><br><span class="line">layout: &quot;tags&quot;</span><br><span class="line">comments: false</span><br><span class="line">---</span><br></pre></td></tr></table></figure>

<h2 id="4-页面配置"><a href="#4-页面配置" class="headerlink" title="4.页面配置"></a>4.页面配置</h2><ul>
<li>打开 <code>scaffolds/</code> 目录下的 <code>post.md</code> 文件，添加：</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">toc: true   </span><br><span class="line">tags: &#123;&#123; tags &#125;&#125;</span><br><span class="line">categories:</span><br></pre></td></tr></table></figure>

<h3 id="方式一：组合配置"><a href="#方式一：组合配置" class="headerlink" title="方式一：组合配置"></a>方式一：组合配置</h3><ul>
<li><strong>方法1：修改文件 <code>article.ejs</code></strong></li>
</ul>
<p>在文件 <code>themes\yilia-plus\layout\_partial\article.ejs</code> 中，找到 <code>class=&quot;article-entry&quot;</code>，添加：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">%</span> <span class="attr">if</span> (<span class="attr">page.path</span> === <span class="string">"tags/index.html"</span>)&#123; %&gt;</span>  </span><br><span class="line">  <span class="comment">&lt;!-- 这里也可用type去判断，放在tags标签页或者categories分类页都可以 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">hr</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">%-</span> <span class="attr">list_categories</span>(&#123;</span></span><br><span class="line"><span class="tag">        <span class="attr">depth:</span> <span class="attr">1</span>,</span></span><br><span class="line"><span class="tag">    &#125;) %&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"tags"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">%-</span> <span class="attr">tagcloud</span>(&#123;</span></span><br><span class="line"><span class="tag">            <span class="attr">min_font:</span> <span class="attr">16</span>, </span></span><br><span class="line"><span class="tag">            <span class="attr">max_font:</span> <span class="attr">35</span>, </span></span><br><span class="line"><span class="tag">            <span class="attr">amount:</span> <span class="attr">999</span>, </span></span><br><span class="line"><span class="tag">            <span class="attr">color:</span> <span class="attr">true</span>, </span></span><br><span class="line"><span class="tag">            <span class="attr">start_color:</span> '<span class="attr">blue</span>', </span></span><br><span class="line"><span class="tag">            <span class="attr">end_color:</span> '<span class="attr">gray</span>',</span></span><br><span class="line"><span class="tag">        &#125;) %&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">&lt;!-- 这里也可以放进css文件中，这样阅读性好些 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="css">        <span class="selector-class">.category-list</span> <span class="selector-tag">li</span>&#123;</span></span><br><span class="line">            display: inline-block;</span><br><span class="line"><span class="css">            <span class="selector-tag">margin</span>: 0 1<span class="selector-tag">em</span> <span class="selector-class">.5em</span> 0;</span></span><br><span class="line">            padding: 4px;</span><br><span class="line">            border: 1px solid green;</span><br><span class="line"><span class="css">            <span class="selector-tag">font-size</span>: 1<span class="selector-class">.2em</span>;</span></span><br><span class="line">        &#125;</span><br><span class="line"><span class="css">        <span class="selector-class">.category-list</span> <span class="selector-tag">a</span> &#123;</span></span><br><span class="line"><span class="css">            <span class="selector-tag">color</span>: <span class="selector-id">#ffffff</span>;</span></span><br><span class="line">        &#125;</span><br><span class="line"><span class="css">        <span class="selector-class">.category-list-item</span> &#123;</span></span><br><span class="line"><span class="css">          <span class="selector-tag">background-color</span>: <span class="selector-id">#55daff</span>;</span></span><br><span class="line">          border-radius: 15%;</span><br><span class="line"><span class="css">          <span class="selector-tag">opacity</span><span class="selector-pseudo">:0.5</span>; </span></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"><span class="css">        <span class="selector-class">.category-list-item</span><span class="selector-pseudo">:hover</span> <span class="selector-tag">a</span> &#123;</span></span><br><span class="line"><span class="css">            <span class="selector-tag">color</span>: <span class="selector-id">#c16431</span>;</span></span><br><span class="line">            text-decoration: none;</span><br><span class="line">            font-weight: bold;</span><br><span class="line">        &#125;</span><br><span class="line"><span class="css">        <span class="selector-class">.category-list-count</span> &#123;</span></span><br><span class="line">            margin-left: 2px;</span><br><span class="line"><span class="css">            <span class="selector-tag">font-size</span>: <span class="selector-class">.9em</span>;</span></span><br><span class="line">        &#125;</span><br><span class="line"><span class="css">        <span class="selector-class">.article-entry</span> <span class="selector-tag">ul</span> <span class="selector-tag">li</span><span class="selector-pseudo">:before</span>&#123;</span></span><br><span class="line">            display: none;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line"><span class="css">        <span class="selector-class">.tags</span> &#123;</span></span><br><span class="line">            max-width: 40em;</span><br><span class="line">            margin: 2em auto;</span><br><span class="line">            margin-top: 0em;</span><br><span class="line">        &#125;</span><br><span class="line"><span class="css">        <span class="selector-class">.tags</span> <span class="selector-tag">a</span> &#123;</span></span><br><span class="line">            margin-right: 1em;</span><br><span class="line">            border-bottom: 1px solid blue;</span><br><span class="line">            line-height: 65px;</span><br><span class="line">            white-space: nowrap;</span><br><span class="line">        &#125;</span><br><span class="line"><span class="css">        <span class="selector-class">.tags</span> <span class="selector-tag">a</span><span class="selector-pseudo">:hover</span> &#123;</span></span><br><span class="line">            border-bottom: 2px solid green;</span><br><span class="line">            font-style: italic;</span><br><span class="line"><span class="css">            <span class="selector-tag">color</span>: <span class="selector-id">#22323a</span>;</span></span><br><span class="line">            text-decoration: none;</span><br><span class="line">        &#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">%</span> &#125; %&gt;</span></span><br></pre></td></tr></table></figure>

<ul>
<li><strong>方法2：新建文件 <code>tags.ejs</code> 或者 <code>categories.ejs</code></strong></li>
</ul>
<p>如果不想在 <code>article.ejs</code> 或分类、标签模板页面中显示，可以在 <code>themes\yilia-plus\layout</code> 目录下，新建文件 <code>tags.ejs</code> 或者 <code>categories.ejs</code>。</p>
<p>在其中添加如下代码：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">article</span> <span class="attr">class</span>=<span class="string">"article article-type-post show"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">header</span> <span class="attr">class</span>=<span class="string">"article-header"</span> <span class="attr">style</span>=<span class="string">"border-bottom: 1px solid #ccc"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h1</span> <span class="attr">class</span>=<span class="string">"article-title"</span> <span class="attr">itemprop</span>=<span class="string">"name"</span>&gt;</span>分类归档<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;/<span class="name">header</span>&gt;</span></span><br><span class="line">  </span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">align</span>=<span class="string">center</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">nav</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">font</span> <span class="attr">size</span>=<span class="string">"4"</span> <span class="attr">color</span>=<span class="string">"rgba(34, 177, 48)"</span>&gt;</span></span><br><span class="line">        文章 [<span class="tag">&lt;<span class="name">%=site.posts.length%</span>&gt;</span>] <span class="symbol">&amp;emsp;</span><span class="symbol">&amp;emsp;</span></span><br><span class="line">        分类 [<span class="tag">&lt;<span class="name">%=site.categories.length%</span>&gt;</span>] <span class="symbol">&amp;emsp;</span><span class="symbol">&amp;emsp;</span></span><br><span class="line">        标签 [<span class="tag">&lt;<span class="name">%=site.tags.length%</span>&gt;</span>]</span><br><span class="line">      <span class="tag">&lt;/<span class="name">font</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">nav</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">center</span>&gt;</span><span class="tag">&lt;<span class="name">strong</span>&gt;</span><span class="tag">&lt;<span class="name">font</span> <span class="attr">size</span>=<span class="string">"5"</span> <span class="attr">color</span>=<span class="string">"#228B66"</span>&gt;</span><span class="tag">&lt;<span class="name">%=</span> <span class="attr">page.title</span> %&gt;</span><span class="tag">&lt;/<span class="name">font</span>&gt;</span> <span class="tag">&lt;/<span class="name">strong</span>&gt;</span><span class="tag">&lt;/<span class="name">center</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">%</span> <span class="attr">if</span> (<span class="attr">site.categories.length</span>)&#123; %&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">ul</span> <span class="attr">class</span>=<span class="string">"category-list"</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">p</span> <span class="attr">style</span>=<span class="string">'color:lightyellow'</span>&gt;</span>共计<span class="symbol">&amp;nbsp;</span><span class="tag">&lt;<span class="name">%=</span> <span class="attr">site.categories.length</span> %&gt;</span><span class="symbol">&amp;nbsp;</span>个分类<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">%</span> <span class="attr">site.categories.sort</span>('<span class="attr">name</span>')<span class="attr">.each</span>(<span class="attr">function</span>(<span class="attr">item</span>)&#123; %&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">%</span> <span class="attr">if</span>(<span class="attr">item.posts.length</span>)&#123; %&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">"category-list-item"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"&lt;%- config.root %&gt;&lt;%- item.path %&gt;"</span> <span class="attr">class</span>=<span class="string">"category-list-link"</span> <span class="attr">title</span>=<span class="string">"&lt;%= item.name %&gt;"</span>&gt;</span></span><br><span class="line">              <span class="tag">&lt;<span class="name">%=</span> <span class="attr">item.name</span> %&gt;</span></span><br><span class="line">              <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"category-list-count"</span>&gt;</span><span class="tag">&lt;<span class="name">sup</span>&gt;</span>[<span class="tag">&lt;<span class="name">%=</span> <span class="attr">item.posts.length</span> %&gt;</span>]<span class="tag">&lt;/<span class="name">sup</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">%</span> &#125; %&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">%</span> &#125;) %&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">%</span> &#125; %&gt;</span></span><br><span class="line">  </span><br><span class="line">  <span class="tag">&lt;<span class="name">center</span>&gt;</span><span class="tag">&lt;<span class="name">strong</span>&gt;</span><span class="tag">&lt;<span class="name">font</span> <span class="attr">size</span>=<span class="string">"5"</span> <span class="attr">color</span>=<span class="string">"#228B22"</span>&gt;</span>标签云 <span class="tag">&lt;/<span class="name">font</span>&gt;</span> <span class="tag">&lt;/<span class="name">strong</span>&gt;</span><span class="tag">&lt;/<span class="name">center</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">align</span>=<span class="string">center</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">%</span> <span class="attr">if</span> (<span class="attr">site.tags.length</span>) &#123; %&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">p</span> <span class="attr">style</span>=<span class="string">'color:lightyellow'</span>&gt;</span>共计<span class="symbol">&amp;nbsp;</span><span class="tag">&lt;<span class="name">%=</span> <span class="attr">site.tags.length</span> %&gt;</span><span class="symbol">&amp;nbsp;</span>个标签<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"></span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"tag-cloud"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">%-</span> <span class="attr">tagcloud</span>(&#123;</span></span><br><span class="line"><span class="tag">          <span class="attr">min_font:</span> <span class="attr">15</span>, </span></span><br><span class="line"><span class="tag">          <span class="attr">max_font:</span> <span class="attr">25</span>, </span></span><br><span class="line"><span class="tag">          <span class="attr">amount:</span> <span class="attr">999</span>,</span></span><br><span class="line"><span class="tag">          <span class="attr">start_color:</span> '<span class="attr">blue</span>', </span></span><br><span class="line"><span class="tag">          <span class="attr">end_color:</span> '<span class="attr">gray</span>',</span></span><br><span class="line"><span class="tag">        &#125;) %&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">%</span> &#125; %&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">article</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>接下来，和之前一样，加入css代码就行，无论放在新建文件中还是css文件都可以(可用过路径 <code>themes\yilia-plus\layout\_partial\css.ejs</code> 查看)。</p>
<h3 id="方式二：分开布局"><a href="#方式二：分开布局" class="headerlink" title="方式二：分开布局"></a>方式二：分开布局</h3><ul>
<li><strong>方法1：修改文件 <code>article.ejs</code></strong></li>
</ul>
<p>在文件 <code>themes\yilia-plus\layout\_partial\article.ejs</code> 中，找到 <code>class=&quot;article-entry&quot;</code>，添加：</p>
<figure class="highlight applescript"><table><tr><td class="code"><pre><span class="line">&lt;% <span class="keyword">if</span> (page.type === <span class="string">"tags"</span>) &#123; %&gt;</span><br><span class="line">  &lt;<span class="keyword">div</span> <span class="built_in">class</span>=<span class="string">"tag-cloud"</span>&gt;</span><br><span class="line">    &lt;<span class="keyword">div</span> <span class="built_in">class</span>=<span class="string">"tag-cloud-title"</span>&gt;</span><br><span class="line">    &lt;%- <span class="string">"TOTAl : "</span> + site.tags.<span class="built_in">length</span> %&gt;</span><br><span class="line">    &lt;/<span class="keyword">div</span>&gt;</span><br><span class="line"> </span><br><span class="line">    &lt;<span class="keyword">div</span> <span class="built_in">class</span>=<span class="string">"tag-cloud-tags"</span>&gt;</span><br><span class="line">    &lt;%- tagcloud(&#123;</span><br><span class="line">      min_font: <span class="number">12</span>,</span><br><span class="line">      max_font: <span class="number">30</span>,</span><br><span class="line">      amount: <span class="number">200</span>,</span><br><span class="line">      color: <span class="literal">true</span>,</span><br><span class="line">      start_color: '<span class="comment">#555',</span></span><br><span class="line">      end_color: '<span class="comment">#111'</span></span><br><span class="line">      &#125;) %&gt;</span><br><span class="line">    &lt;/<span class="keyword">div</span>&gt;</span><br><span class="line">  &lt;/<span class="keyword">div</span>&gt;</span><br><span class="line"> </span><br><span class="line">  &lt;% &#125; <span class="keyword">else</span> <span class="keyword">if</span> (page.type === 'categories') &#123; %&gt;</span><br><span class="line"> </span><br><span class="line">  &lt;<span class="keyword">div</span> <span class="built_in">class</span>=<span class="string">"category-all-page"</span>&gt;</span><br><span class="line">    &lt;<span class="keyword">div</span> <span class="built_in">class</span>=<span class="string">"category-all-title"</span>&gt;</span><br><span class="line">    &lt;%- <span class="string">"TOTAL : "</span> + site.categories.<span class="built_in">length</span> %&gt;</span><br><span class="line">    &lt;/<span class="keyword">div</span>&gt;</span><br><span class="line"> </span><br><span class="line">    &lt;<span class="keyword">div</span> <span class="built_in">class</span>=<span class="string">"category-all"</span>&gt;</span><br><span class="line">    &lt;%- list_categories() %&gt;</span><br><span class="line">    &lt;/<span class="keyword">div</span>&gt;</span><br><span class="line"> </span><br><span class="line">  &lt;/<span class="keyword">div</span>&gt;</span><br><span class="line">&lt;% &#125; %&gt;</span><br></pre></td></tr></table></figure>

<p>在样式文件 <code>themes\yilia-plus\source\main.b8fa34.css</code> 中，添加：</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.category-all-page</span> &#123;</span><br><span class="line">  <span class="attribute">a</span>:link &#123;</span><br><span class="line">    font-size: <span class="number">14px</span>;</span><br><span class="line">    <span class="attribute">color</span>: <span class="number">#333</span>;</span><br><span class="line">    <span class="attribute">text-decoration</span>: none;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="selector-tag">a</span><span class="selector-pseudo">:hover</span> &#123;</span><br><span class="line">    <span class="attribute">font-size</span>: <span class="number">14px</span>;</span><br><span class="line">    <span class="attribute">color</span>: <span class="number">#d8d</span>;</span><br><span class="line">    <span class="attribute">text-decoration</span>: none;</span><br><span class="line">    <span class="attribute">font-weight</span>: bold;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="selector-class">.category-all-title</span> &#123; <span class="attribute">text-align</span>: left; &#125;</span><br><span class="line"> </span><br><span class="line">  <span class="selector-class">.category-all</span> &#123; </span><br><span class="line">    <span class="attribute">margin-top</span>: <span class="number">20px</span>; </span><br><span class="line">  &#125;</span><br><span class="line"> </span><br><span class="line">  <span class="selector-class">.category-list</span> &#123;</span><br><span class="line">    <span class="attribute">margin</span>: <span class="number">0</span>;</span><br><span class="line">    <span class="attribute">padding</span>: <span class="number">0</span>;</span><br><span class="line">    <span class="attribute">list-style</span>: none;</span><br><span class="line">  &#125;</span><br><span class="line"> </span><br><span class="line">  <span class="selector-class">.category-list-item</span> &#123; </span><br><span class="line">    <span class="attribute">text-align</span>: center;</span><br><span class="line">    <span class="attribute">display</span>: inline-block;</span><br><span class="line">    <span class="attribute">margin</span>: <span class="number">8px</span>; </span><br><span class="line">    <span class="attribute">padding</span>: <span class="number">8px</span>;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">150px</span>;</span><br><span class="line">    <span class="attribute">position</span>: relative;</span><br><span class="line">    <span class="attribute">background-color</span>: <span class="built_in">rgba</span>(<span class="number">237</span>, <span class="number">237</span>, <span class="number">237</span>, <span class="number">0.53</span>);</span><br><span class="line">    <span class="attribute">border-radius</span>: <span class="number">1px</span>;</span><br><span class="line">    <span class="attribute">box-shadow</span>:<span class="number">0px</span> <span class="number">0px</span>  <span class="number">0px</span> <span class="number">1px</span> <span class="number">#ccc</span>;</span><br><span class="line">  &#125;</span><br><span class="line"> </span><br><span class="line">  <span class="selector-class">.category-list-link</span> &#123;</span><br><span class="line">    <span class="attribute">color</span>: <span class="number">#333</span>;</span><br><span class="line">  &#125;</span><br><span class="line"> </span><br><span class="line">  <span class="selector-class">.category-list-count</span> &#123;</span><br><span class="line">    <span class="attribute">color</span>: <span class="number">#333</span>;</span><br><span class="line">    &amp;:before &#123;</span><br><span class="line">      <span class="selector-tag">display</span>: <span class="selector-tag">inline</span>;</span><br><span class="line">      <span class="selector-tag">content</span>: " ("</span><br><span class="line">    &#125;</span><br><span class="line">    &amp;<span class="selector-pseudo">:after</span> &#123;</span><br><span class="line">      <span class="attribute">display</span>: inline;</span><br><span class="line">      <span class="attribute">content</span>: <span class="string">") "</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"> </span><br><span class="line">  <span class="selector-class">.category-list-child</span> &#123; <span class="attribute">padding-left</span>: <span class="number">10px</span>; <span class="attribute">color</span>: <span class="number">#333</span>;&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li><strong>方法2：新建文件 <code>tags.ejs</code> 与 <code>categories.ejs</code></strong></li>
</ul>
<p>如果不想在 <code>article.ejs</code> 或分类、标签模板页面中显示，可以在 <code>themes\yilia-plus\layout</code> 目录下，新建文件 <code>tags.ejs</code> 与 <code>categories.ejs</code>。</p>
<p>在 <code>tags.ejs</code> 添加如下代码：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">article</span> <span class="attr">class</span>=<span class="string">"article article-type-post show"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">header</span> <span class="attr">class</span>=<span class="string">"article-header"</span> <span class="attr">style</span>=<span class="string">"border-bottom: 1px solid #ccc"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h1</span> <span class="attr">class</span>=<span class="string">"article-title"</span> <span class="attr">itemprop</span>=<span class="string">"name"</span>&gt;</span>标签<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;/<span class="name">header</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">%</span> <span class="attr">if</span> (<span class="attr">site.tags.length</span>) &#123; %&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"tag-cloud"</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"tag-cloud-title"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">%-</span> "<span class="attr">TOTAl</span> <span class="attr">:</span> " + <span class="attr">site.tags.length</span> %&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"tag-cloud-tags"</span>&gt;</span> </span><br><span class="line">        <span class="tag">&lt;<span class="name">%-</span> <span class="attr">tagcloud</span>(&#123;</span></span><br><span class="line"><span class="tag">          <span class="attr">min_font:</span> <span class="attr">12</span>,</span></span><br><span class="line"><span class="tag">          <span class="attr">max_font:</span> <span class="attr">30</span>,</span></span><br><span class="line"><span class="tag">          <span class="attr">amount:</span> <span class="attr">200</span>,</span></span><br><span class="line"><span class="tag">          <span class="attr">color:</span> <span class="attr">true</span>,</span></span><br><span class="line"><span class="tag">          <span class="attr">start_color:</span> '#<span class="attr">555</span>',</span></span><br><span class="line"><span class="tag">          <span class="attr">end_color:</span> '#<span class="attr">111</span>'</span></span><br><span class="line"><span class="tag">          &#125;) %&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">%</span> &#125; %&gt;</span></span><br><span class="line">  </span><br><span class="line"><span class="tag">&lt;/<span class="name">article</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>在 <code>categories.ejs</code> 添加如下代码：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">article</span> <span class="attr">class</span>=<span class="string">"article article-type-post show"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">header</span> <span class="attr">class</span>=<span class="string">"article-header"</span> <span class="attr">style</span>=<span class="string">"border-bottom: 1px solid #ccc"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h1</span> <span class="attr">class</span>=<span class="string">"article-title"</span> <span class="attr">itemprop</span>=<span class="string">"name"</span>&gt;</span>分类<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;/<span class="name">header</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">%</span> <span class="attr">if</span> (<span class="attr">site.categories.length</span>)&#123; %&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"category-all-page"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"category-all-title"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">%-</span> "<span class="attr">TOTAL</span> <span class="attr">:</span> " + <span class="attr">site.categories.length</span> %&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"> </span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"category-all"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">%-</span> <span class="attr">list_categories</span>() %&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"> </span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">%</span> &#125; %&gt;</span></span><br><span class="line">  </span><br><span class="line"><span class="tag">&lt;/<span class="name">article</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>接下来，和之前一样，加入css代码就行(可用过路径 <code>themes\yilia-plus\layout\_partial\css.ejs</code> 查看)。</p>
<hr>
]]></content>
      <categories>
        <category>网站</category>
        <category>Hexo</category>
      </categories>
      <tags>
        <tag>yilia</tag>
        <tag>标签分类</tag>
      </tags>
  </entry>
  <entry>
    <title>PHP（一）- 关于数组的创建和遍历！</title>
    <url>/archives/c5d93983.html</url>
    <content><![CDATA[<blockquote>
<p>本篇博客源自博主在<a href="https://www.php.cn/blog/detail/15494.html" target="_blank" rel="noopener">PHP中文网</a>上写的原文</p>
</blockquote>
<a id="more"></a>

<h1 id="PHP数组基本知识"><a href="#PHP数组基本知识" class="headerlink" title="PHP数组基本知识"></a>PHP数组基本知识</h1><h2 id="1-创建"><a href="#1-创建" class="headerlink" title="1.创建"></a>1.创建</h2><h3 id="1-1-索引数组"><a href="#1-1-索引数组" class="headerlink" title="1.1.索引数组"></a>1.1.索引数组</h3><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="comment">// 创建索引数组</span></span><br><span class="line">$movies = [<span class="string">'少年派'</span>, <span class="string">'带着爸爸去留学'</span>, <span class="string">'亲爱的, 热爱的'</span>];</span><br><span class="line">print_r($movies);</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="1-2-关联数组"><a href="#1-2-关联数组" class="headerlink" title="1.2.关联数组"></a>1.2.关联数组</h3><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">  $arr = <span class="keyword">array</span>(</span><br><span class="line">        <span class="string">'name1'</span> =&gt; <span class="string">'欧阳克'</span>,</span><br><span class="line">        <span class="string">'age1'</span>  =&gt; <span class="number">18</span>,</span><br><span class="line">        <span class="string">'name2'</span> =&gt; <span class="string">'黄蓉'</span>,</span><br><span class="line">        <span class="string">'age2'</span>  =&gt; <span class="number">16</span>,</span><br><span class="line">        <span class="string">'name3'</span> =&gt; <span class="string">'郭靖'</span>,</span><br><span class="line">        <span class="string">'age3'</span>  =&gt; <span class="number">22</span>,</span><br><span class="line">  );</span><br><span class="line">  var_dump($arr);</span><br><span class="line">  print_r($arr);</span><br><span class="line"></span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="1-3-二维数组"><a href="#1-3-二维数组" class="headerlink" title="1.3.二维数组"></a>1.3.二维数组</h3><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">  <span class="comment">// 二维数组：索引数组</span></span><br><span class="line">  $arr1 = [</span><br><span class="line">	[</span><br><span class="line">	  <span class="string">'红楼梦'</span>,</span><br><span class="line">	  <span class="string">'水浒传'</span>,</span><br><span class="line">	],</span><br><span class="line">	[</span><br><span class="line">	  <span class="string">'三国演义'</span>,</span><br><span class="line">	  <span class="string">'西游记'</span>,</span><br><span class="line">	],</span><br><span class="line">  ];</span><br><span class="line">  print_r($arr1);</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 二维数组：第一层索引数组，第二层关联数组</span></span><br><span class="line">  $arr2 = [</span><br><span class="line">      [</span><br><span class="line">	 <span class="string">'red'</span> =&gt; <span class="string">'红楼梦'</span>,</span><br><span class="line">	 <span class="string">'water'</span> =&gt; <span class="string">'水浒传'</span>,</span><br><span class="line">	],</span><br><span class="line">      [</span><br><span class="line">	 <span class="string">'three'</span> =&gt; <span class="string">'三国演义'</span>,</span><br><span class="line">	 <span class="string">'western'</span> =&gt; <span class="string">'西游记'</span>,</span><br><span class="line">	],</span><br><span class="line">  ];</span><br><span class="line">  print_r($arr2);</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 二维数组：关联数组</span></span><br><span class="line">  $arr3 = [</span><br><span class="line">	<span class="string">'one'</span> =&gt; [</span><br><span class="line">		<span class="string">'red'</span> =&gt; <span class="string">'红楼梦'</span>,</span><br><span class="line">		<span class="string">'water'</span> =&gt; <span class="string">'水浒传'</span>,</span><br><span class="line">	],</span><br><span class="line">	<span class="string">'two'</span> =&gt; [</span><br><span class="line">		<span class="string">'three'</span> =&gt; <span class="string">'三国演义'</span>,</span><br><span class="line">		<span class="string">'western'</span> =&gt; <span class="string">'西游记'</span>,</span><br><span class="line">	],</span><br><span class="line">  ];</span><br><span class="line">  print_r($arr3);</span><br><span class="line">  </span><br><span class="line">  <span class="comment">// 混写数组：一维数组 和 二维数组 混写</span></span><br><span class="line">  <span class="comment">// 二维数组 为其中 一维数组 的 值</span></span><br><span class="line">  $arr4 = [</span><br><span class="line">	<span class="string">'red'</span> =&gt; <span class="string">'红楼梦'</span>,</span><br><span class="line">	<span class="string">'water'</span> =&gt; <span class="string">'水浒传'</span>,</span><br><span class="line">	<span class="string">'two'</span> =&gt; [</span><br><span class="line">		<span class="string">'three'</span> =&gt; <span class="string">'三国演义'</span>,</span><br><span class="line">		<span class="string">'western'</span> =&gt; <span class="string">'西游记'</span>,</span><br><span class="line">	],</span><br><span class="line">  ];</span><br><span class="line">  print_r($arr4);</span><br><span class="line"></span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="2-数组的循环遍历"><a href="#2-数组的循环遍历" class="headerlink" title="2.数组的循环遍历"></a>2.数组的循环遍历</h2><h3 id="2-1-一维数组"><a href="#2-1-一维数组" class="headerlink" title="2.1.一维数组"></a>2.1.一维数组</h3><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="comment">// 1.数组 循环 混写</span></span><br><span class="line"><span class="comment">// var_dump() 函数可以输出结构（类型和值）</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 一维数组：数值数组（索引数组）</span></span><br><span class="line">$arr = [<span class="string">'欧阳'</span>, <span class="string">'司马'</span>, <span class="string">'诸葛'</span>, <span class="string">'西门'</span>];</span><br><span class="line"></span><br><span class="line"><span class="keyword">foreach</span> ($arr <span class="keyword">as</span> $key =&gt; $value) &#123;</span><br><span class="line">  <span class="comment"># . 为连接符，表示一个字符串</span></span><br><span class="line">  <span class="comment"># , 逗号，表示多个字符串</span></span><br><span class="line">  <span class="keyword">echo</span> <span class="string">"$key"</span> . <span class="string">":"</span> . <span class="string">"$value"</span> . <span class="string">"&lt;br&gt;"</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">echo</span> <span class="string">"&lt;hr&gt;"</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 一维数组：关联数组（索引自定义）</span></span><br><span class="line">$arr2 = [</span><br><span class="line">  <span class="string">'o'</span> =&gt; <span class="string">'欧阳'</span>,</span><br><span class="line">  <span class="string">'s'</span> =&gt; <span class="string">'司马'</span>,</span><br><span class="line">  <span class="string">'z'</span> =&gt; <span class="string">'诸葛'</span>,</span><br><span class="line">  <span class="string">'x'</span> =&gt; <span class="string">'西门'</span>,</span><br><span class="line">];</span><br><span class="line"></span><br><span class="line"><span class="keyword">foreach</span> ($arr2 <span class="keyword">as</span> $key =&gt; $value) &#123;</span><br><span class="line">  <span class="keyword">echo</span> <span class="string">"$key"</span> . <span class="string">":"</span> . <span class="string">"$value"</span> . <span class="string">"&lt;br&gt;"</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">echo</span> <span class="string">"&lt;hr&gt;"</span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="2-2-二维数组"><a href="#2-2-二维数组" class="headerlink" title="2.2.二维数组"></a>2.2.二维数组</h3><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="comment">// 二维数组：索引数组</span></span><br><span class="line">$arr3 = [</span><br><span class="line">	[</span><br><span class="line">	  <span class="string">'红楼梦'</span>,</span><br><span class="line">	  <span class="string">'水浒传'</span>,</span><br><span class="line">	],</span><br><span class="line">	[</span><br><span class="line">	  <span class="string">'三国演义'</span>,</span><br><span class="line">	  <span class="string">'西游记'</span>,</span><br><span class="line">	],</span><br><span class="line">];</span><br><span class="line"><span class="comment">// 第一层</span></span><br><span class="line"><span class="keyword">foreach</span> ($arr3 <span class="keyword">as</span> $key1 =&gt; $value1) &#123;</span><br><span class="line">  <span class="keyword">echo</span> <span class="string">"index1: $key1&lt;br&gt;value1: "</span>;</span><br><span class="line">  var_dump($value1);</span><br><span class="line">  <span class="keyword">echo</span> <span class="string">"&lt;br&gt;"</span>;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 第二层</span></span><br><span class="line">  <span class="keyword">foreach</span> ($value1 <span class="keyword">as</span> $key2 =&gt; $value2) &#123;</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">"index2: $key2"</span> . <span class="string">":"</span> . <span class="string">"value2: $value2"</span> . <span class="string">"&lt;br&gt;"</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">echo</span> <span class="string">"&lt;hr&gt;"</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 二维数组：第一层索引数组，第二层关联数组</span></span><br><span class="line">$arr4 = [</span><br><span class="line">	[</span><br><span class="line">	  <span class="string">'red'</span> =&gt; <span class="string">'红楼梦'</span>,</span><br><span class="line">	  <span class="string">'water'</span> =&gt; <span class="string">'水浒传'</span>,</span><br><span class="line">	],</span><br><span class="line">	[</span><br><span class="line">	  <span class="string">'three'</span> =&gt; <span class="string">'三国演义'</span>,</span><br><span class="line">	  <span class="string">'western'</span> =&gt; <span class="string">'西游记'</span>,</span><br><span class="line">	],</span><br><span class="line">];</span><br><span class="line"><span class="comment">// 第一层</span></span><br><span class="line"><span class="keyword">foreach</span> ($arr4 <span class="keyword">as</span> $key1 =&gt; $value1) &#123;</span><br><span class="line">  <span class="keyword">echo</span> <span class="string">"index1: $key1&lt;br&gt;value1: "</span>;</span><br><span class="line">  var_dump($value1);</span><br><span class="line">   <span class="keyword">echo</span> <span class="string">"&lt;br&gt;"</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 第二层</span></span><br><span class="line">    <span class="keyword">foreach</span> ($value1 <span class="keyword">as</span> $key2 =&gt; $value2) &#123;</span><br><span class="line">	 <span class="keyword">echo</span> <span class="string">"index2: $key2"</span> . <span class="string">":"</span> . <span class="string">"value2: $value2"</span> . <span class="string">"&lt;br&gt;"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">echo</span> <span class="string">"&lt;hr&gt;"</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 二维数组：关联数组</span></span><br><span class="line">$arr5 = [</span><br><span class="line">	<span class="string">'one'</span> =&gt; [</span><br><span class="line">	  <span class="string">'red'</span> =&gt; <span class="string">'红楼梦'</span>,</span><br><span class="line">	  <span class="string">'water'</span> =&gt; <span class="string">'水浒传'</span>,</span><br><span class="line">	],</span><br><span class="line">	<span class="string">'two'</span> =&gt; [</span><br><span class="line">	  <span class="string">'three'</span> =&gt; <span class="string">'三国演义'</span>,</span><br><span class="line">	  <span class="string">'western'</span> =&gt; <span class="string">'西游记'</span>,</span><br><span class="line">	],</span><br><span class="line">];</span><br><span class="line"></span><br><span class="line"><span class="comment">// 第一层</span></span><br><span class="line"><span class="keyword">foreach</span> ($arr5 <span class="keyword">as</span> $key1 =&gt; $value1) &#123;</span><br><span class="line">  <span class="keyword">echo</span> <span class="string">"index1: $key1&lt;br&gt;value1: "</span>;</span><br><span class="line">  var_dump($value1);</span><br><span class="line">  <span class="keyword">echo</span> <span class="string">"&lt;br&gt;"</span>;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 第二层</span></span><br><span class="line">  <span class="keyword">foreach</span> ($value1 <span class="keyword">as</span> $key2 =&gt; $value2) &#123;</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">"index2: $key2"</span> . <span class="string">":"</span> . <span class="string">"value2: $value2"</span> . <span class="string">"&lt;br&gt;"</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">echo</span> <span class="string">"&lt;hr&gt;"</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 混写数组：一维数组 和 二维数组 混写</span></span><br><span class="line"><span class="comment">// 二维数组 为其中 一维数组 的 值</span></span><br><span class="line">$arr6 = [</span><br><span class="line">	<span class="string">'red'</span> =&gt; <span class="string">'红楼梦'</span>,</span><br><span class="line">	<span class="string">'water'</span> =&gt; <span class="string">'水浒传'</span>,</span><br><span class="line">	<span class="string">'two'</span> =&gt; [</span><br><span class="line">	  <span class="string">'three'</span> =&gt; <span class="string">'三国演义'</span>,</span><br><span class="line">	  <span class="string">'western'</span> =&gt; <span class="string">'西游记'</span>,</span><br><span class="line">	],</span><br><span class="line">];</span><br><span class="line"></span><br><span class="line"><span class="keyword">foreach</span> ($arr6 <span class="keyword">as</span> $key1 =&gt; $value1) &#123;</span><br><span class="line">  <span class="comment"># 添加判断</span></span><br><span class="line">  <span class="keyword">if</span> (is_array($value1)) &#123;</span><br><span class="line">    <span class="keyword">foreach</span> ($value1 <span class="keyword">as</span> $key2 =&gt; $value2) &#123;</span><br><span class="line">      <span class="comment"># code...</span></span><br><span class="line">      <span class="keyword">echo</span> <span class="string">"index2: $key2"</span> . <span class="string">":"</span> . <span class="string">"value2: $value2"</span> . <span class="string">"&lt;br&gt;"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">"index1: $key1"</span> . <span class="string">":"</span> . <span class="string">"value1: $value1"</span> . <span class="string">"&lt;br&gt;"</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">echo</span> <span class="string">"&lt;hr&gt;"</span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="2-3-三维数组"><a href="#2-3-三维数组" class="headerlink" title="2.3.三维数组"></a>2.3.三维数组</h3><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="comment">// 三维数组的遍历</span></span><br><span class="line">$arr7 = [</span><br><span class="line">	<span class="string">'影视'</span> =&gt; [</span><br><span class="line">		<span class="string">'动漫'</span> =&gt; [</span><br><span class="line">			<span class="string">'热血'</span> =&gt; <span class="string">'火影忍者'</span>,</span><br><span class="line">			<span class="string">'暴力'</span> =&gt; <span class="string">'龙珠Z'</span>,</span><br><span class="line">			<span class="string">'科幻'</span> =&gt; <span class="string">'绝命响应'</span>,</span><br><span class="line">			<span class="string">'玄幻'</span> =&gt; <span class="string">'斗罗大陆'</span>,</span><br><span class="line">			<span class="string">'修仙'</span> =&gt; <span class="string">'西行纪'</span>,</span><br><span class="line">			<span class="string">'校园'</span> =&gt; <span class="string">'网球王子'</span>,</span><br><span class="line">		],</span><br><span class="line">		<span class="string">'电影'</span> =&gt; [</span><br><span class="line">			<span class="string">'动作'</span> =&gt; <span class="string">'战狼'</span>,</span><br><span class="line">			<span class="string">'喜剧'</span> =&gt; <span class="string">'港囧'</span>,</span><br><span class="line">			<span class="string">'科幻'</span> =&gt; <span class="string">'流浪地球'</span>,</span><br><span class="line">			<span class="string">'战争'</span> =&gt; <span class="string">'空天猎'</span>,</span><br><span class="line">			<span class="string">'惊悚'</span> =&gt; <span class="string">'午夜整容室'</span>,</span><br><span class="line">			<span class="string">'冒险'</span> =&gt; <span class="string">'机器之血'</span>,</span><br><span class="line">		],</span><br><span class="line">		<span class="string">'剧集'</span> =&gt; [</span><br><span class="line">			<span class="string">'玄幻'</span> =&gt; <span class="string">'将夜'</span>,</span><br><span class="line">			<span class="string">'喜剧'</span> =&gt; <span class="string">'医馆笑传'</span>,</span><br><span class="line">			<span class="string">'科幻'</span> =&gt; <span class="string">'闪电侠'</span>,</span><br><span class="line">			<span class="string">'诡战'</span> =&gt; <span class="string">'和平饭店'</span>,</span><br><span class="line">			<span class="string">'都市'</span> =&gt; <span class="string">'人间至味是清欢'</span>,</span><br><span class="line">			<span class="string">'校园'</span> =&gt; <span class="string">'小欢喜'</span>,</span><br><span class="line">		],</span><br><span class="line">	],</span><br><span class="line">	<span class="string">'书籍'</span> =&gt; [</span><br><span class="line">		<span class="string">'小说'</span> =&gt; [</span><br><span class="line">			<span class="string">'都市'</span> =&gt; <span class="string">'贴身保镖'</span>,</span><br><span class="line">			<span class="string">'末世'</span> =&gt; <span class="string">'末世之无上王座'</span>,</span><br><span class="line">			<span class="string">'网游'</span> =&gt; <span class="string">'灵恸'</span>,</span><br><span class="line">			<span class="string">'玄幻'</span> =&gt; <span class="string">'斗破苍穹'</span>,</span><br><span class="line">			<span class="string">'修仙'</span> =&gt; <span class="string">'凡人修仙传'</span>,</span><br><span class="line">			<span class="string">'同人'</span> =&gt; <span class="string">'火影之最强卡卡西'</span>,</span><br><span class="line">		],</span><br><span class="line">		<span class="string">'名著'</span> =&gt; [</span><br><span class="line">			<span class="string">'中国'</span> =&gt; <span class="string">'三国演义'</span>,</span><br><span class="line">			<span class="string">'法国'</span> =&gt; <span class="string">'悲惨世界'</span>,</span><br><span class="line">			<span class="string">'俄国'</span> =&gt; <span class="string">'战争与和平'</span>,</span><br><span class="line">			<span class="string">'澳大利亚'</span> =&gt; <span class="string">'荆棘鸟'</span>,</span><br><span class="line">		],</span><br><span class="line">	],</span><br><span class="line"></span><br><span class="line">];</span><br><span class="line"></span><br><span class="line"><span class="keyword">foreach</span> ($arr7 <span class="keyword">as</span> $key1 =&gt; $value1) &#123;</span><br><span class="line">	<span class="comment"># 添加判断</span></span><br><span class="line">	<span class="keyword">if</span> (is_array($value1)) &#123;</span><br><span class="line">		<span class="keyword">foreach</span> ($value1 <span class="keyword">as</span> $key2 =&gt; $value2) &#123;</span><br><span class="line">			<span class="keyword">if</span> (<span class="keyword">isset</span>($value2)) &#123;</span><br><span class="line">				<span class="keyword">foreach</span> ($value2 <span class="keyword">as</span> $key3 =&gt; $value3) &#123;</span><br><span class="line">					<span class="keyword">echo</span> <span class="string">"index3: $key3"</span> . <span class="string">":"</span> . <span class="string">"value3: $value3"</span> . <span class="string">"&lt;br&gt;"</span>;</span><br><span class="line">				&#125;</span><br><span class="line">				<span class="keyword">echo</span> <span class="string">"&lt;hr&gt;"</span>;</span><br><span class="line">			&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">				<span class="keyword">echo</span> <span class="string">"index2: $key2"</span> . <span class="string">":"</span> . <span class="string">"value2: $value2"</span> . <span class="string">"&lt;br&gt;"</span>;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">		<span class="keyword">echo</span> <span class="string">"index1: $key1"</span> . <span class="string">":"</span> . <span class="string">"value1: $value1"</span> . <span class="string">"&lt;br&gt;"</span>;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">echo</span> <span class="string">"&lt;hr&gt;"</span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>




<blockquote>
<p>CSDN博客 - <a href="https://blog.csdn.net/weixin_41599858/article/details/102539549" target="_blank" rel="noopener">PHP（一）- 关于数组的创建和遍历！</a></p>
</blockquote>
]]></content>
      <categories>
        <category>编程</category>
        <category>PHP</category>
      </categories>
      <tags>
        <tag>数组</tag>
      </tags>
  </entry>
  <entry>
    <title>PHP（三）- 匿名函数、命名空间以及类与对象的学习！</title>
    <url>/archives/25de20b7.html</url>
    <content><![CDATA[<blockquote>
<p>本篇博客来自博主在<a href="https://www.php.cn/blog/detail/15677.html" target="_blank" rel="noopener">php中文网</a>上写的一篇，这里做个记录。</p>
</blockquote>
<a id="more"></a>
<h1 id="1-匿名函数"><a href="#1-匿名函数" class="headerlink" title="1.匿名函数"></a>1.匿名函数</h1><h2 id="1-1-解释："><a href="#1-1-解释：" class="headerlink" title="1.1.解释："></a>1.1.解释：</h2><ul>
<li>匿名函数也叫闭包函数，即不指定函数名；</li>
<li>匿名函数不能直接调用，需要先将匿名函数赋值给一个变量，然后由变量来调用；</li>
<li>因为是赋值给一个变量，末尾要加“;”，这也是与普通函数的区别之一。</li>
</ul>
<h2 id="1-2-优点："><a href="#1-2-优点：" class="headerlink" title="1.2.优点："></a>1.2.优点：</h2><ul>
<li>因为匿名，开发者不需要花费心思，去想一个见名知意又简单名字来表示；</li>
<li>只在调用时，临时创建，用完立即释放，不像其他函数那样即便未调用也占内存空间；</li>
</ul>
<h2 id="1-3-应用场景："><a href="#1-3-应用场景：" class="headerlink" title="1.3.应用场景："></a>1.3.应用场景：</h2><ul>
<li><p>作为值，参与计算</p>
</li>
<li><p>作为函数回调</p>
</li>
<li><p>闭包</p>
</li>
</ul>
<h2 id="1-4-简单演示："><a href="#1-4-简单演示：" class="headerlink" title="1.4.简单演示："></a>1.4.简单演示：</h2><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="comment">// 场景1：作为值</span></span><br><span class="line">$sum = <span class="function"><span class="keyword">function</span> <span class="params">($a, $b)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> $a + $b;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 按值调用</span></span><br><span class="line"><span class="keyword">echo</span> $sum(<span class="number">66</span>, <span class="number">99</span>);</span><br><span class="line"><span class="keyword">echo</span> <span class="string">"&lt;hr&gt;"</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 场景2：作为 回调用</span></span><br><span class="line">$arr = [<span class="number">3</span>, <span class="number">2</span>, <span class="number">6</span>, <span class="number">1</span>, <span class="number">8</span>, <span class="number">9</span>];</span><br><span class="line">usort($arr, <span class="function"><span class="keyword">function</span> <span class="params">($a, $b)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> $b - $a;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="keyword">echo</span> <span class="string">'&lt;pre&gt;'</span> . print_r($arr, <span class="keyword">true</span>);</span><br><span class="line"><span class="keyword">echo</span> <span class="string">'&lt;hr&gt;'</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 场景3：闭包</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">demo</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  <span class="comment">// 父作用域中的变量</span></span><br><span class="line">  $email = <span class="string">'alfred@outlook.com'</span>;</span><br><span class="line">  <span class="comment">// func: 匿名子函数</span></span><br><span class="line">  <span class="keyword">return</span> <span class="function"><span class="keyword">function</span> <span class="params">()</span> <span class="title">use</span> <span class="params">($email)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> $email;</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">echo</span> demo()();</span><br><span class="line"><span class="keyword">echo</span> <span class="string">'&lt;hr&gt;'</span>;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>

<h1 id="2-命名空间"><a href="#2-命名空间" class="headerlink" title="2.命名空间"></a>2.命名空间</h1><h2 id="2-1-解释："><a href="#2-1-解释：" class="headerlink" title="2.1.解释："></a>2.1.解释：</h2><ul>
<li>命名空间是一种封装事物的方法；</li>
<li>在程序语言中开辟一段代码空间，不同空间的对象名相互独立，互不冲突；</li>
<li>第一个命名空间前不能有任何代码，一般，命名空间定义为脚本第一行代码；</li>
<li>调用不同空间内类或方法需写明命名空间；</li>
</ul>
<h2 id="2-2-作用："><a href="#2-2-作用：" class="headerlink" title="2.2.作用："></a>2.2.作用：</h2><ul>
<li>避免开发者在项目中定义的类名、函数名或变量出现重复冲突；</li>
<li>为很长的标识符名称 创建一个别名 ，提高源代码的可读性；</li>
</ul>
<h2 id="2-3-演示："><a href="#2-3-演示：" class="headerlink" title="2.3.演示："></a>2.3.演示：</h2><p><strong>语法：</strong></p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="comment">// 写法一</span></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">blue</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Test</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 写法二</span></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">green</span>&#123;</span><br><span class="line">  <span class="title">class</span> <span class="title">Test</span></span><br><span class="line">  &#123;</span><br><span class="line">    // ...</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>

<p><strong>简单使用</strong></p>
<p>在func.php文件中写入：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">_demo_01</span>;</span><br><span class="line"><span class="comment">// 匿名函数与闭包</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 命名函数</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">sum</span><span class="params">($a, $b)</span> </span>&#123;</span><br><span class="line">	<span class="keyword">return</span> $a + $b;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>
<p>在 transfer.php文件中写入：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">_demo_02</span>; <span class="comment">// 命名空间必须是脚本的第一行代码</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 如果引入同名函数，程序会报错，</span></span><br><span class="line"><span class="comment">// 解决方法，使用 命名空间</span></span><br><span class="line"><span class="keyword">include</span> <span class="keyword">__DIR__</span> . <span class="string">'./func.php'</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 对象</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">sum</span><span class="params">($a, $b)</span> </span>&#123;</span><br><span class="line">	<span class="keyword">return</span> $a + $b;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// \ 表示全局空间</span></span><br><span class="line"><span class="keyword">echo</span> <span class="keyword">namespace</span>\<span class="title">sum</span>(20, 66);</span><br><span class="line"><span class="keyword">echo</span> <span class="string">'&lt;hr&gt;'</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 访问另一个空间的函数</span></span><br><span class="line"><span class="keyword">echo</span> \_demo_01\sum(<span class="number">88</span>, <span class="number">99</span>);</span><br><span class="line"><span class="keyword">echo</span> <span class="string">'&lt;hr&gt;'</span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>

<h1 id="3-类与对象"><a href="#3-类与对象" class="headerlink" title="3.类与对象"></a>3.类与对象</h1><h2 id="3-1-解释："><a href="#3-1-解释：" class="headerlink" title="3.1.解释："></a>3.1.解释：</h2><ol>
<li><p>对象：一切事物皆对象，对象是用来描述客观事物的一个实体。</p>
</li>
<li><p>类：类是把具有相似特性的对象归纳到一个抽象类中，即一组相同属性和行为的对象的集合。</p>
</li>
<li><p>类和对象的关系如下：<br>类是相似对象的统一描述，类就是对象的一个模板；<br>先有类，再有对象；<br>类是对象的抽象；<br>对象是类的实例。</p>
</li>
</ol>
<h2 id="3-2-使用："><a href="#3-2-使用：" class="headerlink" title="3.2.使用："></a>3.2.使用：</h2><ol>
<li><p>在php中，通过关键字class来创建和声明一个类（其他语言基本类似），</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span></span>&#123;</span><br><span class="line">    <span class="comment">//成员属性和方法</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 属性：变量</span></span><br><span class="line"></span><br><span class="line">   <span class="comment">// 方法：函数 </span></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>使用new 关键字 实列化 类</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">$obj = <span class="keyword">new</span> People();</span><br></pre></td></tr></table></figure>
</li>
<li><p>演示：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="comment">// 类的声明</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">People</span> </span>&#123;</span><br><span class="line">	<span class="comment">// ...成员属性和方法</span></span><br><span class="line">	<span class="comment">// 属性：变量</span></span><br><span class="line">	<span class="keyword">public</span> $name = <span class="string">'alfred'</span>;</span><br><span class="line">	<span class="comment">// 方法：函数</span></span><br><span class="line">	<span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">sleep</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		<span class="keyword">echo</span> <span class="string">"&#123;$this-&gt;name&#125; is going to sleep...&lt;br/&gt;"</span>;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 实列化 new</span></span><br><span class="line">$obj = <span class="keyword">new</span> People();</span><br><span class="line"></span><br><span class="line">var_dump($obj);</span><br><span class="line"><span class="keyword">echo</span> <span class="string">'&lt;br&gt;'</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">echo</span> <span class="string">'name = '</span> . $obj-&gt;name . <span class="string">'&lt;br&gt;'</span>;</span><br><span class="line">$obj-&gt;sleep();</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>

</li>
</ol>
<blockquote>
<p>CSDN博客 - <a href="https://blog.csdn.net/weixin_41599858/article/details/102539902" target="_blank" rel="noopener">PHP（三）- 匿名函数、命名空间以及类与对象的学习！</a></p>
</blockquote>
]]></content>
      <categories>
        <category>编程</category>
        <category>PHP</category>
      </categories>
      <tags>
        <tag>类与对象</tag>
        <tag>匿名函数</tag>
        <tag>命名空间</tag>
      </tags>
  </entry>
  <entry>
    <title>PHP（二）- 前后端交互！</title>
    <url>/archives/29af8599.html</url>
    <content><![CDATA[<blockquote>
<p><strong>html与php混编:</strong></p>
</blockquote>
<a id="more"></a>
<ul>
<li>如果想让web服务器能自动转发这些请求, 文档的扩展名就不能是.html, 必须是.php</li>
<li>遇到一个<?php ?>就转发一个cgi请求, 不管这些标签出现在当前文档的什么地方</li>
<li>用户最终看到的,仍然是一个html文档, php代码中的内容不会被泄漏的</li>
</ul>
<h1 id="http请求类型"><a href="#http请求类型" class="headerlink" title="http请求类型"></a>http请求类型</h1><blockquote>
<p>最常用的就是GET和POST二种请求类型</p>
</blockquote>
<h2 id="1、GET-请求"><a href="#1、GET-请求" class="headerlink" title="1、GET 请求"></a>1、GET 请求</h2><ul>
<li>请求参数以键值对的方式,附加到url地址上,称为查询字符串,用?号与当前脚本分隔 ;</li>
<li>url格式:index.php?name=peter&amp;age=30 ;</li>
<li>受url长度限制, GET方式传递的数据也是有限制的;</li>
<li>服务器端脚本使用预定义变量数组 $_GET 进行接收.</li>
</ul>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html lang=<span class="string">"en"</span>&gt;</span><br><span class="line">	&lt;head&gt;</span><br><span class="line">		&lt;meta charset=<span class="string">"UTF-8"</span>&gt;</span><br><span class="line">		&lt;title&gt;get&lt;/title&gt;</span><br><span class="line">	&lt;/head&gt;</span><br><span class="line">	&lt;body&gt;</span><br><span class="line">		&lt;form action=<span class="string">""</span> method=<span class="string">"get"</span>&gt;</span><br><span class="line">			&lt;label <span class="keyword">for</span>=<span class="string">"email"</span>&gt;邮箱:&lt;/label&gt;</span><br><span class="line">			&lt;input type=<span class="string">"email"</span> id=<span class="string">"email"</span> name=<span class="string">"email"</span> value=<span class="string">""</span>&gt;</span><br><span class="line">			&lt;label <span class="keyword">for</span>=<span class="string">"password"</span>&gt;密码:&lt;/label&gt;</span><br><span class="line">			&lt;input type=<span class="string">"password"</span> id=<span class="string">"password"</span> name=<span class="string">"password"</span> value=<span class="string">""</span>&gt;</span><br><span class="line">			&lt;br/&gt;</span><br><span class="line"></span><br><span class="line">			&lt;!--将用户输入的内容动态添加到value字段中, 创建具有粘性的表单--&gt;</span><br><span class="line">			&lt;label <span class="keyword">for</span>=<span class="string">"email"</span>&gt;邮箱:&lt;/label&gt;</span><br><span class="line">			&lt;input type=<span class="string">"email"</span> id=<span class="string">"email"</span> name=<span class="string">"email"</span> value=<span class="string">"&lt;?php echo isset($_GET['email']) ? $_GET['email'] : ''; ?&gt;"</span>&gt;</span><br><span class="line">			&lt;label <span class="keyword">for</span>=<span class="string">"password"</span>&gt;密码:&lt;/label&gt;</span><br><span class="line">			&lt;input type=<span class="string">"password"</span> id=<span class="string">"password"</span> name=<span class="string">"password"</span> value=<span class="string">"&lt;?php echo isset($_GET['password']) ? $_GET['password'] : '';?&gt;"</span>&gt;</span><br><span class="line">			&lt;br/&gt;</span><br><span class="line"></span><br><span class="line">			&lt;!--简易写法--&gt;</span><br><span class="line">			&lt;label <span class="keyword">for</span>=<span class="string">"email"</span>&gt;邮箱:&lt;/label&gt;</span><br><span class="line">			&lt;input type=<span class="string">"email"</span> id=<span class="string">"email"</span> name=<span class="string">"email"</span> value=<span class="string">"&lt;?php echo $_GET['email'] ?? ''; ?&gt;"</span>&gt;</span><br><span class="line">			&lt;label <span class="keyword">for</span>=<span class="string">"password"</span>&gt;密码:&lt;/label&gt;</span><br><span class="line">			&lt;input type=<span class="string">"password"</span> id=<span class="string">"password"</span> name=<span class="string">"password"</span> value=<span class="string">"&lt;?php echo $_GET['password'] ?? ''; ?&gt;"</span>&gt;</span><br><span class="line"></span><br><span class="line">			&lt;button&gt;登录&lt;/button&gt;</span><br><span class="line">		&lt;/form&gt;</span><br><span class="line">	&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br><span class="line"></span><br><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">	<span class="comment">// 获取通过url发送的变量参数, php通过超全局变量$_GET获取</span></span><br><span class="line">	<span class="comment">// $_GET是一个数组,键名就是get参数名</span></span><br><span class="line">	<span class="comment">// 键名=&gt;变量名, 值=&gt;变量值</span></span><br><span class="line"></span><br><span class="line">	<span class="comment">// print_r()格式化打印输出一个数组</span></span><br><span class="line">	print_r($_GET);</span><br><span class="line">	<span class="keyword">echo</span> $_GET[<span class="string">'email'</span>];</span><br><span class="line"></span><br><span class="line">	<span class="comment">// 获取变量之前要进行判断,用isset()</span></span><br><span class="line">	<span class="keyword">if</span> (<span class="keyword">isset</span>($_GET[<span class="string">'email'</span>])) &#123;</span><br><span class="line">		<span class="keyword">echo</span> $_GET[<span class="string">'email'</span>];</span><br><span class="line">	&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">		<span class="comment">// 给个默认值</span></span><br><span class="line">		$_GET[<span class="string">'email'</span>] = <span class="string">''</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="comment">// 与js类似,可以用三元运算符进行简化</span></span><br><span class="line">	<span class="keyword">echo</span> <span class="keyword">isset</span>($_GET[<span class="string">'email'</span>]) ? $_GET[<span class="string">'email'</span>] : <span class="string">''</span>;</span><br><span class="line"></span><br><span class="line">	<span class="comment">// 使用&lt;pre&gt;标签,在网页中可以实现格式化输出</span></span><br><span class="line">	<span class="keyword">echo</span> <span class="string">'&lt;pre&gt;'</span>;</span><br><span class="line">	print_r($_GET);</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="2、POST-请求"><a href="#2、POST-请求" class="headerlink" title="2、POST 请求"></a>2、POST 请求</h2><ul>
<li>请求参数放在header请求头中发送, url地址看不到请求参数,适合敏感信息;</li>
<li>通常是通过表单提交并, 用来更新服务器上的信息;</li>
<li>适合发送大量的数据到服务器端, 长度受到配置文件限制,但比GET要大得多;</li>
<li>服务器端脚本使用预定义变量数组 $_POST 进行接收.</li>
</ul>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html lang=<span class="string">"en"</span>&gt;</span><br><span class="line">	&lt;head&gt;</span><br><span class="line">		&lt;meta charset=<span class="string">"UTF-8"</span>&gt;</span><br><span class="line">		&lt;title&gt;post&lt;/title&gt;</span><br><span class="line">	&lt;/head&gt;</span><br><span class="line">	&lt;body&gt;</span><br><span class="line">		&lt;form action=<span class="string">""</span> method=<span class="string">"post"</span>&gt;</span><br><span class="line">			&lt;label <span class="keyword">for</span>=<span class="string">"email"</span>&gt;邮箱:&lt;/label&gt;</span><br><span class="line">			&lt;!--将用户输入的内容动态添加到value字段中, 创建具有粘性的表单--&gt;</span><br><span class="line">			&lt;input type=<span class="string">"email"</span> id=<span class="string">"email"</span> name=<span class="string">"email"</span> value=<span class="string">"&lt;?php echo isset($_POST['email']) ? $_POST['email'] : ''; ?&gt;"</span>&gt;</span><br><span class="line">			&lt;label <span class="keyword">for</span>=<span class="string">"password"</span>&gt;密码:&lt;/label&gt;</span><br><span class="line">			&lt;input type=<span class="string">"password"</span> id=<span class="string">"password"</span> name=<span class="string">"password"</span> value=<span class="string">"&lt;?php echo isset($_POST['email']) ? $_POST['email'] : '';?&gt;"</span>&gt;</span><br><span class="line"></span><br><span class="line">			&lt;button&gt;登录&lt;/button&gt;</span><br><span class="line">		&lt;/form&gt;</span><br><span class="line">	&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br><span class="line"></span><br><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">	<span class="comment">// POST请求, 参数不是通过URL传递, 而是通过请求头</span></span><br><span class="line">	<span class="comment">// 获取通过url发送的变量参数, php通过超全局变量$_POST获取</span></span><br><span class="line">	<span class="comment">// $_POST是一个数组,键名就是POST参数名</span></span><br><span class="line">	<span class="comment">// 键名=&gt;变量名, 值=&gt;变量值</span></span><br><span class="line"></span><br><span class="line">	<span class="comment">// print_r()格式化打印输出一个数组</span></span><br><span class="line">	print_r($_POST);</span><br><span class="line">	<span class="keyword">echo</span> $_POST[<span class="string">'email'</span>];</span><br><span class="line">	<span class="comment">// 获取变量之前要进行判断,用isset()</span></span><br><span class="line">	<span class="keyword">if</span> (<span class="keyword">isset</span>($_POST[<span class="string">'email'</span>])) &#123;</span><br><span class="line">		<span class="keyword">echo</span> $_POST[<span class="string">'email'</span>];</span><br><span class="line">	&#125; <span class="keyword">else</span> &#123;  <span class="comment">// 给个默认值</span></span><br><span class="line">		$_POST[<span class="string">'email'</span>] = <span class="string">''</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="comment">// 与js类似,可以用三元运算符进行简化</span></span><br><span class="line">	<span class="keyword">echo</span> <span class="keyword">isset</span>($_POST[<span class="string">'email'</span>]) ? $_POST[<span class="string">'email'</span>] : <span class="string">''</span>;</span><br><span class="line"></span><br><span class="line">	<span class="comment">// 使用&lt;pre&gt;标签,在网页中可以实现格式化输出</span></span><br><span class="line">	<span class="keyword">echo</span> <span class="string">'&lt;pre&gt;'</span>;</span><br><span class="line">	print_r($_POST);</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>


<blockquote>
<p>详细资料，可参考：<a href="https://www.php.cn/" target="_blank" rel="noopener">php中文网</a></p>
</blockquote>
<blockquote>
<p>CSDN博客 - <a href="https://blog.csdn.net/weixin_41599858/article/details/102539707" target="_blank" rel="noopener">PHP（二）- 前后端交互！</a></p>
</blockquote>
]]></content>
      <categories>
        <category>编程</category>
        <category>PHP</category>
      </categories>
      <tags>
        <tag>前后端交互</tag>
      </tags>
  </entry>
  <entry>
    <title>PHP（五）- 类属性与类方法的重载以及回调执行方法！</title>
    <url>/archives/7d71ab32.html</url>
    <content><![CDATA[<blockquote>
<p>本篇博客移值自博主在PHP中文网上写的原文，这里做个记录</p>
</blockquote>
<a id="more"></a>

<h1 id="1-属性重载"><a href="#1-属性重载" class="headerlink" title="1.属性重载"></a>1.属性重载</h1><p><strong>主要使用以下四种魔术方法实现属性重载：</strong></p>
<ul>
<li><p>__get()：读操作,</p>
</li>
<li><p>__set()：写操作,</p>
</li>
<li><p>__isset()：判断是否有值, </p>
</li>
<li><p>__unset()：释放变量</p>
</li>
</ul>
<p><strong>演示：</strong></p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@authors</span> Alfred (jusheng_yao<span class="doctag">@outlook</span>.com)</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span>    2019-10-09 22:08:35</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@version</span> 1.0</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 属性重载：__get(), __set(), __isset(), __unset()</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">UserInfo</span> </span>&#123;</span><br><span class="line">	<span class="keyword">public</span> $name;</span><br><span class="line">	<span class="keyword">private</span> $salary = <span class="number">9999</span>;</span><br><span class="line">	<span class="keyword">protected</span> $password;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span><span class="params">($name, $password)</span> </span>&#123;</span><br><span class="line">		<span class="comment">// 对象的引用</span></span><br><span class="line">		<span class="keyword">$this</span>-&gt;name = $name;</span><br><span class="line">		<span class="keyword">$this</span>-&gt;password = $password;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="comment">// 属性重载方法：由系统调用</span></span><br><span class="line">	<span class="comment">// 1. __get(): 重载了用户对属性的访问，即读操作</span></span><br><span class="line">	<span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__get</span><span class="params">($name)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">return</span> (<span class="keyword">$this</span>-&gt;name === <span class="string">'admin'</span>) ? <span class="keyword">$this</span>-&gt;$name : <span class="string">'权限不够！'</span>;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="comment">// 2. __set($name, $value): 写操作</span></span><br><span class="line">	<span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__set</span><span class="params">($name, $value)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">if</span> ($name === <span class="string">'salary'</span>) &#123;</span><br><span class="line">      <span class="keyword">if</span> (<span class="keyword">$this</span>-&gt;name === <span class="string">'admin'</span>)&#123;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;$name = $value;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">"工资更新成功！&lt;br&gt;"</span>;</span><br><span class="line">      &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">'工资更新需要权限！&lt;br&gt;'</span>;</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">			<span class="comment">// return ($this-&gt;name === 'admin') ? ($this-&gt;$name = $value) : '工资更新需要权限！';</span></span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">return</span> <span class="keyword">$this</span>-&gt;$name = $value;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="comment">// 3. __isset($name)：判断是否有值</span></span><br><span class="line">	<span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__isset</span><span class="params">($name)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">return</span> <span class="keyword">isset</span>(<span class="keyword">$this</span>-&gt;$name);</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="comment">//4. __unset($name)：释放资源</span></span><br><span class="line">	<span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__unset</span><span class="params">($name)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">unset</span>(<span class="keyword">$this</span>-&gt;$name);</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">$obj = <span class="keyword">new</span> UserInfo(<span class="string">'大师兄'</span>, <span class="string">'123456'</span>);</span><br><span class="line">$obj1 = <span class="keyword">new</span> UserInfo(<span class="string">'admin'</span>, <span class="string">'123456'</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 1.读操作</span></span><br><span class="line"><span class="keyword">echo</span> $obj-&gt;salary . <span class="string">'&lt;hr&gt;'</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 2.写操作</span></span><br><span class="line"><span class="keyword">echo</span> ($obj-&gt;salary = <span class="number">15000</span>);</span><br><span class="line"><span class="keyword">echo</span> <span class="string">'&lt;hr&gt;'</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 3.判断是否有值</span></span><br><span class="line"><span class="keyword">echo</span> <span class="keyword">isset</span>($obj-&gt;name);</span><br><span class="line"><span class="keyword">echo</span> <span class="string">'&lt;hr&gt;'</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 4.释放变量</span></span><br><span class="line"><span class="keyword">unset</span>($obj-&gt;password);</span><br><span class="line"><span class="keyword">echo</span> <span class="string">'&lt;hr&gt;'</span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>

<h1 id="2-方法重载"><a href="#2-方法重载" class="headerlink" title="2.方法重载"></a>2.方法重载</h1><p><strong>以魔术方法<strong>call()、</strong>callStatic()分别实现对普通方法和静态方法的重载</strong></p>
<p><strong>演示：</strong></p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@authors</span> Alfred (jusheng_yao<span class="doctag">@outlook</span>.com)</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span>    2019-10-09 22:08:40</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@version</span> 1.0</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 方法重载: __call()、__callStatic()</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">TestDemo</span> </span>&#123;</span><br><span class="line">	<span class="comment">// __call(): 访问一个不存在或无权限访问的方法的时候会自动调用</span></span><br><span class="line">	<span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__call</span><span class="params">($name, $args)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">return</span> <span class="string">'方法是: '</span> . $name . <span class="string">'&lt;br&gt;参数列表: &lt;pre&gt;'</span> . print_r($args, <span class="keyword">true</span>);</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="comment">// __callStatic(): 访问一个不存在或无权限访问的静态方法的时候会自动调用</span></span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">static</span> <span class="function"><span class="keyword">function</span> <span class="title">__callStatic</span><span class="params">($name, $args)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">return</span> <span class="string">'方法是: '</span> . $name . <span class="string">'&lt;br&gt;参数列表: &lt;pre&gt;'</span> . print_r($args, <span class="keyword">true</span>);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">$obj = <span class="keyword">new</span> TestDemo();</span><br><span class="line"><span class="keyword">echo</span> $obj-&gt;getInfo1(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">echo</span> <span class="string">'&lt;hr&gt;'</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">echo</span> TestDemo::getInfo2(<span class="string">'html'</span>, <span class="string">'css'</span>, <span class="string">'js'</span>, <span class="string">'ES6'</span>, <span class="string">'vue'</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>

<h1 id="3-回调执行"><a href="#3-回调执行" class="headerlink" title="3.回调执行"></a>3.回调执行</h1><p><strong>实现方法</strong></p>
<ul>
<li><code>call_user_func()</code></li>
<li><code>call_user_func_array()</code></li>
</ul>
<p><strong>作用：</strong></p>
<ul>
<li>实现对函数和类方法（包括普通和静态方法）的回调</li>
</ul>
<p><strong>演示：</strong></p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@authors</span> Alfred (jusheng_yao<span class="doctag">@outlook</span>.com)</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span>    2019-10-13 12:08:35</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@version</span> 1.0</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">_1008</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 函数</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">sum</span><span class="params">($a, $b)</span> </span>&#123;</span><br><span class="line">	<span class="keyword">return</span> <span class="string">"&#123;$a&#125; + &#123;$b&#125; = "</span> . ($a + $b);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 类</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</span><br><span class="line">	<span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">reduce</span><span class="params">($a, $b)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">return</span> <span class="string">"&#123;$a&#125; - &#123;$b&#125; = "</span> . ($a - $b);</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">static</span> <span class="function"><span class="keyword">function</span> <span class="title">multiply</span><span class="params">($a, $b)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">return</span> <span class="string">"&#123;$a&#125; x &#123;$b&#125; = "</span> . ($a * $b);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 执行回调方法</span></span><br><span class="line"><span class="keyword">echo</span> call_user_func(<span class="keyword">__NAMESPACE__</span> . <span class="string">'\sum'</span>, <span class="number">11</span>, <span class="number">22</span>);</span><br><span class="line"><span class="keyword">echo</span> <span class="string">"&lt;hr&gt;"</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 执行回调方法 - 数组</span></span><br><span class="line"><span class="keyword">echo</span> call_user_func_array(<span class="keyword">__NAMESPACE__</span> . <span class="string">'\sum'</span>, [<span class="number">1</span>, <span class="number">2</span>]);</span><br><span class="line"><span class="keyword">echo</span> <span class="string">"&lt;hr&gt;"</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 执行回调对象中的公共方法</span></span><br><span class="line"><span class="keyword">echo</span> call_user_func_array([<span class="keyword">new</span> Test(), <span class="string">'reduce'</span>], [<span class="number">22</span>, <span class="number">11</span>]);</span><br><span class="line"><span class="keyword">echo</span> <span class="string">"&lt;hr&gt;"</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 执行回调对象中的静态方法</span></span><br><span class="line"><span class="keyword">echo</span> call_user_func_array(<span class="keyword">__NAMESPACE__</span> . <span class="string">'\Test::multiply'</span>, [<span class="number">11</span>, <span class="number">11</span>]);</span><br><span class="line"><span class="keyword">echo</span> <span class="string">"&lt;br&gt;"</span>;</span><br><span class="line"><span class="comment">// 或者 使用 ::class</span></span><br><span class="line"><span class="keyword">echo</span> call_user_func_array([Test::class, <span class="string">'multiply'</span>], [<span class="number">11</span>, <span class="number">12</span>]);</span><br><span class="line"><span class="keyword">echo</span> <span class="string">"&lt;hr&gt;"</span>;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>编程</category>
        <category>PHP</category>
      </categories>
      <tags>
        <tag>类属性</tag>
        <tag>方法重载</tag>
      </tags>
  </entry>
  <entry>
    <title>PHP（六）- 抽象类的继承与MySQL接口CURD操作的实现！</title>
    <url>/archives/f1afa15c.html</url>
    <content><![CDATA[<blockquote>
<p>本篇博客移值自博主在PHP中文网上写的原文，这里做个记录</p>
</blockquote>
<a id="more"></a>

<h1 id="1-抽象类继承"><a href="#1-抽象类继承" class="headerlink" title="1.抽象类继承"></a>1.抽象类继承</h1><h2 id="1-1-抽象类特点"><a href="#1-1-抽象类特点" class="headerlink" title="1.1. 抽象类特点"></a>1.1. 抽象类特点</h2><ol>
<li>抽象类不能实例化;</li>
<li>抽象类中定义的抽象方法必须在子类中实现;</li>
<li>如果子类定义了构造函数，父类的构造函数不会被调用，如果需要，构造函数中要写 <code>parent::__construct()</code>。</li>
</ol>
<h2 id="1-2-演示"><a href="#1-2-演示" class="headerlink" title="1.2. 演示"></a>1.2. 演示</h2><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@authors</span> Alfred (jusheng_yao<span class="doctag">@outlook</span>.com)</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span>    2019-10-13 19:01:49</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@version</span> 1.0</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 抽象类</span></span><br><span class="line"><span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">People</span> </span>&#123;</span><br><span class="line">	<span class="comment">// 抽象属性</span></span><br><span class="line">	<span class="keyword">protected</span> $name;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span><span class="params">($name = <span class="string">'Alfred'</span>)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">$this</span>-&gt;name = $name;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">getName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		<span class="keyword">return</span> <span class="keyword">$this</span>-&gt;name;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="comment">// 签名, 抽象方法</span></span><br><span class="line">	<span class="keyword">abstract</span> <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">setName</span><span class="params">($value)</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span> <span class="keyword">extends</span> <span class="title">People</span> </span>&#123;</span><br><span class="line">	<span class="comment">//构造方法不会继承</span></span><br><span class="line">	<span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span><span class="params">($name)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">parent</span>::__construct($name);</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="comment">//抽象类中定义的抽象方法必须在子类中实现</span></span><br><span class="line">	<span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">setName</span><span class="params">($value)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">$this</span>-&gt;name = $value;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">$person = <span class="keyword">new</span> Person(<span class="string">'轻狂书生'</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">echo</span> <span class="string">'网游中的一个重要角色是： '</span> . $person-&gt;getName() . <span class="string">'&lt;br&gt;'</span>;</span><br><span class="line"></span><br><span class="line">$person-&gt;setName(<span class="string">"残雪飞戈"</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">echo</span> <span class="string">'Alfred 的QQ网名是： '</span> . $person-&gt;getName() . <span class="string">'&lt;br&gt;'</span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>

<h1 id="2-数据库接口"><a href="#2-数据库接口" class="headerlink" title="2.数据库接口"></a>2.数据库接口</h1><ul>
<li>接口放置空方法;</li>
<li>DB类实现具体逻辑，如:<ul>
<li>增删改查、</li>
<li>条件、</li>
<li>限制、</li>
<li>字段域、</li>
<li>默认数据库参数属性等等</li>
</ul>
</li>
</ul>
<p><strong>实例演示：</strong></p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@authors</span> Alfred (jusheng_yao<span class="doctag">@outlook</span>.com)</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span>    2019-10-13 20:53:31</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@version</span> 1.0</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 接口，类的模板</span></span><br><span class="line"><span class="class"><span class="keyword">interface</span> <span class="title">MySQL</span> </span>&#123;</span><br><span class="line">	<span class="comment">// 增加数据</span></span><br><span class="line">	<span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">create</span><span class="params">($data)</span></span>;</span><br><span class="line"></span><br><span class="line">	<span class="comment">// 读取数据</span></span><br><span class="line">	<span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">read</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">	<span class="comment">// 更新数据</span></span><br><span class="line">	<span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">update</span><span class="params">($data, $where)</span></span>;</span><br><span class="line"></span><br><span class="line">	<span class="comment">// 删除数据</span></span><br><span class="line">	<span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">delete</span><span class="params">($where)</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 类，接口的实现</span></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * mysql CURD操作</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">SQLAction</span> <span class="keyword">implements</span> <span class="title">MySQL</span> </span>&#123;</span><br><span class="line">	<span class="comment">// 数据库连接参数</span></span><br><span class="line">	<span class="keyword">protected</span> $settings = [</span><br><span class="line">		<span class="string">'type'</span> =&gt; <span class="string">'mysql'</span>,</span><br><span class="line">		<span class="string">'host'</span> =&gt; <span class="string">'localhost'</span>,</span><br><span class="line">		<span class="string">'dbname'</span> =&gt; <span class="string">'tests'</span>,</span><br><span class="line">		<span class="string">'username'</span> =&gt; <span class="string">'root'</span>,</span><br><span class="line">		<span class="string">'password'</span> =&gt; <span class="string">'123456'</span>,</span><br><span class="line">	];</span><br><span class="line"></span><br><span class="line">	<span class="comment">// 数据库的连接对象</span></span><br><span class="line">	<span class="keyword">protected</span> $pdo = <span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line">	<span class="comment">// 数据表</span></span><br><span class="line">	<span class="keyword">protected</span> $table;</span><br><span class="line"></span><br><span class="line">	<span class="comment">// 字段</span></span><br><span class="line">	<span class="keyword">public</span> $field = <span class="string">'*'</span>;</span><br><span class="line"></span><br><span class="line">	<span class="comment">// 条件</span></span><br><span class="line">	<span class="keyword">public</span> $where;</span><br><span class="line"></span><br><span class="line">	<span class="comment">// 数量</span></span><br><span class="line">	<span class="keyword">public</span> $limit;</span><br><span class="line"></span><br><span class="line">	<span class="comment">// 构造方法: 连接数据库,并设置默认的数据表名称</span></span><br><span class="line">	<span class="function"><span class="keyword">function</span> <span class="title">__construct</span><span class="params">($dsn, $user, $password, $table = <span class="string">'staff'</span>)</span> </span>&#123;</span><br><span class="line">		$default_dsn = <span class="string">"&#123;$this-&gt;settings['type']&#125;:host=&#123;$this-&gt;settings['host']&#125;;dbname=&#123;$this-&gt;settings['dbname']&#125;"</span>;</span><br><span class="line">		$dsn = <span class="keyword">empty</span>($dsn) ? $default_dsn : $dsn;</span><br><span class="line">		$user = <span class="keyword">empty</span>($user) ? <span class="keyword">$this</span>-&gt;settings[<span class="string">'username'</span>] : $user;</span><br><span class="line">		$password = <span class="keyword">empty</span>($password) ? <span class="keyword">$this</span>-&gt;settings[<span class="string">'password'</span>] : $password;</span><br><span class="line"></span><br><span class="line">		<span class="keyword">$this</span>-&gt;pdo = <span class="keyword">new</span> PDO($dsn, $user, $password);</span><br><span class="line">		<span class="keyword">$this</span>-&gt;table = $table;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="comment">// 增加数据</span></span><br><span class="line">	<span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">create</span><span class="params">($data)</span> </span>&#123;</span><br><span class="line">		<span class="comment">// 字段列表</span></span><br><span class="line">		$fields = <span class="string">' (name, age, sex,position, mobile, hiredate) '</span>;</span><br><span class="line">		<span class="comment">// 值列表</span></span><br><span class="line">		$values = <span class="string">' (:name, :age, :sex, :position, :mobile, :hiredate) '</span>;</span><br><span class="line"></span><br><span class="line">		<span class="comment">// 创建SQL - INSERT INTO TABLE FIELDS VALUES (...)</span></span><br><span class="line">		$sql = <span class="string">'INSERT INTO '</span> . <span class="keyword">$this</span>-&gt;table . $fields . <span class="string">' VALUES '</span> . $values;</span><br><span class="line">		<span class="keyword">echo</span> $sql . <span class="string">'&lt;br&gt;'</span>;</span><br><span class="line"></span><br><span class="line">		$stmt = <span class="keyword">$this</span>-&gt;pdo-&gt;prepare($sql);</span><br><span class="line">		$stmt-&gt;execute($data);</span><br><span class="line"></span><br><span class="line">		<span class="keyword">return</span> [</span><br><span class="line">			<span class="string">'count'</span> =&gt; $stmt-&gt;rowCount(),</span><br><span class="line">			<span class="string">'id'</span> =&gt; <span class="keyword">$this</span>-&gt;pdo-&gt;lastInsertId(),</span><br><span class="line">		];</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="comment">// 读取数据</span></span><br><span class="line">	<span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">read</span><span class="params">($fields = <span class="string">'*'</span>, $where = <span class="string">''</span>, $limit = <span class="string">'0, 5'</span>)</span> </span>&#123;</span><br><span class="line">		<span class="comment">// 设置字段</span></span><br><span class="line">		<span class="keyword">$this</span>-&gt;field = <span class="keyword">empty</span>($fields) ? (<span class="keyword">empty</span>(<span class="keyword">$this</span>-&gt;field) ? <span class="string">'*'</span> : <span class="keyword">$this</span>-&gt;field) : $fields;</span><br><span class="line">		<span class="comment">//设置条件</span></span><br><span class="line">		<span class="keyword">$this</span>-&gt;where = <span class="keyword">empty</span>($where) ? (<span class="keyword">empty</span>(<span class="keyword">$this</span>-&gt;where) ? <span class="string">''</span> : <span class="keyword">$this</span>-&gt;where) : <span class="string">' WHERE '</span> . $where;</span><br><span class="line"></span><br><span class="line">		<span class="comment">// 设置显示数量</span></span><br><span class="line">		<span class="keyword">$this</span>-&gt;limit = $limit === <span class="string">'0, 5'</span> ? (<span class="keyword">empty</span>(<span class="keyword">$this</span>-&gt;limit) ? <span class="string">' LIMIT '</span> . $limit : <span class="keyword">$this</span>-&gt;limit) : $limit;</span><br><span class="line"></span><br><span class="line">		<span class="comment">// 创建SQL - SELECT FIELDS FROM TABLE WHERE (...) LIMIT ...</span></span><br><span class="line">		$sql = <span class="string">'SELECT '</span> . <span class="keyword">$this</span>-&gt;field . <span class="string">' FROM '</span> . <span class="keyword">$this</span>-&gt;table . <span class="keyword">$this</span>-&gt;where . <span class="keyword">$this</span>-&gt;limit;</span><br><span class="line">		<span class="keyword">echo</span> $sql . <span class="string">'&lt;br&gt;'</span>;</span><br><span class="line"></span><br><span class="line">		$stmt = <span class="keyword">$this</span>-&gt;pdo-&gt;prepare($sql);</span><br><span class="line">		$stmt-&gt;execute();</span><br><span class="line"></span><br><span class="line">		<span class="keyword">return</span> $stmt-&gt;fetchAll(\PDO::FETCH_ASSOC);</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="comment">// 更新数据</span></span><br><span class="line">	<span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">update</span><span class="params">($data, $where)</span> </span>&#123;</span><br><span class="line">		$keyArr = array_keys($data);</span><br><span class="line">		$set = <span class="string">''</span>;</span><br><span class="line">		<span class="keyword">foreach</span> ($keyArr <span class="keyword">as</span> $value) &#123;</span><br><span class="line">			$set .= $value . <span class="string">' = :'</span> . $value . <span class="string">', '</span>;</span><br><span class="line">		&#125;</span><br><span class="line"></span><br><span class="line">		$set = rtrim($set, <span class="string">', '</span>);</span><br><span class="line"></span><br><span class="line">		<span class="comment">// 设置条件</span></span><br><span class="line">		<span class="keyword">$this</span>-&gt;where = <span class="keyword">empty</span>($where) ? (<span class="keyword">empty</span>(<span class="keyword">$this</span>-&gt;where) ? <span class="string">''</span> : <span class="keyword">$this</span>-&gt;where) : <span class="string">' WHERE '</span> . $where;</span><br><span class="line"></span><br><span class="line">		<span class="comment">// 创建SQL - UPDATE TABLE SET ... WHERE (...)</span></span><br><span class="line">		$sql = <span class="string">'UPDATE '</span> . <span class="keyword">$this</span>-&gt;table . <span class="string">' SET '</span> . $set . <span class="keyword">$this</span>-&gt;where;</span><br><span class="line">		<span class="keyword">echo</span> $sql . <span class="string">'&lt;br&gt;'</span>;</span><br><span class="line"></span><br><span class="line">		$stmt = <span class="keyword">$this</span>-&gt;pdo-&gt;prepare($sql);</span><br><span class="line">		$stmt-&gt;execute($data);</span><br><span class="line"></span><br><span class="line">		<span class="keyword">return</span> $stmt-&gt;rowCount();</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="comment">// 删除数据</span></span><br><span class="line">	<span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">delete</span><span class="params">($where)</span> </span>&#123;</span><br><span class="line">		<span class="comment">// 设置条件</span></span><br><span class="line">		<span class="keyword">$this</span>-&gt;where = <span class="keyword">empty</span>($where) ? (<span class="keyword">empty</span>(<span class="keyword">$this</span>-&gt;where) ? <span class="string">''</span> : <span class="keyword">$this</span>-&gt;where) : <span class="string">' WHERE '</span> . $where;</span><br><span class="line">		<span class="comment">// 创建SQL - DELETE FROM TABLE WHERE (...)</span></span><br><span class="line">		$sql = <span class="string">'DELETE FROM '</span> . <span class="keyword">$this</span>-&gt;table . <span class="keyword">$this</span>-&gt;where;</span><br><span class="line">		<span class="keyword">echo</span> $sql . <span class="string">'&lt;br&gt;'</span>;</span><br><span class="line"></span><br><span class="line">		$stmt = <span class="keyword">$this</span>-&gt;pdo-&gt;prepare($sql);</span><br><span class="line">		$stmt-&gt;execute();</span><br><span class="line"></span><br><span class="line">		<span class="keyword">return</span> $stmt-&gt;rowCount();</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="comment">// fields字段域</span></span><br><span class="line">	<span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">field</span><span class="params">($fields = <span class="string">'*'</span>)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">$this</span>-&gt;field = <span class="keyword">empty</span>($fields) ? <span class="string">'*'</span> : $fields;</span><br><span class="line">		<span class="keyword">echo</span> <span class="keyword">$this</span>-&gt;field . <span class="string">'&lt;br&gt;'</span>;</span><br><span class="line">		<span class="keyword">return</span> <span class="keyword">$this</span>;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="comment">// where条件</span></span><br><span class="line">	<span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">where</span><span class="params">($where = <span class="string">''</span>)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">$this</span>-&gt;where = <span class="keyword">empty</span>($where) ? $where : <span class="string">' WHERE '</span> . $where;</span><br><span class="line">		<span class="keyword">echo</span> <span class="keyword">$this</span>-&gt;where . <span class="string">'&lt;br&gt;'</span>;</span><br><span class="line">		<span class="keyword">return</span> <span class="keyword">$this</span>;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="comment">// limit 数量限制</span></span><br><span class="line">	<span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">limit</span><span class="params">($limit)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">$this</span>-&gt;limit = <span class="keyword">empty</span>($limit) ? $limit : <span class="string">' LIMIT '</span> . $limit;</span><br><span class="line">		<span class="keyword">echo</span> <span class="keyword">$this</span>-&gt;limit . <span class="string">'&lt;br&gt;'</span>;</span><br><span class="line">		<span class="keyword">return</span> <span class="keyword">$this</span>;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 客户端的代码</span></span><br><span class="line">$dsn = <span class="string">'mysql:host=127.0.0.1;dbname=tests'</span>;</span><br><span class="line">$user = <span class="string">'root'</span>;</span><br><span class="line">$password = <span class="string">'123456'</span>;</span><br><span class="line">$db = <span class="keyword">new</span> SQLAction($dsn, $user, $password);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 遍历1</span></span><br><span class="line"><span class="keyword">foreach</span> ($db-&gt;read() <span class="keyword">as</span> $item) &#123;</span><br><span class="line">	print_r($item);</span><br><span class="line">	<span class="keyword">echo</span> <span class="string">'&lt;br&gt;'</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">echo</span> <span class="string">'field: '</span> . $db-&gt;field . <span class="string">'&lt;br&gt;'</span>;</span><br><span class="line"><span class="keyword">echo</span> <span class="string">'where: '</span> . $db-&gt;where . <span class="string">'&lt;br&gt;'</span>;</span><br><span class="line"><span class="keyword">echo</span> <span class="string">'limit: '</span> . $db-&gt;limit . <span class="string">'&lt;br&gt;'</span>;</span><br><span class="line"><span class="keyword">echo</span> <span class="string">'&lt;hr&gt;'</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 遍历2</span></span><br><span class="line">$db-&gt;field(<span class="string">'staff_id,name,position,mobile'</span>)</span><br><span class="line">	-&gt;where(<span class="string">'staff_id &gt; 2'</span>)</span><br><span class="line">	-&gt;limit(<span class="number">8</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">foreach</span> ($db-&gt;read() <span class="keyword">as</span> $item) &#123;</span><br><span class="line">	print_r($item);</span><br><span class="line">	<span class="keyword">echo</span> <span class="string">'&lt;br&gt;'</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">echo</span> <span class="string">'field: '</span> . $db-&gt;field . <span class="string">'&lt;br&gt;'</span>;</span><br><span class="line"><span class="keyword">echo</span> <span class="string">'where: '</span> . $db-&gt;where . <span class="string">'&lt;br&gt;'</span>;</span><br><span class="line"><span class="keyword">echo</span> <span class="string">'limit: '</span> . $db-&gt;limit . <span class="string">'&lt;br&gt;'</span>;</span><br><span class="line"><span class="keyword">echo</span> <span class="string">'&lt;hr&gt;'</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 新增</span></span><br><span class="line">$data = [</span><br><span class="line">	<span class="string">'name'</span> =&gt; <span class="string">'郭靖'</span>,</span><br><span class="line">	<span class="string">'age'</span> =&gt; <span class="number">29</span>,</span><br><span class="line">	<span class="string">'sex'</span> =&gt; <span class="number">1</span>,</span><br><span class="line">	<span class="string">'position'</span> =&gt; <span class="string">'金刀驸马'</span>,</span><br><span class="line">	<span class="string">'mobile'</span> =&gt; <span class="string">'1389998899'</span>,</span><br><span class="line">	<span class="string">'hiredate'</span> =&gt; time(),</span><br><span class="line">];</span><br><span class="line"></span><br><span class="line">$res = $db-&gt;create($data);</span><br><span class="line"><span class="keyword">echo</span> <span class="string">'成功的新增了: '</span> . $res[<span class="string">'count'</span>] . <span class="string">' 条记录,新增的记录的主键ID是: '</span> . $res[<span class="string">'id'</span>] . <span class="string">'&lt;br&gt;'</span>;</span><br><span class="line"><span class="keyword">echo</span> <span class="string">'field: '</span> . $db-&gt;field . <span class="string">'&lt;br&gt;'</span>;</span><br><span class="line"><span class="keyword">echo</span> <span class="string">'where: '</span> . $db-&gt;where . <span class="string">'&lt;br&gt;'</span>;</span><br><span class="line"><span class="keyword">echo</span> <span class="string">'limit: '</span> . $db-&gt;limit . <span class="string">'&lt;br&gt;'</span>;</span><br><span class="line"><span class="keyword">echo</span> <span class="string">'&lt;hr&gt;'</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 更新</span></span><br><span class="line"><span class="comment">// $data = [</span></span><br><span class="line"><span class="comment">//    'age' =&gt; 40,</span></span><br><span class="line"><span class="comment">//    'position' =&gt; '抗金英雄'</span></span><br><span class="line"><span class="comment">// ];</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// $where = 'staff_id = 11';</span></span><br><span class="line"><span class="comment">// echo '成功的更新了: ' . $db-&gt;update($data, $where) . ' 条记录' . '&lt;br&gt;';</span></span><br><span class="line"><span class="comment">// echo 'field: ' . $db-&gt;field . '&lt;br&gt;';</span></span><br><span class="line"><span class="comment">// echo 'where: ' . $db-&gt;where . '&lt;br&gt;';</span></span><br><span class="line"><span class="comment">// echo 'limit: ' . $db-&gt;limit . '&lt;br&gt;';</span></span><br><span class="line"><span class="comment">// echo '&lt;hr&gt;';</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 删除</span></span><br><span class="line"><span class="comment">// $where = 'staff_id = 11';</span></span><br><span class="line"><span class="comment">// echo '成功的删除了: ' . $db-&gt;delete($where) . ' 条记录' . '&lt;br&gt;';</span></span><br><span class="line"><span class="comment">// echo 'field: ' . $db-&gt;field . '&lt;br&gt;';</span></span><br><span class="line"><span class="comment">// echo 'where: ' . $db-&gt;where . '&lt;br&gt;';</span></span><br><span class="line"><span class="comment">// echo 'limit: ' . $db-&gt;limit . '&lt;br&gt;';</span></span><br><span class="line"><span class="comment">// echo '&lt;hr&gt;';</span></span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>编程</category>
        <category>PHP</category>
        <category>数据库</category>
      </categories>
      <tags>
        <tag>类继承</tag>
        <tag>MySQL</tag>
        <tag>CURD</tag>
      </tags>
  </entry>
  <entry>
    <title>PHP（四）- 子类与类成员访问限制符的使用场景！</title>
    <url>/archives/a06e8925.html</url>
    <content><![CDATA[<blockquote>
<p>本篇博客源自博主在PHP中文网上写的原文，这里做个记录</p>
</blockquote>
<a id="more"></a>

<h1 id="1-子类"><a href="#1-子类" class="headerlink" title="1.子类"></a>1.子类</h1><h2 id="1-1-简介"><a href="#1-1-简介" class="headerlink" title="1.1. 简介"></a>1.1. 简介</h2><blockquote>
<p>面向对象语言的三大特点：封装、继承、多态。</p>
</blockquote>
<ul>
<li><p>封装，也就是把客观事物封装成抽象的类，一个类就是一个封装了数据以及操作这些数据的代码的逻辑实体。</p>
</li>
<li><p>继承，是指可以让某个类型的对象获得另一个类型的对象的属性的方法，可以使用现有类的所有功能，并在无需重新编写原来的类的情况下对这些功能进行扩展，而通过继承创建的新类称为“子类”或“派生类”，被继承的类称为“基类”、“父类”或“超类”。</p>
</li>
<li><p>多态，是指一个类实例的相同方法在不同情形有不同表现形式。</p>
</li>
</ul>
<h2 id="1-2-php子类的应用场景"><a href="#1-2-php子类的应用场景" class="headerlink" title="1.2. php子类的应用场景"></a>1.2. php子类的应用场景</h2><ul>
<li><p>代码复用</p>
</li>
<li><p>功能扩展</p>
</li>
<li><p>方法重写</p>
</li>
</ul>
<h2 id="1-3-演示"><a href="#1-3-演示" class="headerlink" title="1.3. 演示"></a>1.3. 演示</h2><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Demo</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="comment">// 属性(变量)</span></span><br><span class="line">    <span class="keyword">public</span> $product;</span><br><span class="line">    <span class="keyword">public</span> $price;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 构造方法</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span><span class="params">($product, $price)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;product = $product;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;price = $price;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 方法(函数)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">getInfo</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">'商品名称: '</span> . <span class="keyword">$this</span>-&gt;product.<span class="string">', 商品价格: '</span> . <span class="keyword">$this</span>-&gt;price;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 子类</span></span><br><span class="line"><span class="comment">// 1. 代码复用</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Sub1</span> <span class="keyword">extends</span> <span class="title">Demo</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">$sub1 = <span class="keyword">new</span> Sub1(<span class="string">'iPhone 11'</span>, <span class="number">9800</span>);</span><br><span class="line"><span class="keyword">echo</span> $sub1-&gt;getInfo() . <span class="string">'&lt;hr&gt;'</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 子类</span></span><br><span class="line"><span class="comment">// 2. 功能扩展</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Sub2</span> <span class="keyword">extends</span> <span class="title">Demo</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="comment">// 增加一个属性</span></span><br><span class="line">    <span class="keyword">public</span> $num; <span class="comment">// 数量</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 构造方法</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span><span class="params">($product, $price, $num)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line"><span class="comment">//        $this-&gt;product = $product;</span></span><br><span class="line"><span class="comment">//        $this-&gt;price = $price;</span></span><br><span class="line">        <span class="keyword">parent</span>::__construct($product, $price);</span><br><span class="line">        <span class="keyword">$this</span>-&gt;num = $num;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 子类中增加一个新方法: 计算总和</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">total</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> round(<span class="keyword">$this</span>-&gt;price * <span class="keyword">$this</span>-&gt;num, <span class="number">3</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">$sub2 = <span class="keyword">new</span> Sub2(<span class="string">'电脑'</span>, <span class="number">3980.1234</span>, <span class="number">13</span>);</span><br><span class="line"><span class="keyword">echo</span> $sub2-&gt;product . <span class="string">'的总价是:　'</span>. $sub2-&gt;total(). <span class="string">'&lt;hr&gt;'</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 子类</span></span><br><span class="line"><span class="comment">// 3. 方法重写</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Sub3</span> <span class="keyword">extends</span> <span class="title">Sub2</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="comment">// 重写total()</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">total</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        $total = <span class="keyword">parent</span>::total();</span><br><span class="line"></span><br><span class="line"><span class="comment">//        设置折扣率</span></span><br><span class="line">        <span class="keyword">switch</span> (<span class="keyword">true</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">case</span> ($total &gt; <span class="number">20000</span> &amp;&amp; $total &lt; <span class="number">40000</span>):</span><br><span class="line">                $discountRate = <span class="number">0.88</span>;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> ($total &gt;= <span class="number">40000</span> &amp;&amp; $total &lt; <span class="number">60000</span>):</span><br><span class="line">                $discountRate = <span class="number">0.78</span>;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> ($total &gt;= <span class="number">60000</span>):</span><br><span class="line">                $discountRate = <span class="number">0.68</span>;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">default</span>:</span><br><span class="line">                <span class="comment">// 小于或等于2000,不打折</span></span><br><span class="line">                $discountRate = <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 打折后的价格</span></span><br><span class="line">        $discountPrice = round($total*$discountRate, <span class="number">2</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> ($discountRate &lt; <span class="number">1</span>) &#123;</span><br><span class="line">            $discountPrice=$discountPrice . <span class="string">'元, &lt;span style="color: red"&gt;('</span>. $discountRate.<span class="string">'折)&lt;/span&gt;'</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 返回折扣价</span></span><br><span class="line">        <span class="keyword">return</span> $discountPrice;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">$sub3 = <span class="keyword">new</span> Sub3(<span class="string">'电脑'</span>, <span class="number">3980</span>, <span class="number">13</span>);</span><br><span class="line">$sub3 = <span class="keyword">new</span> Sub3(<span class="string">'电脑'</span>, <span class="number">3980</span>, <span class="number">33</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">echo</span> <span class="string">'折扣价是: '</span> . $sub3-&gt;total();</span><br><span class="line"></span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>

<h1 id="2-访问限制符"><a href="#2-访问限制符" class="headerlink" title="2.访问限制符"></a>2.访问限制符</h1><h2 id="2-1-php的类成员访问限制符有："><a href="#2-1-php的类成员访问限制符有：" class="headerlink" title="2.1 php的类成员访问限制符有："></a>2.1 php的类成员访问限制符有：</h2><ul>
<li><p>public（公共的、默认） ：该成员能被外部代码访问和操作；</p>
</li>
<li><p>protected（受保护的）： 对于类内部所有成员都可见，对类外部不允许访问；</p>
</li>
<li><p>private（私有的）：只允许该类的子类进行访问；</p>
</li>
</ul>
<blockquote>
<p>分别用在类的属性和方法上，用来修饰类成员的访问权限。</p>
</blockquote>
<h2 id="2-2-演示："><a href="#2-2-演示：" class="headerlink" title="2.2. 演示："></a>2.2. 演示：</h2><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="comment">// 访问控制符: </span></span><br><span class="line"><span class="comment">// public : 类中,类外均可访问, 子类中也可以访问</span></span><br><span class="line"><span class="comment">// protected: 类中,类外不可访问, 但是子类中可以访问</span></span><br><span class="line"><span class="comment">// private: 只允许在类中, 类外, 子类中不可访问</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Demo</span> </span>&#123;</span><br><span class="line">  <span class="comment">// 类中成员: 属性, 方法</span></span><br><span class="line">  <span class="comment">// 成员属性, 成员方法</span></span><br><span class="line">  <span class="comment">// 对象属性: 需要使用类的实例进行访问的成员属性</span></span><br><span class="line">  <span class="keyword">public</span> $name; <span class="comment">// 姓名</span></span><br><span class="line">  <span class="keyword">protected</span> $position; <span class="comment">// 职位</span></span><br><span class="line">  <span class="keyword">private</span> $salary; <span class="comment">// 工资</span></span><br><span class="line">  <span class="keyword">protected</span> $department; <span class="comment">// 部门</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">// 构造方法</span></span><br><span class="line">  <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span><span class="params">($name, $position, $salary, $department)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">$this</span>-&gt;name = $name;</span><br><span class="line">    <span class="keyword">$this</span>-&gt;position = $position;</span><br><span class="line">    <span class="keyword">$this</span>-&gt;salary = $salary;</span><br><span class="line">    <span class="keyword">$this</span>-&gt;department = $department;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 职位访问器/方法/函数</span></span><br><span class="line">  <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">getPosition</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">$this</span>-&gt;department === <span class="string">'培训部'</span> ? <span class="keyword">$this</span>-&gt;position : <span class="string">'无权查看'</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 工资访问器/方法/函数</span></span><br><span class="line">  <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">getSalary</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 工资 只允许财务部的人看</span></span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">$this</span>-&gt;department === <span class="string">'财务部'</span> ? <span class="keyword">$this</span>-&gt;salary : <span class="string">'无权查看'</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 部门获取器/方法/函数</span></span><br><span class="line">  <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">getDepartment</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">$this</span>-&gt;department;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">$obj = <span class="keyword">new</span> Demo(<span class="string">'朱老师'</span>, <span class="string">'讲师'</span>, <span class="number">8888</span>, <span class="string">'培训部'</span>);</span><br><span class="line"><span class="keyword">echo</span> <span class="string">'name = '</span> . $obj-&gt;name, <span class="string">'&lt;br&gt;'</span>;</span><br><span class="line"><span class="comment">// echo 'position = ' . $obj-&gt;position, '&lt;br&gt;'; // 会报错，protected 变量，类外部不允许访问</span></span><br><span class="line"><span class="comment">//  echo 'salary = ' . $obj-&gt;salary;  // private，会报错不允许访问</span></span><br><span class="line"><span class="keyword">echo</span> $obj-&gt;getPosition(), <span class="string">'&lt;br&gt;'</span>;</span><br><span class="line"><span class="keyword">echo</span> $obj-&gt;getSalary(), <span class="string">'&lt;br&gt;'</span>;</span><br><span class="line"><span class="keyword">echo</span> $obj-&gt;getDepartment(), <span class="string">'&lt;hr&gt;'</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Sub</span> <span class="keyword">extends</span> <span class="title">Demo</span> </span>&#123;</span><br><span class="line">  <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">display</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">echo</span> <span class="keyword">$this</span>-&gt;name . <span class="string">'&lt;br&gt;'</span>; <span class="comment">// public</span></span><br><span class="line">    <span class="keyword">echo</span> <span class="keyword">$this</span>-&gt;position . <span class="string">'&lt;br&gt;'</span>; <span class="comment">// protected</span></span><br><span class="line">    <span class="comment">// echo $this-&gt;salary . '&lt;br&gt;'; // private，这里会报错，无法访问</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">$sub = <span class="keyword">new</span> Sub(<span class="string">'欧阳克'</span>, <span class="string">'讲师'</span>, <span class="number">9999</span>, <span class="string">'培训部'</span>);</span><br><span class="line">$sub-&gt;display();</span><br><span class="line"><span class="keyword">echo</span> <span class="string">'&lt;br&gt;'</span>;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>编程</category>
        <category>PHP</category>
      </categories>
      <tags>
        <tag>访问限制符</tag>
      </tags>
  </entry>
  <entry>
    <title>Python（一）- 安装与升级！</title>
    <url>/archives/3b7f3111.html</url>
    <content><![CDATA[<blockquote>
<p>由于重装了系统，一些工具都要重新安装，正好，准备做一点记录。</p>
</blockquote>
<p><strong>这里是Python的开始…</strong></p>
<a id="more"></a>

<h1 id="1-Windows下："><a href="#1-Windows下：" class="headerlink" title="1.Windows下："></a>1.Windows下：</h1><blockquote>
<p>去官网：<a href="https://www.python.org/" target="_blank" rel="noopener">https://www.python.org/</a> 下载</p>
</blockquote>
<p><img src="https://img-blog.csdnimg.cn/20190930220722488.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MTU5OTg1OA==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>接下来，属于傻瓜操作了，就不多说了，<br>安装完成后，将python.exe和pip程序路径加入环境变量，</p>
<p>DOS命令，大家应该都熟悉了，<code>Win+R</code> 输入cmd，打开命令行，<br>更新pip的话，输入：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">python -m pip install --upgrade pip</span><br></pre></td></tr></table></figure>
<h1 id="2-Linux下："><a href="#2-Linux下：" class="headerlink" title="2.Linux下："></a>2.Linux下：</h1><p>一般都默认安装了2.7和3.5版本的Python</p>
<h2 id="2-1-安装"><a href="#2-1-安装" class="headerlink" title="2.1. 安装"></a>2.1. 安装</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 打开终端，新建下载目录</span></span><br><span class="line">mkdir /usr/<span class="built_in">local</span>/python37</span><br><span class="line"><span class="comment"># 进入安装目录： </span></span><br><span class="line"><span class="built_in">cd</span> /usr/<span class="built_in">local</span>/python37  <span class="comment"># 也可以进入任意自己想要存放安装包的目录</span></span><br><span class="line"><span class="comment"># 安装</span></span><br><span class="line">wget https://www.python.org/ftp/python/3.7.4/Python-3.7.4.tgz</span><br><span class="line"><span class="comment"># 解压缩</span></span><br><span class="line">tar -xzvf Python-3.7.4.tgz</span><br><span class="line"><span class="comment"># 进入目录，执行./configure配置构建文件</span></span><br><span class="line"><span class="built_in">cd</span> Python-3.7.4</span><br><span class="line">./configure --<span class="built_in">enable</span>-optimizations</span><br><span class="line"><span class="comment"># 编译并安装</span></span><br><span class="line">make &amp;&amp; sudo make install</span><br><span class="line"><span class="comment"># 添加python3的软链接</span></span><br><span class="line">sudo ln -s /usr/<span class="built_in">local</span>/bin/python3.7 /usr/bin/python3.7</span><br><span class="line"><span class="comment"># 添加 pip3 的软链接</span></span><br><span class="line">sudo ln -s /usr/<span class="built_in">local</span>/bin/pip3.7 /usr/bin/pip3.7</span><br></pre></td></tr></table></figure>
<blockquote>
<p>如果是要升级Python版本的话，最好卸载之前的版本</p>
</blockquote>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 1、卸载python3.5</span></span><br><span class="line">sudo apt-get remove python3.5</span><br><span class="line"><span class="comment"># 2、卸载python3.5及其依赖</span></span><br><span class="line">sudo apt-get remove --auto-remove python3.5</span><br><span class="line"><span class="comment"># 3、清除python3.5</span></span><br><span class="line">sudo apt-get purge python3.5</span><br><span class="line"><span class="comment"># or</span></span><br><span class="line">sudo apt-get purge --auto-remove python3.5</span><br></pre></td></tr></table></figure>

<h2 id="2-2-升级pip"><a href="#2-2-升级pip" class="headerlink" title="2.2.升级pip"></a>2.2.升级pip</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo pip3 install --upgrade pip</span><br></pre></td></tr></table></figure>
<p>可能有人会出现retrying且ssl error的错误：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 去python解压缩目录，重新执行：</span></span><br><span class="line"><span class="built_in">cd</span> Python-3.7.4</span><br><span class="line">./configure --with-ssl</span><br><span class="line">make &amp;&amp; sudo make install</span><br></pre></td></tr></table></figure>
<blockquote>
<p>或者更换镜像源。<br>阿里云： <a href="http://mirrors.aliyun.com/pypi/simple/" target="_blank" rel="noopener">http://mirrors.aliyun.com/pypi/simple/</a><br>   中国科技大学： <a href="https://pypi.mirrors.ustc.edu.cn/simple/" target="_blank" rel="noopener">https://pypi.mirrors.ustc.edu.cn/simple/</a><br>   豆瓣 ：<a href="http://pypi.douban.com/simple" target="_blank" rel="noopener">http://pypi.douban.com/simple</a></p>
</blockquote>
<p>以上OK后，就可以使用pip 安装想要的模块和插件了！</p>
<blockquote>
<p>原文地址： CSDN博客 - <a href="https://blog.csdn.net/weixin_41599858/article/details/101795427" target="_blank" rel="noopener">Python（一）- 安装与升级！</a></p>
</blockquote>
]]></content>
      <categories>
        <category>编程</category>
        <category>Python</category>
      </categories>
      <tags>
        <tag>环境搭建</tag>
      </tags>
  </entry>
  <entry>
    <title>Python（七）- 连接MongoDB数据库以及CURD操作！</title>
    <url>/archives/db519792.html</url>
    <content><![CDATA[<blockquote>
<p>本文介绍python中对MongoDB数据库操作的两个模块：<code>pymongo</code>    和 <code>mongoengine</code></p>
</blockquote>
<a id="more"></a>

<h1 id="一、简介"><a href="#一、简介" class="headerlink" title="一、简介"></a>一、简介</h1><blockquote>
<p>以下内容参考：<a href="https://www.runoob.com/mongodb/mongodb-intro.html" target="_blank" rel="noopener">菜鸟教程</a></p>
</blockquote>
<p>MongoDB 是由C++语言编写的，是一个基于分布式文件存储的开源数据库系统，是当前noSql数据库产品中最热门的一种，在高负载的情况下，添加更多的节点，可以保证服务器性能。<br>MongoDB为WEB应用提供可扩展的高性能数据存储解决方案。<br>MongoDB 将数据存储为一个文档，数据结构由键值(key=&gt;value)对组成。MongoDB 文档类似于 JSON 对象。字段值可以包含其他文档，数组及文档数组。</p>
<h1 id="二、安装"><a href="#二、安装" class="headerlink" title="二、安装"></a>二、安装</h1><p>安装比较简单，可以参考：<a href="https://www.jianshu.com/p/9e5bc16c48c3" target="_blank" rel="noopener">MongoDB安装教程</a></p>
<h1 id="三、使用"><a href="#三、使用" class="headerlink" title="三、使用"></a>三、使用</h1><blockquote>
<p>这里以两个小样例的形式，介绍pymongo和mongoengine的使用</p>
</blockquote>
<p><strong>数据库配置：</strong></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># baseConfig.py</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 数据库配置</span></span><br><span class="line">DATABASE = &#123;</span><br><span class="line">    <span class="string">'mongodb'</span>: &#123;</span><br><span class="line">        <span class="string">'username'</span>: <span class="string">'admin'</span>,</span><br><span class="line">        <span class="string">'password'</span>: <span class="string">'123456'</span>,</span><br><span class="line">        <span class="string">'host'</span>: <span class="string">'localhost'</span>,</span><br><span class="line">        <span class="string">'port'</span>: <span class="number">27017</span>,</span><br><span class="line">        <span class="string">'db'</span>: <span class="string">'test'</span>,</span><br><span class="line">        <span class="string">'authentication_source'</span>: <span class="string">'admin'</span>,</span><br><span class="line">    &#125;,</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="1-pymongo"><a href="#1-pymongo" class="headerlink" title="1. pymongo"></a>1. pymongo</h2><blockquote>
<p>python中常见的操作mongodb的模块</p>
</blockquote>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 以下为mongodb的简单操作类</span></span><br><span class="line"><span class="keyword">from</span> pymongo <span class="keyword">import</span> MongoClient</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> baseConfig <span class="keyword">import</span> DATABASE</span><br><span class="line"></span><br><span class="line">DB_CONF = DATABASE[<span class="string">'mongodb'</span>]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">singleton</span><span class="params">(cls)</span>:</span></span><br><span class="line">    <span class="string">"""单例模式"""</span></span><br><span class="line">    _instance = &#123;&#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">_slt</span><span class="params">(*args, **kwargs)</span>:</span></span><br><span class="line">        <span class="keyword">if</span> cls <span class="keyword">not</span> <span class="keyword">in</span> _instance:</span><br><span class="line">            _instance[cls] = cls(*args, **kwargs)</span><br><span class="line">        <span class="keyword">return</span> _instance[cls]</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> _slt</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@singleton</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MongoHandler</span><span class="params">(object)</span>:</span></span><br><span class="line">    <span class="string">"""创建MongoDB处理类"""</span></span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, **kwargs)</span>:</span></span><br><span class="line">        print(kwargs)</span><br><span class="line">        self.db_name = kwargs[<span class="string">'name'</span>] <span class="keyword">or</span> <span class="string">'test_db'</span></span><br><span class="line">        client = MongoClient()</span><br><span class="line">        self.db = client[self.db_name]  <span class="comment"># 或者这样指定： db = client.test</span></span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">drop</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            self.db.command(<span class="string">"dropDatabase"</span>)</span><br><span class="line">        <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">            print(<span class="string">"Delete DATABASE &#123;0&#125; failed! due to the reason of '&#123;1&#125;'"</span>.format(self.db_name, e))</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">collection</span><span class="params">(self, cl)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> self.db[cl]  <span class="comment"># 或者这样指定：cols = db.cl</span></span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">insert_one_record</span><span class="params">(self, col, record: dict)</span>:</span></span><br><span class="line">    	<span class="string">"""</span></span><br><span class="line"><span class="string">    	可以直接用得到的结合调用库方法，</span></span><br><span class="line"><span class="string">    	这里限定类型，做演示用，</span></span><br><span class="line"><span class="string">    	以下方法类似，根据业务需要改写</span></span><br><span class="line"><span class="string">    	"""</span></span><br><span class="line">        result = col.insert_one(record)</span><br><span class="line">        print(result)</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">insert_many_records</span><span class="params">(self, col, records: list)</span>:</span></span><br><span class="line">        result = col.insert_many(records)</span><br><span class="line">        print(result)</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">find_one_record</span><span class="params">(self, col, condition: dict)</span>:</span></span><br><span class="line">        result = col.find_one(condition)</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> result</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">find_records</span><span class="params">(self, col, condition: dict)</span>:</span></span><br><span class="line">        results = col.find(condition)</span><br><span class="line">        <span class="keyword">return</span> results</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">update_one_record</span><span class="params">(self, col, condition: dict, data: dict)</span>:</span></span><br><span class="line">        result = col.update_one(condition, data)</span><br><span class="line">        print(<span class="string">'影响修改条数：'</span>, result.matched_count, result.modified_count)</span><br><span class="line">        <span class="keyword">return</span> result</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">update_records</span><span class="params">(self, col, condition: dict, data: dict)</span>:</span></span><br><span class="line">        result = col.update_many(condition, data)</span><br><span class="line">        print(<span class="string">'影响修改条数：'</span>, result.matched_count, result.modified_count)</span><br><span class="line">        <span class="keyword">return</span> result</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">delete_one_record</span><span class="params">(self, col, condition: dict)</span>:</span></span><br><span class="line">        result = col.delete_one(&#123;<span class="string">'name'</span>: <span class="string">'Kevin'</span>&#125;)</span><br><span class="line">        <span class="comment"># print(result)</span></span><br><span class="line">        <span class="keyword">return</span> result.deleted_count</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">delete_records</span><span class="params">(self, col, condition: dict)</span>:</span></span><br><span class="line">        <span class="comment"># result = col.remove(&#123;'name': 'Kevin'&#125;)   # 删除所有符合条件的记录，官方推荐delete_one和delete_many</span></span><br><span class="line">        result = col.delete_many(condition)</span><br><span class="line">        <span class="comment"># print(result.deleted_count)</span></span><br><span class="line">        <span class="keyword">return</span> result.deleted_count</span><br></pre></td></tr></table></figure>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 测试</span></span><br><span class="line"></span><br><span class="line">DBHandler = MongoHandler(**DB_CONF)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">code_test</span><span class="params">()</span>:</span></span><br><span class="line">    db = DBHandler</span><br><span class="line">    <span class="comment"># 获取集合</span></span><br><span class="line">    col = db.collection(<span class="string">'test_col'</span>)</span><br><span class="line">    <span class="comment"># 插入数据</span></span><br><span class="line">    stu = &#123;</span><br><span class="line">        <span class="string">'id'</span>: <span class="string">'20190101'</span>,</span><br><span class="line">        <span class="string">'name'</span>: <span class="string">'Amy'</span>,</span><br><span class="line">        <span class="string">'age'</span>: <span class="number">20</span>,</span><br><span class="line">        <span class="string">'gender'</span>: <span class="string">'female'</span></span><br><span class="line">    &#125;</span><br><span class="line">    print(<span class="string">"------- 开始插入数据 --------"</span>)</span><br><span class="line">    db.insert_one_record(col, stu)  <span class="comment"># 单条插入</span></span><br><span class="line">    stu_list = [</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="string">'id'</span>: <span class="string">'20190102'</span>,</span><br><span class="line">            <span class="string">'name'</span>: <span class="string">'Jordan'</span>,</span><br><span class="line">            <span class="string">'age'</span>: <span class="number">20</span>,</span><br><span class="line">            <span class="string">'gender'</span>: <span class="string">'male'</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="string">'id'</span>: <span class="string">'20190203'</span>,</span><br><span class="line">            <span class="string">'name'</span>: <span class="string">'Mike'</span>,</span><br><span class="line">            <span class="string">'age'</span>: <span class="number">21</span>,</span><br><span class="line">            <span class="string">'gender'</span>: <span class="string">'male'</span></span><br><span class="line">        &#125;</span><br><span class="line">    ]</span><br><span class="line">    db.insert_many_records(col, stu_list)  <span class="comment"># 多条插入</span></span><br><span class="line">    print(<span class="string">"------------ end ------------"</span>)</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># 查询</span></span><br><span class="line">    condition1 = &#123;<span class="string">'name'</span>: <span class="string">'Mike'</span>&#125;</span><br><span class="line">    condition2 = &#123;<span class="string">'name'</span>: &#123;<span class="string">'$regex'</span>: <span class="string">'^M.*'</span>&#125;&#125;</span><br><span class="line">    condition2 = &#123;&#125;</span><br><span class="line">    print(<span class="string">"------- 开始查询数据 --------"</span>)</span><br><span class="line">    res1 = db.find_one_record(col, condition1)</span><br><span class="line">    print(<span class="string">'select res1: '</span>, type(res1), res1)</span><br><span class="line">    res2 = db.find_records(col, condition2)</span><br><span class="line">    <span class="keyword">for</span> r <span class="keyword">in</span> res2:</span><br><span class="line">        print(<span class="string">'select res2: '</span>, type(r), r)</span><br><span class="line">    print(<span class="string">"------------ end ------------"</span>)</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># 更新</span></span><br><span class="line">    <span class="comment"># condition3 = &#123;'gender': 'male'&#125;</span></span><br><span class="line">    <span class="comment"># condition4 = &#123;'age': &#123;'$gt': 20&#125;&#125;</span></span><br><span class="line">    <span class="comment"># data1 = &#123;'$set': &#123;'age': 21&#125;&#125;</span></span><br><span class="line">    <span class="comment"># data2 = &#123;'$inc': &#123;'age': 1&#125;&#125;</span></span><br><span class="line">    print(<span class="string">"------- 开始更新数据 --------"</span>)</span><br><span class="line">    <span class="comment"># res3 = db.update_one_record(col, condition3, data1)</span></span><br><span class="line">    <span class="comment"># print('update res3: ', res3)</span></span><br><span class="line">    <span class="comment"># res4 = db.update_records(col, condition4, data2)</span></span><br><span class="line">    <span class="comment"># print('update res4: ', res4)</span></span><br><span class="line">    print(<span class="string">"------------ end ------------"</span>)</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># 删除</span></span><br><span class="line">    <span class="comment"># condition5 = &#123;'name': 'Kevin'&#125;</span></span><br><span class="line">    <span class="comment"># condition6 = &#123;'age': &#123;'$lt': 25&#125;&#125;</span></span><br><span class="line">    print(<span class="string">"------- 开始删除数据 --------"</span>)</span><br><span class="line">    <span class="comment"># res5 = db.delete_one_record(col, condition5)</span></span><br><span class="line">    <span class="comment"># print("删除条数：", res5)</span></span><br><span class="line">    <span class="comment"># res6 = db.delete_records(col, condition6)</span></span><br><span class="line">    <span class="comment"># print("删除条数：", res6)</span></span><br><span class="line">    print(<span class="string">"------------ end ------------"</span>)</span><br></pre></td></tr></table></figure>

<p><strong>查询数据库，可见：</strong><br><img src="https://img-blog.csdnimg.cn/20191109155037753.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MTU5OTg1OA==,size_16,color_FFFFFF,t_70" alt></p>
<h2 id="2-mongoengine"><a href="#2-mongoengine" class="headerlink" title="2. mongoengine"></a>2. mongoengine</h2><blockquote>
<p>python中的操作MongoDB的对象文档映射器（ODM），类似MySQL的对象关系映射器（ORM）</p>
</blockquote>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 简单使用</span></span><br><span class="line"><span class="keyword">import</span> mongoengine</span><br><span class="line"><span class="keyword">from</span> datetime <span class="keyword">import</span> datetime</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> baseConfig <span class="keyword">import</span> DATABASE</span><br><span class="line"></span><br><span class="line">DB_CONF = DATABASE[<span class="string">'mongodb'</span>]</span><br><span class="line"><span class="comment"># 连接数据库</span></span><br><span class="line">MONGO_CONNECT_ENGINE = mongoengine.connect(**DB_CONF)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 定义分类文档:</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">User</span><span class="params">(mongoengine.Document)</span>:</span></span><br><span class="line">    <span class="string">"""继承Document类, 为普通文档"""</span></span><br><span class="line">    name = mongoengine.StringField(max_length=<span class="number">30</span>, required=<span class="literal">True</span>)</span><br><span class="line">    age = mongoengine.IntField(default=<span class="number">0</span>, required=<span class="literal">True</span>)</span><br><span class="line">    date = mongoengine.DateTimeField(default=datetime.now(), required=<span class="literal">True</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">insert_doc</span><span class="params">()</span>:</span></span><br><span class="line">    cate = User(name=<span class="string">"Linux"</span>, age=<span class="number">20</span>)  <span class="comment"># 如果required为True则必须赋予初始值,如果有default,赋予初始值则使用默认值</span></span><br><span class="line">    cate.save()  <span class="comment"># 保存到数据库</span></span><br><span class="line">    </span><br><span class="line">    User(name=<span class="string">"Python"</span>, age=<span class="number">3</span>).save()</span><br><span class="line">    User(name=<span class="string">"HTML"</span>, age=<span class="number">3</span>).save()</span><br><span class="line">    User(name=<span class="string">"Javascript"</span>, age=<span class="number">3</span>).save()</span><br><span class="line">    User(name=<span class="string">"CSS"</span>, age=<span class="number">3</span>).save()</span><br><span class="line">    User(name=<span class="string">"Ruby"</span>, age=<span class="number">2</span>).save()</span><br><span class="line">    User(name=<span class="string">"PHP"</span>, age=<span class="number">1</span>).save()</span><br><span class="line">    User(name=<span class="string">"test"</span>, age=<span class="number">3</span>).save()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">select_doc</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="comment"># 返回集合里的所有文档对象的列表</span></span><br><span class="line">    users = User.objects.all()</span><br><span class="line">    <span class="keyword">for</span> u <span class="keyword">in</span> users:</span><br><span class="line">        print(<span class="string">"name:"</span>, u.name, <span class="string">",age:"</span>, u.age)</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># 返回所有符合查询条件的结果的文档对象列表</span></span><br><span class="line">    user = User.objects(name=<span class="string">"Python"</span>)</span><br><span class="line">    print(user)</span><br><span class="line">    </span><br><span class="line">    user_search = User.objects(age__gte=<span class="number">10</span>, age__lt=<span class="number">33</span>).order_by(<span class="string">'name'</span>)</span><br><span class="line">    <span class="keyword">for</span> u <span class="keyword">in</span> user_search:</span><br><span class="line">        print(<span class="string">"name:"</span>, u.name, <span class="string">",age:"</span>, u.age)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">update_doc</span><span class="params">()</span>:</span></span><br><span class="line">    User.objects(name=<span class="string">"Ruby"</span>).update(inc__age=<span class="number">1</span>)</span><br><span class="line">    tmp = User.objects(name=<span class="string">"Ruby"</span>)</span><br><span class="line">    <span class="keyword">for</span> u <span class="keyword">in</span> tmp:</span><br><span class="line">        print(<span class="string">"name:"</span>, u.name, <span class="string">",age:"</span>, u.age)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">delete_doc</span><span class="params">()</span>:</span></span><br><span class="line">    user_list = User.objects(name=<span class="string">'test'</span>)</span><br><span class="line">    <span class="keyword">for</span> user <span class="keyword">in</span> user_list:</span><br><span class="line">        user.delete()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">code_test</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="comment"># 添加记录</span></span><br><span class="line">    insert_doc()</span><br><span class="line">    <span class="comment"># 查询</span></span><br><span class="line">    <span class="comment"># select_doc()</span></span><br><span class="line">    <span class="comment"># 更新</span></span><br><span class="line">    <span class="comment"># update_doc()</span></span><br><span class="line">    <span class="comment"># 删除</span></span><br><span class="line">    <span class="comment"># delete_doc()</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    code_test()</span><br></pre></td></tr></table></figure>

<p><strong>查询数据库，可见：</strong><br><img src="https://img-blog.csdnimg.cn/20191109155217419.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MTU5OTg1OA==,size_16,color_FFFFFF,t_70" alt></p>
<hr>
<p>结束！</p>
<blockquote>
<p>原文地址： CSDN博客 - <a href="https://blog.csdn.net/weixin_41599858/article/details/102987366" target="_blank" rel="noopener">Python（七）- 连接MongoDB数据库以及CURD操作！</a></p>
</blockquote>
]]></content>
      <categories>
        <category>编程</category>
        <category>Python</category>
        <category>数据库</category>
      </categories>
      <tags>
        <tag>CURD</tag>
        <tag>MongoDB</tag>
      </tags>
  </entry>
  <entry>
    <title>Python（三）- 交互式编程：jupyter的安装、使用以及出现的部分问题！</title>
    <url>/archives/441b84e2.html</url>
    <content><![CDATA[<blockquote>
<p>如题，本次主要聊聊关于交互式编程在Python中的应用。</p>
</blockquote>
<a id="more"></a>

<p>对于交互式编程，很多人都很熟悉了,其实，很多脚本语言都有这样的功能。<br>可以把它看做程序员和计算机之间的对话，程序员通过解释器或者控制台输入一段命令或逻辑操作，计算机反馈回程序员想要得到的信息。<br>这么一来，就很清楚了，我们平时工作学习中，一直在使用着，如：</p>
<blockquote>
<p>JavaScript 在浏览器中使用通过控制台和页面交互；<br>Ruby中的irb，通过它，我们可以和ruby解释器交互；<br>Python中的解释器，交互式模块：ipython、jupyter等等；<br>Lua中的lua命令；</p>
</blockquote>
<p>接下来，重点介绍一下关于jupyter的一些使用：</p>
<h1 id="1-简介"><a href="#1-简介" class="headerlink" title="1.简介"></a>1.简介</h1><blockquote>
<p>Jupyter Notebook（此前被称为 IPython notebook）是一个交互式笔记本，支持运行 40 多种编程语言;<br>Jupyter Notebook 的本质是一个 Web 应用程序，便于创建和共享文学化程序文档，支持实时代码，数学方程，可视化和 markdown。 用途包括：数据清理和转换，数值模拟，统计建模，机器学习等等。 – 【<a href="https://baike.baidu.com/item/Jupyter/20423051" target="_blank" rel="noopener">百度百科</a>】<br>简单来说：jupyter为多种语言提供一种页面交互式的操作（编程、撰写技术文档），功能强大的它极大程度上方便了我们的工作和学习。</p>
</blockquote>
<h1 id="2-安装"><a href="#2-安装" class="headerlink" title="2.安装"></a>2.安装</h1><h2 id="2-1-Windows下："><a href="#2-1-Windows下：" class="headerlink" title="2.1. Windows下："></a>2.1. Windows下：</h2><p>DOS命令，打开命令提示符，输入：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">pip install jupyter  <span class="comment"># 前提是安装了python和pip并加入环境变量</span></span><br></pre></td></tr></table></figure>
<blockquote>
<p>中途可能会出现失败情况，一般，更新一下pip都能解决：</p>
</blockquote>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">python -m pip install --upgrade pip</span><br></pre></td></tr></table></figure>
<blockquote>
<p>DOS命令下的使用，这里就不说了，具体看下面 <code>使用</code> ，Linux和Windows命令行的开启方法都一样。</p>
</blockquote>
<h2 id="2-2-Linux下："><a href="#2-2-Linux下：" class="headerlink" title="2.2. Linux下："></a>2.2. Linux下：</h2><p>终端输入：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 更新pip</span></span><br><span class="line">python pip3 install --upgrade pip</span><br><span class="line"><span class="comment"># 安装</span></span><br><span class="line">pip install jupyter</span><br></pre></td></tr></table></figure>
<blockquote>
<p>过程中可能出现：<code>EnvironmentError: [Errno 13] 权限不够</code> 这样的错误</p>
</blockquote>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">pip install jupyter --user  <span class="comment"># 根据提示，我们可以试下添加 `--user`</span></span><br></pre></td></tr></table></figure>

<h1 id="3-使用"><a href="#3-使用" class="headerlink" title="3.使用"></a>3.使用</h1><h2 id="3-1-启动"><a href="#3-1-启动" class="headerlink" title="3.1. 启动"></a>3.1. 启动</h2><p>命令行输入：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># [] 内为可选操作</span></span><br><span class="line">ipython notebook [--no-browser --port 8080 --ip localhost]</span><br><span class="line"><span class="comment"># or</span></span><br><span class="line">jupyter notebook [--no-browser --port 8080 --ip localhost]</span><br></pre></td></tr></table></figure>

<blockquote>
<p>过程中可能会出现：找不到jupyter命令的错误:</p>
</blockquote>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cd</span> ~</span><br><span class="line">find -name jupyter      <span class="comment"># 查找</span></span><br><span class="line"><span class="built_in">cd</span> ./.<span class="built_in">local</span>/bin/        <span class="comment"># 路径</span></span><br><span class="line">sudo vim /etc/profile   <span class="comment"># 修改，添加下面一行</span></span><br><span class="line"><span class="comment"># 最后 添加： export PATH=$PATH:~/.local/bin</span></span><br><span class="line"><span class="comment"># 或者将上面一行加入到 ~/.bashrc</span></span><br><span class="line"><span class="comment"># 退出并执行加载</span></span><br><span class="line"><span class="built_in">source</span>  /etc/profile  <span class="comment"># ~/.bashrc</span></span><br></pre></td></tr></table></figure>
<blockquote>
<p>通常推荐，使用虚拟环境，在虚拟环境中安装jupyter，并开启。</p>
</blockquote>
<p>成功后，如图：</p>
<blockquote>
<p>这是首页</p>
</blockquote>
<p><img src="https://img-blog.csdnimg.cn/20191001021433259.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MTU5OTg1OA==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p>
<blockquote>
<p>如Linux下的vim，它有编辑和命令模式，Esc可退出到命令模式，此时，我们可以使用快捷键操作；<br>jupyter有两个单元，code和markdown，即代码单元和标记语言单元；</p>
</blockquote>
<h2 id="3-2-编写"><a href="#3-2-编写" class="headerlink" title="3.2. 编写"></a>3.2. 编写</h2><blockquote>
<p>接下来，我们可以混用code和markdown，操作一下。</p>
</blockquote>
<p>点击new，选择python3，如图：</p>
<p><img src="https://img-blog.csdnimg.cn/20191001132746176.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MTU5OTg1OA==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>输入代码语句和markdown语句，分别执行一遍，如图：</p>
<p><img src="https://img-blog.csdnimg.cn/2019100102183297.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MTU5OTg1OA==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p>
<h2 id="3-3-保存与导出"><a href="#3-3-保存与导出" class="headerlink" title="3.3. 保存与导出"></a>3.3. 保存与导出</h2><p><img src="https://img-blog.csdnimg.cn/20191001133928568.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MTU5OTg1OA==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>推荐使用download as ，多种文本格式可供选择保存。</p>
<p>好了，以上就是关于jupyter的一点简单用法，当然有需要的话，我们也可以用它来快速地编写一份技术文档，so good！</p>
<blockquote>
<p>原文地址： CSDN博客 - <a href="https://blog.csdn.net/weixin_41599858/article/details/101806377" target="_blank" rel="noopener">Python（三）- 交互式编程：jupyter的安装、使用以及出现的部分问题！</a></p>
</blockquote>
]]></content>
      <categories>
        <category>编程</category>
        <category>Python</category>
      </categories>
      <tags>
        <tag>交互式编程</tag>
        <tag>jupyter</tag>
      </tags>
  </entry>
  <entry>
    <title>Python（九）- 音频文字转换</title>
    <url>/archives/890d42a0.html</url>
    <content><![CDATA[<p>Python 是一门通用性很强的语言，本文主要讲述其中的音频模块 gtts（Google文本到语音）的使用。</p>
<a id="more"></a>

<h2 id="1-音频模块简介"><a href="#1-音频模块简介" class="headerlink" title="1.音频模块简介"></a>1.音频模块简介</h2><ul>
<li>文本转语音：<ul>
<li>gtts：谷歌模块</li>
<li>aip：百度合成</li>
</ul>
</li>
<li>格式转换：<ul>
<li>pydub和ffmpeg：实现mp3转wav格式</li>
</ul>
</li>
<li>发音：<ul>
<li>pyttsx3：系统内置语音引擎实现发音，不生成mp3</li>
<li>win32com：Windows操作系统内置的语音引擎实现文字发音</li>
</ul>
</li>
<li>音频转文字：<ul>
<li>SpeechRecognition：IBM speech to text</li>
</ul>
</li>
</ul>
<blockquote>
<p>谷歌gTTS模块：<a href="https://pypi.org/project/gTTS/" target="_blank" rel="noopener">gtts文档</a><br>百度语音合成api接口：<a href="http://yuyin.baidu.com/docs/tts/196" target="_blank" rel="noopener">api文档</a></p>
</blockquote>
<h2 id="2-模块安装"><a href="#2-模块安装" class="headerlink" title="2.模块安装"></a>2.模块安装</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">pip install gTTS       <span class="comment"># 谷歌文字转语音</span></span><br><span class="line">pip install baidu-aip  <span class="comment"># 语音合成</span></span><br><span class="line">pip install playsound  <span class="comment"># 语音播放</span></span><br><span class="line">pip install pyttsx3    <span class="comment"># 语音引擎实现发音</span></span><br><span class="line">pip install SpeechRecognition  <span class="comment"># 音频转文字</span></span><br></pre></td></tr></table></figure>

<h2 id="3-文字转音频"><a href="#3-文字转音频" class="headerlink" title="3.文字转音频"></a>3.文字转音频</h2><h3 id="3-1-gtts模块使用"><a href="#3-1-gtts模块使用" class="headerlink" title="3.1.gtts模块使用"></a>3.1.gtts模块使用</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> gtts <span class="keyword">import</span> gTTS</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">text2voice</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="string">"""文字转语音 - 谷歌 gtts模块"""</span></span><br><span class="line">    tts = gTTS(text=<span class="string">"oh 宝贝! come on, baby!"</span>, lang=<span class="string">"en"</span>)</span><br><span class="line">    tts.save(<span class="string">"test.mp3"</span>)</span><br></pre></td></tr></table></figure>

<h3 id="3-2-百度合成"><a href="#3-2-百度合成" class="headerlink" title="3.2.百度合成"></a>3.2.百度合成</h3><blockquote>
<p>进入<a href="https://ai.baidu.com/tech/speech/tts" target="_blank" rel="noopener">语音合成网站</a>，登录创建应用</p>
</blockquote>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> aip <span class="keyword">import</span> AipSpeech</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">APP_ID = <span class="string">'你的 App ID'</span></span><br><span class="line">API_KEY = <span class="string">'你的 Api Key'</span></span><br><span class="line">SECRET_KEY = <span class="string">'你的 Secret Key'</span></span><br><span class="line">client = AipSpeech(APP_ID, API_KEY, SECRET_KEY)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 合成音频</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">text_mixin_vocie</span><span class="params">()</span>:</span></span><br><span class="line">    result = client.synthesis(<span class="string">'你好吗？'</span>, <span class="string">'zh'</span>, <span class="number">1</span>, &#123;<span class="string">'vol'</span>: <span class="number">5</span>, &#125;)</span><br><span class="line">    <span class="comment"># 识别正确返回语音二进制 错误则返回dict </span></span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> isinstance(result, dict):</span><br><span class="line">        <span class="keyword">with</span> open(<span class="string">'auido.mp3'</span>, <span class="string">'wb'</span>) <span class="keyword">as</span> f:</span><br><span class="line">            f.write(result)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 读取文件</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_file_content</span><span class="params">(filePath)</span>:</span></span><br><span class="line">    cmd_str = <span class="string">"ffmpeg -y  -i %s  -acodec pcm_s16le -f s16le -ac 1 -ar 16000 %s.pcm"</span>%(filePath, filePath)</span><br><span class="line">    os.system(cmd_str)  <span class="comment"># 调用系统命令ffmpeg,传入音频文件名即可</span></span><br><span class="line">    <span class="keyword">with</span> open(filePath + <span class="string">".pcm"</span>, <span class="string">'rb'</span>) <span class="keyword">as</span> fp:</span><br><span class="line">        <span class="keyword">return</span> fp.read()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 识别本地文件</span></span><br><span class="line">res = client.asr(get_file_content(<span class="string">'audio.m4a'</span>), <span class="string">'pcm'</span>, <span class="number">16000</span>, &#123;</span><br><span class="line">    <span class="string">'dev_pid'</span>: <span class="number">1536</span>,  <span class="comment"># 1536表示能识别中文和英文，它的容错率比较高</span></span><br><span class="line">&#125;)</span><br><span class="line">print(res)</span><br><span class="line">print(res[<span class="string">'result'</span>])</span><br></pre></td></tr></table></figure>

<h3 id="3-3-语音播放"><a href="#3-3-语音播放" class="headerlink" title="3.3.语音播放"></a>3.3.语音播放</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> playsound <span class="keyword">import</span> playsound</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">play_voice</span><span class="params">()</span>:</span></span><br><span class="line">    playsound(<span class="string">"store/test.mp3"</span>)  <span class="comment"># 音频文件路径</span></span><br></pre></td></tr></table></figure>

<h3 id="3-4-文字发音"><a href="#3-4-文字发音" class="headerlink" title="3.4.文字发音"></a>3.4.文字发音</h3><ul>
<li><code>win32com</code> 模块</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> win32com.client <span class="keyword">as</span> win</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">word_pronunciation</span><span class="params">()</span>:</span></span><br><span class="line">    speak = win.Dispatch(<span class="string">"SAPI.SpVoice"</span>)</span><br><span class="line">    speak.Speak(<span class="string">"come on, baby!"</span>)</span><br><span class="line">    speak.Speak(<span class="string">"宝贝儿，你好!"</span>)</span><br></pre></td></tr></table></figure>

<ul>
<li><code>pyttsx3</code> 模块</li>
</ul>
<blockquote>
<p><code>pyttsx3</code> 模块可能会安装失败，可去官网下载指定版本</p>
</blockquote>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> pyttsx3</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">word_pronunciation_v2</span><span class="params">()</span>:</span></span><br><span class="line">    engine = pyttsx3.init()</span><br><span class="line">    engine.setProperty(<span class="string">"voice"</span>, <span class="string">"HKEY_LOCAL_MACHINE\SOFTWARE\Microsoft\Speech\Voices\Tokens\TTS_MS_ZH - CN_HUIHUI_11.0"</span>)</span><br><span class="line">    engine.say(<span class="string">'开始语音合成中...'</span>)</span><br><span class="line">    engine.say(<span class="string">"你好吗？宝儿姐..."</span>)</span><br><span class="line">    engine.say(<span class="string">'全世界都在说中国话...'</span>)</span><br><span class="line">    engine.runAndWait()</span><br></pre></td></tr></table></figure>

<h2 id="4-音频转文字"><a href="#4-音频转文字" class="headerlink" title="4.音频转文字"></a>4.音频转文字</h2><h3 id="4-1-注册IBM应用"><a href="#4-1-注册IBM应用" class="headerlink" title="4.1.注册IBM应用"></a>4.1.注册IBM应用</h3><blockquote>
<p>首先去<a href="https://cloud.ibm.com/registration" target="_blank" rel="noopener">Speech to text官网</a>注册.</p>
</blockquote>
<img src="/archives/890d42a0/IBM-register.png" class title="IBM-注册">

<h3 id="4-2-获取凭证"><a href="#4-2-获取凭证" class="headerlink" title="4.2.获取凭证"></a>4.2.获取凭证</h3><blockquote>
<p>到管理页面，获取凭证</p>
</blockquote>
<img src="/archives/890d42a0/IBM-api%E5%AF%86%E9%92%A5.png" class title="IBM-api密钥">

<h3 id="4-3-转换实现"><a href="#4-3-转换实现" class="headerlink" title="4.3.转换实现"></a>4.3.转换实现</h3><blockquote>
<p>入门教程: <a href="https://cloud.ibm.com/docs/services/speech-to-text?topic=speech-to-text-gettingStarted#getting-started-tutorial" target="_blank" rel="noopener">Speech to Text</a></p>
</blockquote>
<blockquote>
<p><a href="https://cloud.ibm.com/apidocs/speech-to-text/speech-to-text?code=python" target="_blank" rel="noopener">python接口使用参考</a></p>
</blockquote>
<p>音频转换文字方式：</p>
<ul>
<li>python 脚本运行命令转录音频（参考文档中的 <code>curl</code> 命令）</li>
<li>requests调用api接口（<a href="https://gateway-wdc.watsonplatform.net/speech-to-text/api/v1/recognize）" target="_blank" rel="noopener">https://gateway-wdc.watsonplatform.net/speech-to-text/api/v1/recognize）</a></li>
<li>speech_recognition模块</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> speech_recognition <span class="keyword">as</span> sr</span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"> </span><br><span class="line">harvard = sr.AudioFile(<span class="string">'audio.wav'</span>)  <span class="comment"># 文件路径</span></span><br><span class="line">r = sr.Recognizer()</span><br><span class="line"><span class="keyword">with</span> harvard <span class="keyword">as</span> source:</span><br><span class="line">    audio = r.record(source)</span><br><span class="line">print(type(audio))</span><br><span class="line"></span><br><span class="line">IBM_USERNAME = <span class="string">'******'</span></span><br><span class="line">IBM_PASSWORD= <span class="string">'******'</span></span><br><span class="line">text = r.recognize_ibm(audio, username = IBM_USERNAME, password = IBM_PASSWORD, language=<span class="string">'zh-CN'</span>)</span><br><span class="line"><span class="comment"># 或者</span></span><br><span class="line">text = r.recognize_google(audio, language = <span class="string">'zh-CN'</span>)</span><br><span class="line"></span><br><span class="line">print(text)</span><br></pre></td></tr></table></figure>

<h2 id="5-音频格式转换"><a href="#5-音频格式转换" class="headerlink" title="5.音频格式转换"></a>5.音频格式转换</h2><h3 id="5-1-ffmpeg的使用"><a href="#5-1-ffmpeg的使用" class="headerlink" title="5.1.ffmpeg的使用"></a>5.1.ffmpeg的使用</h3><h4 id="5-1-1-安装ffmpeg"><a href="#5-1-1-安装ffmpeg" class="headerlink" title="5.1.1.安装ffmpeg"></a>5.1.1.安装ffmpeg</h4><blockquote>
<p>参考：<a href="http://blog.gregzaal.com/how-to-install-ffmpeg-on-windows/" target="_blank" rel="noopener">ffmpeg使用参考</a></p>
</blockquote>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">pip install ffmpeg</span><br></pre></td></tr></table></figure>

<h4 id="5-1-2-引入exe路径："><a href="#5-1-2-引入exe路径：" class="headerlink" title="5.1.2.引入exe路径："></a>5.1.2.引入exe路径：</h4><ul>
<li>将 <code>ffmpeg</code> 添加到环境变量</li>
<li>在代码中引入 <code>ffmpeg</code> 路径</li>
</ul>
<h4 id="5-1-3-实现转换"><a href="#5-1-3-实现转换" class="headerlink" title="5.1.3.实现转换"></a>5.1.3.实现转换</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">trans_voice_type</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="string">"""音频格式转换"""</span></span><br><span class="line">    source_path = <span class="string">"xxx"</span></span><br><span class="line">    save_path = <span class="string">'xxx'</span></span><br><span class="line">    source_file = os.listdir(source_path)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> source <span class="keyword">in</span> source_file:</span><br><span class="line">        old_path = os.path.join(source_path, source)</span><br><span class="line">        new_name = os.path.join(save_path, source[:<span class="number">-4</span>])  <span class="comment"># 截取音频名字,删除后缀</span></span><br><span class="line">        </span><br><span class="line">        print(<span class="string">'正在转换音频:&#123;&#125;'</span>.format(new_name))</span><br><span class="line">        os.popen(<span class="string">"C:\\python\\python36\\Tools\\ffmpeg\\bin\\ffmpeg.exe -i "</span> + old_path + <span class="string">" "</span> + new_name + <span class="string">".wav"</span>)</span><br><span class="line">    print(<span class="string">'所有音频转换完毕!'</span>)</span><br></pre></td></tr></table></figure>

<h3 id="5-2-pydub的使用"><a href="#5-2-pydub的使用" class="headerlink" title="5.2.pydub的使用"></a>5.2.pydub的使用</h3><h4 id="5-2-1-安装pydub"><a href="#5-2-1-安装pydub" class="headerlink" title="5.2.1.安装pydub"></a>5.2.1.安装pydub</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">pip install pydub</span><br></pre></td></tr></table></figure>

<h4 id="5-2-2-实现转换"><a href="#5-2-2-实现转换" class="headerlink" title="5.2.2.实现转换"></a>5.2.2.实现转换</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> pydub <span class="keyword">import</span> AudioSegment</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">convert_video</span><span class="params">(file_path)</span>:</span></span><br><span class="line">    outfile = os.path.splitext(os.path.realpath(file_path))[<span class="number">0</span>] + <span class="string">'.wav'</span></span><br><span class="line">    AudioSegment.converter = <span class="string">"C:\\python\\python36\\Tools\\ffmpeg\\bin\\ffmpeg.exe"</span></span><br><span class="line">    AudioSegment.from_file(file_path).export(outfile, format=<span class="string">'wav'</span>)</span><br></pre></td></tr></table></figure>

<hr>
<blockquote>
<p>以上关于pydub转换时，会有FileNotFoundError报错信息，这是由于依赖程序ffmpeg未找到，手动设置后，依旧没解决，这里做个标记，后续解决再补充，或者有人知道的可以告诉我一下，感谢！</p>
</blockquote>
]]></content>
      <categories>
        <category>编程</category>
        <category>Python</category>
      </categories>
      <tags>
        <tag>音频</tag>
      </tags>
  </entry>
  <entry>
    <title>Python（二）- 虚拟环境管理：pyenv、virtualwnv、virtualenvwrapper的安装</title>
    <url>/archives/9ceab481.html</url>
    <content><![CDATA[<blockquote>
<p>python 中使用虚拟环境</p>
</blockquote>
<a id="more"></a>

<p>很多人都说Python是一门胶水语言，事实上，它的确很强大！<br>应用于很多领域，注重模块化，因此我们需要一种手段，能够帮助我们去区分和管理不同的模块集合（环境），适应不同需求，同时可以丢掉那些不必要且繁重的依赖（纯净）。<br>虚拟环境管理就是为这个而生的。</p>
<h1 id="1-pyenv"><a href="#1-pyenv" class="headerlink" title="1. pyenv"></a>1. pyenv</h1><blockquote>
<p>针对python多版本的管理工具，可以自由切换不同版本，适应多种需求。<br>类似git的分支管理。<br>但不支持Windows，不过Windows下有一个替代品：<code>pywin</code></p>
</blockquote>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 安装curl 和 git</span></span><br><span class="line">sudo apt-get install curl git-core</span><br><span class="line"><span class="comment"># 安装 (如果用的是 zsh 的话，则替换命令中的 bash)</span></span><br><span class="line">curl -L https://github.com/pyenv/pyenv-installer/raw/master/bin/pyenv-installer | bash</span><br><span class="line">or</span><br><span class="line"><span class="comment"># 安装到 ~/.pyenv 目录</span></span><br><span class="line">git <span class="built_in">clone</span> https://github.com/pyenv/pyenv.git ~/.pyenv</span><br></pre></td></tr></table></figure>
<blockquote>
<p>配置环境变量 (zsh则将 <code>~/.bashrc</code> 修改为 <code>/.zshrc</code> )</p>
</blockquote>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">echo</span> <span class="string">'export PYENV_ROOT="$HOME/.pyenv"'</span> &gt;&gt; ~/.bashrc</span><br><span class="line"><span class="built_in">echo</span> <span class="string">'export PATH="$PYENV_ROOT/bin:$PATH"'</span> &gt;&gt; ~/.bashrc</span><br><span class="line"><span class="built_in">source</span> ~/.bashrc</span><br></pre></td></tr></table></figure>

<blockquote>
<p>一些基本操作：</p>
</blockquote>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">pyenv update              <span class="comment"># 更新</span></span><br><span class="line">rm -fr ~/.pyenv           <span class="comment"># 卸载：删除目录</span></span><br><span class="line"></span><br><span class="line">pyenv install -list       <span class="comment"># 显示可安装版本</span></span><br><span class="line">pyenv versions            <span class="comment"># 显示已有版本</span></span><br><span class="line"></span><br><span class="line">pyenv install `版本号`     <span class="comment"># 安装指定版本</span></span><br><span class="line">pyenv uninstall `版本号`   <span class="comment"># 卸载指定版本</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># local：临时，global：永久</span></span><br><span class="line">pyenv global `版本号`      <span class="comment"># 指定全局版本</span></span><br><span class="line">pyenv global system       <span class="comment"># 恢复系统全局默认版本</span></span><br><span class="line">pyenv <span class="built_in">local</span> system        <span class="comment"># 设置当前虚拟版本为系统默认的版本</span></span><br><span class="line">pyenv <span class="built_in">local</span> `版本号`		  <span class="comment"># 指定本地默认版本</span></span><br></pre></td></tr></table></figure>

<h1 id="2-virtualenv"><a href="#2-virtualenv" class="headerlink" title="2. virtualenv"></a>2. virtualenv</h1><blockquote>
<p>virtualenv 提供了一种功能， 将一个目录建成一个python的虚拟环境， 用户可以建立多个虚拟环境， 可以指定每个环境中的python版本， 环境之间相互独立。</p>
</blockquote>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 安装</span></span><br><span class="line">pip install virtualenv</span><br><span class="line"><span class="comment"># 进入环境目录</span></span><br><span class="line"><span class="built_in">cd</span> `env_name`</span><br><span class="line"><span class="comment"># 创建虚拟环境</span></span><br><span class="line">virtualenv [-p `python_path` --no-site-packages] `env_name`</span><br><span class="line"><span class="comment"># 切换不同的虚拟环境</span></span><br><span class="line"><span class="built_in">source</span> `env_name`/bin/activate</span><br><span class="line"><span class="comment"># 退出</span></span><br><span class="line">deactivate</span><br><span class="line"><span class="comment"># 删除</span></span><br><span class="line">rm `env_name`</span><br></pre></td></tr></table></figure>

<h1 id="3-virtualevnwapper"><a href="#3-virtualevnwapper" class="headerlink" title="3. virtualevnwapper"></a>3. virtualevnwapper</h1><blockquote>
<p>对virtualenv的强化和扩展，使管理更加方便简单。</p>
</blockquote>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 安装</span></span><br><span class="line">pip install virtualenv  <span class="comment"># 依赖</span></span><br><span class="line">pip install virtualenvwrapper</span><br><span class="line"><span class="comment"># 创建</span></span><br><span class="line">mkvirtualenv [-p `python_path`] `env_name`</span><br><span class="line"><span class="comment"># 列出所有虚拟环境</span></span><br><span class="line">workon 或 lsvirtualenv -b</span><br><span class="line"><span class="comment"># 切换</span></span><br><span class="line">workon `env_name`</span><br><span class="line"><span class="comment"># 退出</span></span><br><span class="line">deactive</span><br><span class="line"><span class="comment"># 删除</span></span><br><span class="line">rmvirtualenv `env_name`</span><br></pre></td></tr></table></figure>


<blockquote>
<p>常用：<br><code>pyenv + virtualenv</code>  和  <code>virtualenv + virtualenvwrapper</code> 的组合<br>个人倾向于后者</p>
</blockquote>
<p>现在可以随意地创建不同的虚拟环境，供不同项目使用和管理了。<br>当然，如果对docker熟悉的话，这也是一个很好的选择。</p>
<blockquote>
<p>原文地址： CSDN博客 - <a href="https://blog.csdn.net/weixin_41599858/article/details/101801050" target="_blank" rel="noopener">Python（二）- 虚拟环境管理：pyenv、virtualwnv、virtualenvwrapper的安装</a></p>
</blockquote>
]]></content>
      <categories>
        <category>编程</category>
        <category>Python</category>
      </categories>
      <tags>
        <tag>虚拟环境</tag>
      </tags>
  </entry>
  <entry>
    <title>Python（八）- url 代理设置!</title>
    <url>/archives/17e4c729.html</url>
    <content><![CDATA[<p>之前有同事问到关于 Python 中URL走代理的问题，这里做个简单的记录。</p>
<a id="more"></a>

<h2 id="一、部分思路"><a href="#一、部分思路" class="headerlink" title="一、部分思路"></a>一、部分思路</h2><p>主要方法有：方法封装、类继承、装饰器、全局代理等。</p>
<h2 id="二、具体实现"><a href="#二、具体实现" class="headerlink" title="二、具体实现"></a>二、具体实现</h2><blockquote>
<p>这里简述一下装饰器和全局代理的实现</p>
</blockquote>
<h3 id="2-1-装饰器"><a href="#2-1-装饰器" class="headerlink" title="2.1.装饰器"></a>2.1.装饰器</h3><h4 id="2-1-1-简介"><a href="#2-1-1-简介" class="headerlink" title="2.1.1.简介"></a>2.1.1.简介</h4><p>在不修改被装饰对象的源代码以及调用方式的前提下为被装饰对象添加新功能</p>
<ul>
<li><p>原则：</p>
<ul>
<li>1.不修改被装饰对象的源代码</li>
<li>2.不修改被装饰对象的调用方式</li>
</ul>
</li>
<li><p>目标：</p>
<ul>
<li>为被装饰对象添加新功能</li>
</ul>
</li>
</ul>
<h4 id="2-1-2-实现"><a href="#2-1-2-实现" class="headerlink" title="2.1.2.实现"></a>2.1.2.实现</h4><blockquote>
<p>此处以 requests 为例</p>
</blockquote>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"></span><br><span class="line">PROXY_DCT = dict()</span><br><span class="line">PROXY_DCT[<span class="string">'http'</span>] = <span class="string">'http://username:password@host:port'</span></span><br><span class="line">PROXY_DCT[<span class="string">'https'</span>] = <span class="string">'https://username:password@host:port'</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">add_proxy</span><span class="params">(fn)</span>:</span></span><br><span class="line">    <span class="comment"># 增加requests代理</span></span><br><span class="line">    proxies = PROXY_DCT</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">inner</span><span class="params">(*args, **kwargs)</span>:</span></span><br><span class="line">        <span class="keyword">from</span> requests <span class="keyword">import</span> Session</span><br><span class="line">        <span class="keyword">from</span> functools <span class="keyword">import</span> partial</span><br><span class="line">        s = Session()</span><br><span class="line">        s.proxies = proxies</span><br><span class="line">        <span class="keyword">return</span> partial(fn, *args, **kwargs)(s)</span><br><span class="line">    <span class="keyword">return</span> inner</span><br><span class="line"></span><br><span class="line"><span class="meta">@add_proxy</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">test</span><span class="params">(param, s)</span>:</span></span><br><span class="line">    url = <span class="string">'http://www.baidu.com'</span></span><br><span class="line">    r = s.get(url)</span><br><span class="line">    print(r.text)</span><br><span class="line">    print(param)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    test(<span class="string">'hello'</span>)</span><br></pre></td></tr></table></figure>

<h3 id="2-2-全局代理"><a href="#2-2-全局代理" class="headerlink" title="2.2.全局代理"></a>2.2.全局代理</h3><h4 id="（1）设置Python环境变量"><a href="#（1）设置Python环境变量" class="headerlink" title="（1）设置Python环境变量"></a>（1）设置Python环境变量</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"></span><br><span class="line">os.environ[<span class="string">'http'</span>] = <span class="string">'http://user:pwd@host:port'</span></span><br><span class="line">os.environ[<span class="string">'https'</span>] = <span class="string">'https://user:pwd@host:port'</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">test</span><span class="params">()</span>:</span></span><br><span class="line">    url = <span class="string">'http://www.163.com/'</span></span><br><span class="line">    res = requests.get(url)</span><br><span class="line">    print(res.text)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    test()</span><br></pre></td></tr></table></figure>

<h4 id="（2）urllib注册"><a href="#（2）urllib注册" class="headerlink" title="（2）urllib注册"></a>（2）urllib注册</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> urllib.request</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">handler = urllib.request.ProxyHandler(&#123;<span class="string">'http'</span>: <span class="string">'http://user:pwd@host:port'</span>&#125;)</span><br><span class="line">opener = urllib.request.build_opener(handler)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 方式一：Opener 已经设置好代理了，调用它的 open() 方法即可使用此代理访问链接</span></span><br><span class="line">response = opener.open(<span class="string">'http://www.163.com/'</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 方式二：安装opener设置全局代理</span></span><br><span class="line">urllib.request.install_opener(opener)</span><br></pre></td></tr></table></figure>

<h4 id="（3）socks、socket注册"><a href="#（3）socks、socket注册" class="headerlink" title="（3）socks、socket注册"></a>（3）socks、socket注册</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> urllib.request</span><br><span class="line"><span class="keyword">import</span> socks, socket</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">socks.set_default_proxy(socks.PROXY_TYPE_SOCKS5, host, port)</span><br><span class="line">socket.socket=socks.socksocket</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">test</span><span class="params">()</span>:</span></span><br><span class="line">    url = <span class="string">"https://blog.csdn.net/"</span>  </span><br><span class="line">    page = urllib.request.urlopen(url)  </span><br><span class="line">    data = page.read()    <span class="comment">#读取全部</span></span><br><span class="line">    dataline = page.readline()    <span class="comment">#读取一行内容</span></span><br><span class="line">    print(data)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    test()</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>编程</category>
        <category>Python</category>
      </categories>
      <tags>
        <tag>代理配置</tag>
      </tags>
  </entry>
  <entry>
    <title>Python（五）- 连接sqlite3以及CURD操作！</title>
    <url>/archives/5e26e967.html</url>
    <content><![CDATA[<blockquote>
<p>本文主要描述使用python连接sqlite数据库，并进行简单的CURD操作</p>
</blockquote>
<a id="more"></a>

<h2 id="一、简介"><a href="#一、简介" class="headerlink" title="一、简介"></a>一、简介</h2><p><strong>SQLite</strong>是一种C语言的嵌入式的数据库，它实现了一个 小型， 快速， 自包含， 高可靠性， 功能齐全的 SQL数据库引擎，它是一个零配置的数据库，我们不需要在系统中配置。SQLite 直接访问其存储文件。</p>
<h2 id="二、安装"><a href="#二、安装" class="headerlink" title="二、安装"></a>二、安装</h2><p>安装比较简单，<br>具体的安装步骤，可以参考这篇博客：<a href="https://www.cnblogs.com/xcsn/p/6050878.html" target="_blank" rel="noopener">Windows 上如何安装Sqlite</a></p>
<h2 id="三、使用"><a href="#三、使用" class="headerlink" title="三、使用"></a>三、使用</h2><blockquote>
<p>这里主要展示利用python中的api去连接和操作sqlite</p>
</blockquote>
<p>首先，操作关系数据库，需要连接到数据库，一个数据库连接称为Connection；<br>之后，打开游标，称之为Cursor，通过Cursor执行SQL语句；<br>最后，获得执行结果。</p>
<h3 id="1-简单使用"><a href="#1-简单使用" class="headerlink" title="1. 简单使用"></a>1. 简单使用</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 导入api模块</span></span><br><span class="line"><span class="keyword">import</span> sqlite3</span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建连接</span></span><br><span class="line">conn = sqlite3.connect(<span class="string">'test.db'</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建一个Cursor游标</span></span><br><span class="line">cursor = conn.cursor()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 执行sql语句</span></span><br><span class="line">cursor.execute(<span class="string">'CREATE TABLE USER (ID INT PRIMARY KEY, NAME VARCHAR(50) NOT NULL, AGE INT NOT NULL)'</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 提交事务</span></span><br><span class="line">conn.commit() </span><br><span class="line"></span><br><span class="line"><span class="comment"># 关闭Connection</span></span><br><span class="line">conn.close()</span><br></pre></td></tr></table></figure>


<h3 id="2-自定义操作类"><a href="#2-自定义操作类" class="headerlink" title="2. 自定义操作类"></a>2. 自定义操作类</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> sqlite3</span><br><span class="line"><span class="keyword">import</span> collections</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">SQLiteAPI</span><span class="params">(object)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, dbname=None)</span>:</span></span><br><span class="line">        self.dbname = dbname <span class="keyword">if</span> dbname <span class="keyword">is</span> <span class="keyword">not</span> <span class="literal">None</span> <span class="keyword">else</span> <span class="string">'test.db'</span></span><br><span class="line">        self.conn = sqlite3.connect(self.dbname)  <span class="comment"># 如果文件不存在，会自动在当前目录创建:</span></span><br><span class="line">        <span class="comment"># 创建一个Cursor</span></span><br><span class="line">        self.cursor = self.conn.cursor()</span><br><span class="line">        </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">create</span><span class="params">(self, table: str, fields: dict)</span>:</span></span><br><span class="line">        <span class="string">'''</span></span><br><span class="line"><span class="string">        建表（待完善）</span></span><br><span class="line"><span class="string">        :param table: 表名</span></span><br><span class="line"><span class="string">        :param fields: 字段及类型</span></span><br><span class="line"><span class="string">        :return: 执行结果</span></span><br><span class="line"><span class="string">        '''</span></span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line">        </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">insert</span><span class="params">(self, table: str, data: dict)</span>:</span></span><br><span class="line">        <span class="string">'''</span></span><br><span class="line"><span class="string">        插入语句</span></span><br><span class="line"><span class="string">        :param table: 表名</span></span><br><span class="line"><span class="string">        :param data: 字典（包含插入列，值）</span></span><br><span class="line"><span class="string">        :return: 执行结果</span></span><br><span class="line"><span class="string">        '''</span></span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">select</span><span class="params">(self, table: str, cols=<span class="string">'*'</span>, where=<span class="string">''</span>)</span>:</span></span><br><span class="line">        <span class="string">'''</span></span><br><span class="line"><span class="string">        查询</span></span><br><span class="line"><span class="string">        :param table: 表名</span></span><br><span class="line"><span class="string">        :param cols: 查询列</span></span><br><span class="line"><span class="string">        :param where: 查询条件</span></span><br><span class="line"><span class="string">        :return: 查询结果</span></span><br><span class="line"><span class="string">        '''</span></span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line">   	</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">update</span><span class="params">(self, table: str, data: dict, where=<span class="string">''</span>)</span>:</span></span><br><span class="line">        <span class="string">'''</span></span><br><span class="line"><span class="string">        更新表</span></span><br><span class="line"><span class="string">        :param table: 表名</span></span><br><span class="line"><span class="string">        :param data:更新数据</span></span><br><span class="line"><span class="string">        :param where:条件</span></span><br><span class="line"><span class="string">        :return: 执行结果</span></span><br><span class="line"><span class="string">        '''</span></span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line">        </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">delete</span><span class="params">(self, table: str, where=<span class="string">''</span>)</span>:</span></span><br><span class="line">        <span class="string">'''</span></span><br><span class="line"><span class="string">        删除数据</span></span><br><span class="line"><span class="string">        :param table: 表名</span></span><br><span class="line"><span class="string">        :param where: 条件</span></span><br><span class="line"><span class="string">        :return: 执行结果</span></span><br><span class="line"><span class="string">        '''</span></span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line">       </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">drop</span><span class="params">(self, table: str)</span>:</span></span><br><span class="line">        <span class="string">'''</span></span><br><span class="line"><span class="string">        删除表</span></span><br><span class="line"><span class="string">        :param table:</span></span><br><span class="line"><span class="string">        :return:</span></span><br><span class="line"><span class="string">        '''</span></span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line">    </span><br><span class="line">	<span class="function"><span class="keyword">def</span> <span class="title">close</span><span class="params">(self)</span>:</span></span><br><span class="line">        self.cursor.close()  <span class="comment"># 关闭Cursor</span></span><br><span class="line">        self.conn.close()  <span class="comment"># 关闭Connection</span></span><br></pre></td></tr></table></figure>


<h4 id="2-1-创建表"><a href="#2-1-创建表" class="headerlink" title="2.1. 创建表"></a>2.1. 创建表</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">create</span><span class="params">(self, table: str, fields: dict)</span>:</span></span><br><span class="line">    <span class="string">'''</span></span><br><span class="line"><span class="string">    建表（待完善）</span></span><br><span class="line"><span class="string">    :param table: 表名</span></span><br><span class="line"><span class="string">    :param fields: 字段及类型</span></span><br><span class="line"><span class="string">    :return: 执行结果</span></span><br><span class="line"><span class="string">    '''</span></span><br><span class="line">    flag = <span class="literal">True</span></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        data = fields.items()</span><br><span class="line">        func = <span class="keyword">lambda</span> x: <span class="string">' '</span>.join(x)</span><br><span class="line">        field_info = <span class="string">','</span>.join(list(map(func, data)))</span><br><span class="line">        <span class="comment"># create table fields</span></span><br><span class="line">        sql_create = <span class="string">f"CREATE TABLE <span class="subst">&#123;table&#125;</span> (<span class="subst">&#123;field_info&#125;</span>)"</span></span><br><span class="line">        print(sql_create)</span><br><span class="line">        self.cursor.execute(sql_create)</span><br><span class="line">        self.conn.commit()  <span class="comment"># 提交事务</span></span><br><span class="line">    <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">        print(e)</span><br><span class="line">        flag = <span class="literal">False</span></span><br><span class="line">    <span class="keyword">return</span> flag</span><br></pre></td></tr></table></figure>

<h4 id="2-2-插入语句（增加记录）"><a href="#2-2-插入语句（增加记录）" class="headerlink" title="2.2. 插入语句（增加记录）"></a>2.2. 插入语句（增加记录）</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">insert</span><span class="params">(self, table: str, data: dict)</span>:</span></span><br><span class="line">    <span class="string">'''</span></span><br><span class="line"><span class="string">    插入语句</span></span><br><span class="line"><span class="string">    :param table: 表名</span></span><br><span class="line"><span class="string">    :param data: 字典（包含插入列，值）</span></span><br><span class="line"><span class="string">    :return: 执行结果</span></span><br><span class="line"><span class="string">    '''</span></span><br><span class="line">    flag = <span class="literal">True</span></span><br><span class="line">    count = <span class="number">0</span></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        data = collections.OrderedDict(data)</span><br><span class="line">        keys = tuple(data.keys())</span><br><span class="line">        vals = tuple(data.values())</span><br><span class="line">        sql_insert = <span class="string">'''INSERT INTO %s %s VALUES %s'''</span> % (table, keys, vals)</span><br><span class="line">        print(sql_insert)</span><br><span class="line">        self.cursor.execute(sql_insert)</span><br><span class="line">        count = self.cursor.rowcount</span><br><span class="line">        self.conn.commit()</span><br><span class="line">    <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">        print(e)</span><br><span class="line">        flag = <span class="literal">False</span></span><br><span class="line">    <span class="keyword">return</span> flag, count</span><br></pre></td></tr></table></figure>

<h4 id="2-3-查询操作"><a href="#2-3-查询操作" class="headerlink" title="2.3. 查询操作"></a>2.3. 查询操作</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">select</span><span class="params">(self, table: str, cols=<span class="string">'*'</span>, where=<span class="string">''</span>)</span>:</span></span><br><span class="line">    <span class="string">'''</span></span><br><span class="line"><span class="string">    查询</span></span><br><span class="line"><span class="string">    :param table: 表名</span></span><br><span class="line"><span class="string">    :param cols: 查询列</span></span><br><span class="line"><span class="string">    :param where: 查询条件</span></span><br><span class="line"><span class="string">    :return: 查询结果</span></span><br><span class="line"><span class="string">    '''</span></span><br><span class="line">    values = <span class="literal">None</span></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        where = <span class="string">'WHERE '</span> + where <span class="keyword">if</span> where <span class="keyword">else</span> <span class="string">''</span></span><br><span class="line">        sql_select = <span class="string">'''SELECT &#123;1&#125; FROM &#123;0&#125; &#123;2&#125;'''</span>.format(table, cols, where)</span><br><span class="line">        print(sql_select)</span><br><span class="line">        self.cursor.execute(sql_select)</span><br><span class="line">        values = self.cursor.fetchall()</span><br><span class="line">    <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">        print(e)</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> values</span><br></pre></td></tr></table></figure>

<h4 id="2-4-更新操作"><a href="#2-4-更新操作" class="headerlink" title="2.4. 更新操作"></a>2.4. 更新操作</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">update</span><span class="params">(self, table: str, data: dict, where=<span class="string">''</span>)</span>:</span></span><br><span class="line">    <span class="string">'''</span></span><br><span class="line"><span class="string">    更新表</span></span><br><span class="line"><span class="string">    :param table: 表名</span></span><br><span class="line"><span class="string">    :param data:更新数据</span></span><br><span class="line"><span class="string">    :param where:条件</span></span><br><span class="line"><span class="string">    :return: 执行结果</span></span><br><span class="line"><span class="string">    '''</span></span><br><span class="line">    flag = <span class="literal">True</span></span><br><span class="line">    count = <span class="number">0</span></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        data = data.items()</span><br><span class="line">        func = <span class="keyword">lambda</span> x: <span class="string">' = '</span>.join(x)</span><br><span class="line">        field_info = <span class="string">','</span>.join(list(map(func, data)))</span><br><span class="line">        where = <span class="string">' WHERE '</span> + where <span class="keyword">if</span> where <span class="keyword">else</span> <span class="string">''</span></span><br><span class="line">        sql_update = <span class="string">'''UPDATE &#123;0&#125; SET &#123;1&#125; &#123;2&#125;'''</span>.format(table, field_info, where)</span><br><span class="line">        <span class="comment"># sql_update = '''UPDATE USER SET NAME = 'sun' WHERE ID = 3 '''   # test</span></span><br><span class="line">        print(sql_update)</span><br><span class="line">        self.cursor.execute(sql_update)</span><br><span class="line">        count = self.cursor.rowcount</span><br><span class="line">        self.conn.commit()</span><br><span class="line">    <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">        print(e)</span><br><span class="line">        flag = <span class="literal">False</span></span><br><span class="line">    <span class="keyword">return</span> flag, count</span><br></pre></td></tr></table></figure>

<h4 id="2-5-删除操作"><a href="#2-5-删除操作" class="headerlink" title="2.5. 删除操作"></a>2.5. 删除操作</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">delete</span><span class="params">(self, table: str, where=<span class="string">''</span>)</span>:</span></span><br><span class="line">    <span class="string">'''</span></span><br><span class="line"><span class="string">    删除数据</span></span><br><span class="line"><span class="string">    :param table: 表名</span></span><br><span class="line"><span class="string">    :param where: 条件</span></span><br><span class="line"><span class="string">    :return: 执行结果</span></span><br><span class="line"><span class="string">    '''</span></span><br><span class="line">    flag = <span class="literal">True</span></span><br><span class="line">    count = <span class="number">0</span></span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> where:</span><br><span class="line">        print(<span class="string">'条件不能为空，请重新尝试！'</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">False</span>, count</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        sql_delete = <span class="string">'''DELETE FROM &#123;0&#125; WHERE &#123;1&#125;'''</span>.format(table, where)</span><br><span class="line">        </span><br><span class="line">        self.cursor.execute(sql_delete)</span><br><span class="line">        count = self.cursor.rowcount</span><br><span class="line">        self.conn.commit()</span><br><span class="line">    <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">        print(e)</span><br><span class="line">        flag = <span class="literal">False</span></span><br><span class="line">    <span class="keyword">return</span> flag, count</span><br></pre></td></tr></table></figure>

<h4 id="2-6-删除表"><a href="#2-6-删除表" class="headerlink" title="2.6. 删除表"></a>2.6. 删除表</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">drop</span><span class="params">(self, table: str)</span>:</span></span><br><span class="line">    <span class="string">'''</span></span><br><span class="line"><span class="string">    删除表</span></span><br><span class="line"><span class="string">    :param table:</span></span><br><span class="line"><span class="string">    :return:</span></span><br><span class="line"><span class="string">    '''</span></span><br><span class="line">    flag = <span class="literal">True</span></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        sql_drop = <span class="string">f'''DROP TABLE <span class="subst">&#123;table&#125;</span>'''</span></span><br><span class="line">        self.cursor.execute(sql_drop)</span><br><span class="line">        self.conn.commit()</span><br><span class="line">    <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">        print(e)</span><br><span class="line">        flag = <span class="literal">False</span></span><br><span class="line">    <span class="keyword">return</span> flag</span><br></pre></td></tr></table></figure>


<h3 id="3-测试"><a href="#3-测试" class="headerlink" title="3. 测试"></a>3. 测试</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">code_test</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="comment"># 新建表</span></span><br><span class="line">    fields = &#123;</span><br><span class="line">        <span class="string">'id '</span>: <span class="string">'INT PRIMARY KEY'</span>,</span><br><span class="line">        <span class="string">'name'</span>: <span class="string">'VARCHAR(50) NOT NULL'</span>,</span><br><span class="line">        <span class="string">'phone'</span>: <span class="string">'VARCHAR(20)'</span>,</span><br><span class="line">        <span class="string">'address'</span>: <span class="string">'VARCHAR(50)'</span>,</span><br><span class="line">        <span class="string">'age'</span>: <span class="string">'INT NOT NULL'</span>,</span><br><span class="line">        <span class="string">'position'</span>: <span class="string">'VARCHAR(20)'</span>,</span><br><span class="line">        <span class="string">'salary'</span>: <span class="string">'REAL'</span>,</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment"># res = myApi.create('user',fields)</span></span><br><span class="line">    <span class="comment"># print('create result is :', res)</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment"># 插入数据</span></span><br><span class="line">    insert_data = &#123;</span><br><span class="line">        <span class="string">'id'</span>: <span class="string">'1'</span>,</span><br><span class="line">        <span class="string">'name'</span>: <span class="string">'alfred'</span>,</span><br><span class="line">        <span class="string">'phone'</span>: <span class="string">'111111'</span>,</span><br><span class="line">        <span class="string">'age'</span>: <span class="string">'20'</span>,</span><br><span class="line">        <span class="string">'salary'</span>: <span class="string">'15000'</span>,</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment"># res2 = myApi.insert('user', insert_data)</span></span><br><span class="line">    <span class="comment"># print('insert result is :', res2)</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment"># 查询数据</span></span><br><span class="line">    <span class="comment"># res3 = myApi.select('user', cols='id,name', where='id=2')</span></span><br><span class="line">    <span class="comment"># res3 = myApi.select('user')</span></span><br><span class="line">    <span class="comment"># print('select result is :', res3)</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment"># 更新数据(提示：no such column: 加''号，可以用转义字符)</span></span><br><span class="line">    update_data = &#123;</span><br><span class="line">        <span class="string">'name'</span>: <span class="string">'\'Lucy\''</span></span><br><span class="line">    &#125;</span><br><span class="line">    res4 = myApi.update(<span class="string">'user'</span>, data=update_data, where=<span class="string">'id=3'</span>)</span><br><span class="line">    print(<span class="string">'update result is :'</span>, res4)</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># 删除数据</span></span><br><span class="line">    <span class="comment"># res5 = myApi.delete('user', where='id=3')</span></span><br><span class="line">    <span class="comment"># print('delete result is :', res5)</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment"># 删除表</span></span><br><span class="line">    <span class="comment"># res6 = myApi.drop('user')</span></span><br><span class="line">    <span class="comment"># print('drop result is :', res6)</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">myApi = SQLiteAPI()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    code_test()</span><br></pre></td></tr></table></figure>


<hr>
<p>结束，以上是对sqlite数据库的一些简单操作！</p>
<blockquote>
<p>原文地址： CSDN博客 - <a href="https://blog.csdn.net/weixin_41599858/article/details/102888828" target="_blank" rel="noopener">Python（五）- 连接sqlite3以及CURD操作！</a></p>
</blockquote>
]]></content>
      <categories>
        <category>编程</category>
        <category>Python</category>
        <category>数据库</category>
      </categories>
      <tags>
        <tag>CURD</tag>
        <tag>SQLite</tag>
      </tags>
  </entry>
  <entry>
    <title>Python（六）- 连接MySQL数据库以及CURD操作！</title>
    <url>/archives/17f677f9.html</url>
    <content><![CDATA[<blockquote>
<p>本文介绍python中对MySQL数据库操作的几个模块</p>
</blockquote>
<a id="more"></a>

<h2 id="一、简介"><a href="#一、简介" class="headerlink" title="一、简介"></a>一、简介</h2><p>MySQL是一个轻量级的关系型数据库管理系统，由于性能高、成本低、可靠性好，已经成为最流行的开源数据库，广泛应用于中小型网络</p>
<h2 id="二、安装"><a href="#二、安装" class="headerlink" title="二、安装"></a>二、安装</h2><p>具体安装步骤可以参考：<a href="https://blog.csdn.net/zhouzezhou/article/details/52446608" target="_blank" rel="noopener">Windows安装MySQL</a></p>
<h2 id="三、使用"><a href="#三、使用" class="headerlink" title="三、使用"></a>三、使用</h2><blockquote>
<p>这里主要举例，介绍几种python操作MySQL的模块：MySQLdb、pymysql、sqlalchemy、peewee。</p>
</blockquote>
<p><strong>数据库配置：</strong></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># baseConfig.py</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 数据库配置</span></span><br><span class="line">DATABASE = &#123;</span><br><span class="line">    <span class="string">'mysql'</span>: &#123;</span><br><span class="line">        <span class="string">'username'</span>: <span class="string">'alfred'</span>,</span><br><span class="line">        <span class="string">'password'</span>: <span class="string">'123456'</span>,</span><br><span class="line">        <span class="string">'host'</span>: <span class="string">'localhost'</span>,</span><br><span class="line">        <span class="string">'port'</span>: <span class="number">3306</span>,</span><br><span class="line">        <span class="string">'name'</span>: <span class="string">'tests'</span>,</span><br><span class="line">    &#125;,</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>


<h3 id="1-MySQLdb"><a href="#1-MySQLdb" class="headerlink" title="1. MySQLdb"></a>1. MySQLdb</h3><blockquote>
<p>基于C库来写的mysql连接库，这个使用比较简单，对于增删改查操作，多用原生sql语句，可以根据需要而定制。</p>
</blockquote>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> baseConfig <span class="keyword">import</span> DATABASE</span><br><span class="line"></span><br><span class="line">DB_CONF = DATABASE[<span class="string">'mysql'</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment"># ----------------- MySQLdb ----------------</span></span><br><span class="line"><span class="keyword">import</span> MySQLdb</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">SQLTool_V1</span><span class="params">(object)</span>:</span></span><br><span class="line">    <span class="string">"""使用MySQLdb"""</span></span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, **kwargs)</span>:</span></span><br><span class="line">       </span><br><span class="line">        self.db = MySQLdb.connect(</span><br><span class="line">            host=kwargs[<span class="string">"host"</span>] <span class="keyword">or</span> <span class="string">'127.0.0.1'</span>,  <span class="comment"># 主机名</span></span><br><span class="line">            port=kwargs[<span class="string">"port"</span>] <span class="keyword">or</span> <span class="number">3306</span>,  <span class="comment"># 端口号</span></span><br><span class="line">            user=kwargs[<span class="string">"username"</span>] <span class="keyword">or</span> <span class="string">'alfred'</span>,  <span class="comment"># 用户名</span></span><br><span class="line">            passwd=kwargs[<span class="string">"password"</span>] <span class="keyword">or</span> <span class="string">'123456'</span>,  <span class="comment"># 密码</span></span><br><span class="line">            db=kwargs[<span class="string">"name"</span>] <span class="keyword">or</span> <span class="string">'tests'</span>)  <span class="comment"># 数据库名称</span></span><br><span class="line">        <span class="comment"># 查询前，必须先获取游标</span></span><br><span class="line">        self.cur = self.db.cursor()</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">select</span><span class="params">(self, table)</span>:</span></span><br><span class="line">        <span class="comment"># 执行的都是原生SQL语句</span></span><br><span class="line">        self.cur.execute(<span class="string">f"SELECT * FROM <span class="subst">&#123;table&#125;</span>"</span>)</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">for</span> row <span class="keyword">in</span> self.cur.fetchall():</span><br><span class="line">            print(row)</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">create</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">update</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">add</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">delete</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">close</span><span class="params">(self)</span>:</span></span><br><span class="line">        self.cur.close()</span><br><span class="line">        self.db.close()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">sql_v1 = SQLTool_V1(**DB_CONF)</span><br><span class="line"></span><br><span class="line">sql_v1.select(<span class="string">'user'</span>)</span><br></pre></td></tr></table></figure>

<h3 id="2-pymysql"><a href="#2-pymysql" class="headerlink" title="2. pymysql"></a>2. pymysql</h3><blockquote>
<p>pymysql 是纯python写的主流连接库，使用也比较简单</p>
</blockquote>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">import</span> pymysql</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">SQLTool_V2</span><span class="params">(object)</span>:</span></span><br><span class="line">    <span class="string">"""使用pymysql"""</span></span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, **kwargs)</span>:</span></span><br><span class="line">        self.conn = pymysql.connect(</span><br><span class="line">            host=kwargs[<span class="string">"host"</span>] <span class="keyword">or</span> <span class="string">'127.0.0.1'</span>,  <span class="comment"># 主机名</span></span><br><span class="line">            port=kwargs[<span class="string">"port"</span>] <span class="keyword">or</span> <span class="number">3306</span>,  <span class="comment"># 端口号</span></span><br><span class="line">            user=kwargs[<span class="string">"username"</span>] <span class="keyword">or</span> <span class="string">'alfred'</span>,  <span class="comment"># 用户名</span></span><br><span class="line">            passwd=kwargs[<span class="string">"password"</span>] <span class="keyword">or</span> <span class="string">'123456'</span>,  <span class="comment"># 密码</span></span><br><span class="line">            db=kwargs[<span class="string">"name"</span>] <span class="keyword">or</span> <span class="string">'tests'</span>)  <span class="comment"># 数据库名称</span></span><br><span class="line">        self.cur = self.conn.cursor()</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">select</span><span class="params">(self, table)</span>:</span></span><br><span class="line">        self.cur.execute(<span class="string">f"SELECT * FROM <span class="subst">&#123;table&#125;</span>"</span>)</span><br><span class="line">        <span class="keyword">for</span> r <span class="keyword">in</span> self.cur:</span><br><span class="line">            print(r)</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">close</span><span class="params">(self)</span>:</span></span><br><span class="line">        self.cur.close()</span><br><span class="line">        self.conn.close()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">sql_v2 = SQLTool_V2(**DB_CONF)</span><br><span class="line"></span><br><span class="line">sql_v2.select(<span class="string">'user'</span>)</span><br></pre></td></tr></table></figure>

<h3 id="3-sqlalchemy"><a href="#3-sqlalchemy" class="headerlink" title="3. sqlalchemy"></a>3. sqlalchemy</h3><blockquote>
<p>主要特点：既支持原生 SQL，又支持 ORM </p>
</blockquote>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> datetime</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> baseConfig <span class="keyword">import</span> DATABASE</span><br><span class="line"></span><br><span class="line">DB_CONF = DATABASE[<span class="string">'mysql'</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment"># ----------------- sqlalchemy ----------------</span></span><br><span class="line"><span class="keyword">from</span> sqlalchemy <span class="keyword">import</span> create_engine, MetaData, Table, Column, Integer, String, ForeignKey, CHAR, BOOLEAN, VARCHAR, \</span><br><span class="line">    DateTime</span><br><span class="line"><span class="keyword">from</span> sqlalchemy.orm <span class="keyword">import</span> sessionmaker</span><br><span class="line"><span class="keyword">from</span> sqlalchemy.ext.declarative <span class="keyword">import</span> declarative_base</span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建一个连接引擎, 显示每条执行的 SQL 语句(echo=True)</span></span><br><span class="line">engine = create_engine(<span class="string">"mysql+pymysql://&#123;username&#125;:&#123;password&#125;@&#123;host&#125;:&#123;port&#125;/&#123;name&#125;"</span>.format(**DB_CONF), echo=<span class="literal">True</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># ******** 方式一: 元数据 ********</span></span><br><span class="line"><span class="comment"># 创建元数据</span></span><br><span class="line">metadata = MetaData(engine)  <span class="comment"># Base.metadata.bind = engine</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 添加表结构 - Table()方法用来创建表</span></span><br><span class="line"><span class="comment"># 第一个参数为表名，第二是存入元数据，使用Column()方法设置表字段</span></span><br><span class="line">customer = Table(<span class="string">'customer'</span>, metadata,</span><br><span class="line">                 Column(<span class="string">'id'</span>, Integer, primary_key=<span class="literal">True</span>),</span><br><span class="line">                 Column(<span class="string">'name'</span>, String(<span class="number">20</span>)),</span><br><span class="line">                 Column(<span class="string">'fullname'</span>, String(<span class="number">40</span>)),</span><br><span class="line">                 )</span><br><span class="line">address_table = Table(<span class="string">'address'</span>, metadata,</span><br><span class="line">                      Column(<span class="string">'id'</span>, Integer, primary_key=<span class="literal">True</span>),</span><br><span class="line">                      Column(<span class="string">'customer_id'</span>, <span class="literal">None</span>, ForeignKey(<span class="string">'customer.id'</span>)),</span><br><span class="line">                      Column(<span class="string">'email'</span>, String(<span class="number">128</span>), nullable=<span class="literal">False</span>)</span><br><span class="line">                      )</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 执行创建</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">execute_create</span><span class="params">()</span>:</span></span><br><span class="line">    metadata.create_all()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># ******** 方式二: Base 基类 ********</span></span><br><span class="line"><span class="comment"># 创建对象的基类</span></span><br><span class="line">Base = declarative_base()</span><br><span class="line">Base.metadata.bind = engine</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span><span class="params">(Base)</span>:</span></span><br><span class="line">    __tablename__ = <span class="string">'person'</span></span><br><span class="line">    id = Column(Integer, primary_key=<span class="literal">True</span>)</span><br><span class="line">    name = Column(<span class="string">'name'</span>, String(<span class="number">250</span>))</span><br><span class="line">    cname = Column(<span class="string">'cname'</span>, CHAR(<span class="number">30</span>), nullable=<span class="literal">True</span>)</span><br><span class="line">    age = Column(<span class="string">'age'</span>, Integer)</span><br><span class="line">    position = Column(<span class="string">'position'</span>, VARCHAR(<span class="number">20</span>))</span><br><span class="line">    address = Column(<span class="string">'address'</span>, VARCHAR(<span class="number">50</span>), nullable=<span class="literal">True</span>)</span><br><span class="line">    creatime = Column(<span class="string">'creatime'</span>, DateTime, default=datetime.datetime.now)</span><br><span class="line">    flag = Column(<span class="string">'flag'</span>, BOOLEAN, default=<span class="literal">False</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建数据库会话类</span></span><br><span class="line">DBSession = sessionmaker(bind=engine)</span><br><span class="line"><span class="comment"># 使用session对数据库进行操作</span></span><br><span class="line">session = DBSession()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">create_table</span><span class="params">()</span>:</span></span><br><span class="line">    Base.metadata.create_all()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">session_select</span><span class="params">()</span>:</span></span><br><span class="line">    query_1 = session.execute(<span class="string">'select * from user'</span>)  <span class="comment"># sql 查询</span></span><br><span class="line">    res1 = query_1.fetchall()  <span class="comment"># 获取所有的结果fetchone()取得结果的第一行</span></span><br><span class="line">    print(<span class="string">'sql查询 res1: '</span>, res1)</span><br><span class="line">    print(<span class="string">'=============================================='</span>)</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># res2 = session.query(Person).all()</span></span><br><span class="line">    <span class="comment"># print('query 查询 res2: ',res2)</span></span><br><span class="line">    <span class="comment"># session.close()  # 关闭连接</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">session_add</span><span class="params">(data, table=None)</span>:</span></span><br><span class="line">    table = Person <span class="keyword">if</span> table <span class="keyword">is</span> <span class="literal">None</span> <span class="keyword">else</span> table</span><br><span class="line">    <span class="keyword">for</span> dic <span class="keyword">in</span> data:</span><br><span class="line">        p_stu = table(**dic)</span><br><span class="line">        session.add(p_stu)</span><br><span class="line">        session.commit()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">session_update_v1</span><span class="params">(table: str, data: dict, where=<span class="string">''</span>)</span>:</span></span><br><span class="line">    flag = <span class="literal">True</span></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        data = data.items()</span><br><span class="line">        func = <span class="keyword">lambda</span> x: <span class="string">' = '</span>.join(x)</span><br><span class="line">        field_info = <span class="string">','</span>.join(list(map(func, data)))</span><br><span class="line">        where = <span class="string">' WHERE '</span> + where <span class="keyword">if</span> where <span class="keyword">else</span> <span class="string">''</span></span><br><span class="line">        sql_update = <span class="string">'''UPDATE &#123;0&#125; SET &#123;1&#125; &#123;2&#125;'''</span>.format(table, field_info, where)</span><br><span class="line">        session.execute(sql_update)</span><br><span class="line">        session.commit()</span><br><span class="line">    <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">        print(e)</span><br><span class="line">        flag = <span class="literal">False</span></span><br><span class="line">    <span class="keyword">return</span> flag</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">session_update_v2</span><span class="params">()</span>:</span></span><br><span class="line">    row = session.query(Person).filter_by(name=<span class="string">'alfred001'</span>).update(&#123;Person.name: <span class="string">'xxx'</span>,Person.cname: <span class="string">'superman'</span>&#125;)</span><br><span class="line">    session.commit()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">session_delete</span><span class="params">()</span>:</span></span><br><span class="line">    row = session.query(Person).filter_by(name=<span class="string">'sum'</span>)[<span class="number">0</span>]  <span class="comment"># first</span></span><br><span class="line">    print(row)</span><br><span class="line">    session.delete(row)</span><br><span class="line">    session.commit()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">session_drop</span><span class="params">()</span>:</span></span><br><span class="line">    Base.metadata.drop_all()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">code_test</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="comment"># 方式一：创建</span></span><br><span class="line">    <span class="comment"># execute_create()</span></span><br><span class="line">    <span class="comment"># 方式二：创建</span></span><br><span class="line">    <span class="comment"># create_table()</span></span><br><span class="line">    <span class="comment"># 查询</span></span><br><span class="line">    <span class="comment"># session_select()</span></span><br><span class="line">    <span class="comment"># 插入数据</span></span><br><span class="line">    data = [</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="string">'name'</span>: <span class="string">'alfred'</span>,</span><br><span class="line">            <span class="string">'age'</span>: <span class="string">'28'</span>,</span><br><span class="line">            <span class="string">'position'</span>: <span class="string">'python'</span>,</span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="string">'name'</span>: <span class="string">'xxx'</span>,</span><br><span class="line">            <span class="string">'age'</span>: <span class="string">'28'</span>,</span><br><span class="line">            <span class="string">'position'</span>: <span class="string">'php'</span>,</span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="string">'name'</span>: <span class="string">'sum'</span>,</span><br><span class="line">            <span class="string">'age'</span>: <span class="string">'26'</span>,</span><br><span class="line">            <span class="string">'position'</span>: <span class="string">'ruby'</span>,</span><br><span class="line">        &#125;</span><br><span class="line">    ]</span><br><span class="line">    <span class="comment"># session_add(data)</span></span><br><span class="line">    <span class="comment"># 更新数据(更新时，注意用转义字符)</span></span><br><span class="line">    data2 = &#123;</span><br><span class="line">        <span class="string">'name'</span>: <span class="string">'\'alfred001\''</span>,</span><br><span class="line">        <span class="string">'age'</span>: <span class="string">'28'</span>,</span><br><span class="line">        <span class="string">'position'</span>: <span class="string">'\'php+web\''</span>,</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment"># session_update_v1('person', data2, 'id=2')</span></span><br><span class="line">    <span class="comment"># session_update_v2()</span></span><br><span class="line">    <span class="comment"># 删除数据</span></span><br><span class="line">    <span class="comment"># session_delete()</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    code_test()</span><br></pre></td></tr></table></figure>

<h3 id="4-peewee"><a href="#4-peewee" class="headerlink" title="4. peewee"></a>4. peewee</h3><blockquote>
<p>比较流行的ORM框架，安装：pip install peewee</p>
</blockquote>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> datetime</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> baseConfig <span class="keyword">import</span> DATABASE</span><br><span class="line"></span><br><span class="line">DB_CONF = DATABASE[<span class="string">'mysql'</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment"># ----------------- peewee ----------------</span></span><br><span class="line"><span class="keyword">import</span> peewee</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">peewee_db = peewee.MySQLDatabase(database=<span class="string">'tests'</span>, user=<span class="string">'alfred'</span>, passwd=<span class="string">'123456'</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Author</span><span class="params">(peewee.Model)</span>:</span></span><br><span class="line">    LV_1 = <span class="number">0</span></span><br><span class="line">    LV_2 = <span class="number">1</span></span><br><span class="line">    LV_3 = <span class="number">2</span></span><br><span class="line">    LV_4 = <span class="number">3</span></span><br><span class="line">    EDUCATION_LEVEL = (</span><br><span class="line">        (LV_1, <span class="string">'高中'</span>),</span><br><span class="line">        (LV_2, <span class="string">'大专'</span>),</span><br><span class="line">        (LV_3, <span class="string">'本科'</span>),</span><br><span class="line">        (LV_4, <span class="string">'研究生'</span>),</span><br><span class="line">    )</span><br><span class="line">    pen_name = peewee.CharField(unique=<span class="literal">True</span>, null=<span class="literal">False</span>)</span><br><span class="line">    age = peewee.IntegerField()</span><br><span class="line">    education = peewee.CharField(choices=EDUCATION_LEVEL, default=LV_3)</span><br><span class="line">    created_date = peewee.DateTimeField(default=datetime.datetime.now, null=<span class="literal">True</span>)</span><br><span class="line">    is_active = peewee.BooleanField(default=<span class="literal">True</span>)</span><br><span class="line">    </span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">Meta</span>:</span></span><br><span class="line">        database = peewee_db</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Book</span><span class="params">(peewee.Model)</span>:</span></span><br><span class="line">    author = peewee.ForeignKeyField(Author, related_name=<span class="string">'books'</span>)</span><br><span class="line">    title = peewee.CharField(<span class="number">50</span>, unique=<span class="literal">True</span>)</span><br><span class="line">    content = peewee.TextField()</span><br><span class="line">    is_active = peewee.BooleanField(default=<span class="literal">True</span>)</span><br><span class="line">    </span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">Meta</span>:</span></span><br><span class="line">        database = peewee_db</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">peewee_create_table</span><span class="params">()</span>:</span></span><br><span class="line">    flag = <span class="literal">True</span></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        Author.create_table()</span><br><span class="line">        Book.create_table()</span><br><span class="line">    <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">        print(e)</span><br><span class="line">        flag = <span class="literal">False</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> flag</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">peewee_insert</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="comment"># 1 - ok</span></span><br><span class="line">    <span class="comment"># author = Author.create(pen_name="alfred001", age=28)</span></span><br><span class="line">    <span class="comment"># Book.create(author=author, title='python is strong', content='xxxxoooo')</span></span><br><span class="line">    <span class="comment"># 2 - ok</span></span><br><span class="line">    <span class="comment"># p = Author(pen_name="飘散随风", age=25)</span></span><br><span class="line">    <span class="comment"># p.save()</span></span><br><span class="line">    <span class="comment"># 3 - ok</span></span><br><span class="line">    Author.insert(pen_name=<span class="string">'Mickey'</span>, age=<span class="number">27</span>).execute()  <span class="comment"># 返回主键</span></span><br><span class="line">    data = [</span><br><span class="line">        &#123;<span class="string">'author_id'</span>: <span class="number">2</span>, <span class="string">'title'</span>: <span class="string">'踏星'</span>, <span class="string">'content'</span>: <span class="string">'xxx'</span>&#125;,</span><br><span class="line">        &#123;<span class="string">'author_id'</span>: <span class="number">3</span>, <span class="string">'title'</span>: <span class="string">'三国'</span>, <span class="string">'content'</span>: <span class="string">'***'</span>&#125;]</span><br><span class="line">    query = Book.insert_many(data)  <span class="comment"># 插入了多个</span></span><br><span class="line">    query.execute()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">peewee_update</span><span class="params">()</span>:</span></span><br><span class="line">    author=Author.get(Author.pen_name.startswith(<span class="string">'alfred'</span>))</span><br><span class="line">    print(author)</span><br><span class="line">    <span class="comment"># query = (Book</span></span><br><span class="line">    <span class="comment">#          .update(title='python is powerful', content='Really powerful')</span></span><br><span class="line">    <span class="comment">#          # .where(Book.author==author)</span></span><br><span class="line">    <span class="comment">#          )</span></span><br><span class="line">    <span class="comment"># query.execute()  # 元子操作</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">peewee_select</span><span class="params">()</span>:</span></span><br><span class="line">    author = Author.get(id=<span class="number">1</span>)  <span class="comment"># get()方法只能查询一条，且是唯一的一条数据</span></span><br><span class="line">    print(author)</span><br><span class="line">    print(author.pen_name)</span><br><span class="line">    print(author.education)</span><br><span class="line">    <span class="keyword">for</span> book <span class="keyword">in</span> Book.filter(title=<span class="string">"踏星"</span>):</span><br><span class="line">        print(book.author.pen_name)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">peewee_delete</span><span class="params">()</span>:</span></span><br><span class="line">    author = Author.get(education=Author.LV_1)</span><br><span class="line">    query = Book.delete().where(Book.author == author)</span><br><span class="line">    query.execute()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">code_test</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="comment"># 建表</span></span><br><span class="line">    <span class="comment"># peewee_create_table()  # ok</span></span><br><span class="line">    <span class="comment"># 增加数据（插入）</span></span><br><span class="line">    <span class="comment"># peewee_insert()  # ok</span></span><br><span class="line">    <span class="comment"># 更新</span></span><br><span class="line">    <span class="comment"># peewee_update()  # ok</span></span><br><span class="line">    <span class="comment"># 查询</span></span><br><span class="line">    <span class="comment"># peewee_select()  # ok</span></span><br><span class="line">    <span class="comment"># 删除数据</span></span><br><span class="line">    peewee_delete()  <span class="comment"># ok</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    code_test()</span><br></pre></td></tr></table></figure>


<hr>
<p>结束</p>
<blockquote>
<p>原文地址： CSDN博客 - <a href="https://blog.csdn.net/weixin_41599858/article/details/102945404" target="_blank" rel="noopener">Python（六）- 连接MySQL数据库以及CURD操作！</a></p>
</blockquote>
]]></content>
      <categories>
        <category>编程</category>
        <category>Python</category>
        <category>数据库</category>
      </categories>
      <tags>
        <tag>MySQL</tag>
        <tag>CURD</tag>
      </tags>
  </entry>
  <entry>
    <title>Python（十一）- 命令行参数选项解析</title>
    <url>/archives/2d2f30d0.html</url>
    <content><![CDATA[<p>Python中模块和库比较丰富，这里记录一下关于命令行解析相关的模块。</p>
<a id="more"></a>

<h2 id="1-sys-系统模块"><a href="#1-sys-系统模块" class="headerlink" title="1.sys 系统模块"></a>1.<code>sys</code> 系统模块</h2><p>通常，初学者都会使用 <code>sys.argv</code>收集命令行参数（执行py文件的参数选项，得到一个参数列表，<br>通过切片和索引可以获取相应的选项和参数，继而去做相应的业务逻辑处理。</p>
<h2 id="2-docopt-模块"><a href="#2-docopt-模块" class="headerlink" title="2.docopt 模块"></a>2.<code>docopt</code> 模块</h2><p>docopt 是一个参数解析的库，与众不同的是在代码的最开头使用”””文档注释的形式写出符合要求的文档，会自动生成对应的parse。</p>
<p>以 docopt_parse.py 文件为例:</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="string">Usage:</span></span><br><span class="line"><span class="string">    docopt_parse.py (-h | --help)</span></span><br><span class="line"><span class="string">    docopt_parse.py (-v | --version)</span></span><br><span class="line"><span class="string">    docopt_parse.py (-i | --input) &lt;infile&gt;</span></span><br><span class="line"><span class="string">    docopt_parse.py (-o | --output) &lt;outfile&gt;</span></span><br><span class="line"><span class="string">    docopt_parse.py info</span></span><br><span class="line"><span class="string">    docopt_parse.py list &lt;names&gt;...</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">Arguments:</span></span><br><span class="line"><span class="string">    infile            optional input file</span></span><br><span class="line"><span class="string">    outfile           optional output file</span></span><br><span class="line"><span class="string">    names             many names</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">Options:</span></span><br><span class="line"><span class="string">    -h, --help           Show help</span></span><br><span class="line"><span class="string">    -v, --version        Show version</span></span><br><span class="line"><span class="string">    -i, --input          Input of file</span></span><br><span class="line"><span class="string">    -o, --output         Output to file</span></span><br><span class="line"><span class="string">    info                 Get object information</span></span><br><span class="line"><span class="string">    list                 Get some files list</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">Examples:</span></span><br><span class="line"><span class="string">    docopt_parse.py -i filename</span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> docopt <span class="keyword">import</span> docopt</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    args = docopt(__doc__, version=<span class="string">'1.0.0'</span>)</span><br><span class="line">    <span class="comment"># print(args)</span></span><br><span class="line">    print(<span class="string">'---------------------------------------'</span>)</span><br><span class="line">    kwargs = &#123;</span><br><span class="line">        <span class="string">'info'</span>: args[<span class="string">'info'</span>],</span><br><span class="line">        <span class="string">'get_list'</span>: args[<span class="string">'list'</span>],</span><br><span class="line">        <span class="string">'names'</span>: args[<span class="string">'&lt;names&gt;'</span>],</span><br><span class="line">        <span class="string">'outfile'</span>: args[<span class="string">'&lt;outfile&gt;'</span>],</span><br><span class="line">        <span class="string">'infile'</span>: args[<span class="string">'&lt;infile&gt;'</span>],</span><br><span class="line">        <span class="string">'help'</span>: args[<span class="string">'--help'</span>],</span><br><span class="line">        <span class="string">'version'</span>: args[<span class="string">'--version'</span>],</span><br><span class="line">    &#125;</span><br><span class="line">    print(kwargs)</span><br></pre></td></tr></table></figure>

<p><strong>Tips</strong>:</p>
<ul>
<li>分段显示，段落之间空一行，避免模块解析错误</li>
</ul>
<p><strong>其中</strong>：</p>
<ul>
<li><code>Usage</code> 为用法示例，</li>
<li><code>Arguments</code> 为参数说明，</li>
<li><code>Options</code> 为选项说明，</li>
<li><code>Examples</code> 为样例</li>
</ul>
<p><strong>运行示例</strong>:</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">python docopt_parse.py -o out-test.txt</span><br></pre></td></tr></table></figure>
<p><strong>结果</strong>：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#123;&#39;info&#39;: False, &#39;get_list&#39;: False, &#39;get_count&#39;: False, &#39;names&#39;: [], &#39;suffix_name&#39;: None, &#39;outfile&#39;: &#39;out-test.txt&#39;, &#39;infile&#39;: None, &#39;help&#39;: False, &#39;version&#39;</span><br><span class="line">: False&#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>用得好的话，这会是一个不错的选择。</p>
</blockquote>
<h2 id="3-getopt-模块"><a href="#3-getopt-模块" class="headerlink" title="3.getopt 模块"></a>3.<code>getopt</code> 模块</h2><p>该模块有两个主要函数，两个属性（主要用来抛出错误信息）。</p>
<ul>
<li><p>函数：</p>
<ul>
<li>getopt.getopt</li>
<li>getopt.gnu_getopt</li>
</ul>
</li>
<li><p>属性：</p>
<ul>
<li>getopt.error</li>
<li>getopt.GetoptError</li>
</ul>
</li>
</ul>
<p>这里主要说一下 <code>getopt.getopt()</code> 函数</p>
<blockquote>
<p>opts, args = getopt.getopt(args, shortopts, longopts=[])函数</p>
</blockquote>
<p><strong>参数解释</strong>：</p>
<ul>
<li><code>args</code> 指的是当前脚本接收的参数，它是一个列表，可通过 <code>sys.argv</code> 获得</li>
<li><code>shortopts</code> 是短选项格式，即：”-“ 号后面要紧跟一个选项字母。如：<code>-h</code></li>
<li><code>longopts</code> 是长选项格式，即：”–” 号后面跟一个完整单词。如果选项含有附加参数，后面要紧跟 “=”，再加上参数，且 “=” 号前后不能有空格。</li>
</ul>
<p><strong>返回值</strong>：</p>
<ul>
<li><code>opts</code>：解析出的格式信息，为一个两元组（选项+参数）组成的列表。</li>
<li><code>args</code>：格式信息之外的剩余命令行参数组成的列表。</li>
</ul>
<p><strong>Tips</strong>：</p>
<ul>
<li>当选项后面是带一个附加参数时，在分析串中写入选项字符同时后面加一个”:”号。如：<code>getopt.getopt(sys.argv[1:], &#39;ho:&#39;, [&#39;help&#39;,&#39;output=&#39;])</code>，其中：<code>h</code> 和 <code>o:</code> 表示两个选项，对应短选项 <code>-h</code> 和 <code>-o</code>。</li>
</ul>
<p><strong>示例</strong>：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> getopt</span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">test</span><span class="params">()</span>:</span></span><br><span class="line">    print(sys.argv[<span class="number">1</span>:])</span><br><span class="line">    print(<span class="string">'----------------------'</span>)</span><br><span class="line">    opts, args = getopt.getopt(sys.argv[<span class="number">1</span>:], <span class="string">'ho:'</span>, [<span class="string">'help'</span>,<span class="string">'output='</span>])</span><br><span class="line">    print(<span class="string">'opts: '</span>, opts)</span><br><span class="line">    print(<span class="string">'args: '</span>, args)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    test()</span><br></pre></td></tr></table></figure>

<p><strong>运行示例</strong>:</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">python getopt_parse.py -h amazing why mytest</span><br></pre></td></tr></table></figure>
<p><strong>结果</strong>：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[&#39;-h&#39;, &#39;amazing&#39;, &#39;why&#39;, &#39;mytest&#39;]</span><br><span class="line">----------------------</span><br><span class="line">opts:  [(&#39;-h&#39;, &#39;&#39;)]</span><br><span class="line">args:  [&#39;amazing&#39;, &#39;why&#39;, &#39;mytest&#39;]</span><br></pre></td></tr></table></figure>

<h2 id="4-optparse-模块"><a href="#4-optparse-模块" class="headerlink" title="4.optparse 模块"></a>4.<code>optparse</code> 模块</h2><p><code>optparse</code> 是 python 内置模块，功能也很强大。</p>
<h3 id="4-1-基本用法"><a href="#4-1-基本用法" class="headerlink" title="4.1.基本用法"></a>4.1.基本用法</h3><p>使用 <code>OptionParser</code> 类来解析：</p>
<ul>
<li><p>导入</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> optparse <span class="keyword">import</span> OptionParser</span><br></pre></td></tr></table></figure></li>
<li><p>构造解析器</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">parser = OptionParser(usage=<span class="string">'自定义帮助信息'</span>)</span><br></pre></td></tr></table></figure>
</li>
<li><p>添加解析规则</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">parser.add_option(*args, **kwargs)</span><br><span class="line"><span class="comment"># or</span></span><br><span class="line">parser.add_options(option_list)</span><br></pre></td></tr></table></figure>
</li>
<li><p>调用解析函数</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">opts, params = parser.parse_args(args=<span class="literal">None</span>, values=<span class="literal">None</span>)</span><br></pre></td></tr></table></figure></li>
</ul>
<p><strong>返回值</strong>：</p>
<ul>
<li><code>opts</code>: 一个Python字典，<code>add_option</code> 中添加规则的 <strong><code>dest</code></strong> 参数值为 key，<strong><code>default</code></strong> 值 或 <strong>用户输入参数值</strong> 作为 value。</li>
<li><code>params</code>: 用户传入的规则之外的 <strong>剩余参数</strong> 组成的列表。</li>
</ul>
<h3 id="4-2-案例"><a href="#4-2-案例" class="headerlink" title="4.2.案例"></a>4.2.案例</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> optparse</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">opt_func</span><span class="params">(uargs=None)</span>:</span></span><br><span class="line">    <span class="string">"""命令行解析"""</span></span><br><span class="line">    <span class="comment"># 创建解析类</span></span><br><span class="line">    usage = <span class="string">'\n\t--- 帮助信息 ---\n\t'</span> \</span><br><span class="line">            <span class="string">'program_name.py (-v | --version)\n\t'</span> \</span><br><span class="line">            <span class="string">'program_name.py (-h | --help)\n\t'</span> \</span><br><span class="line">            <span class="string">'program_name.py (-f | --file) filename\n\t'</span> \</span><br><span class="line">            <span class="string">' \n'</span> \</span><br><span class="line">            <span class="string">'Examples: \n\tpython program_name.py [options] &lt;params&gt;'</span></span><br><span class="line">    parser = optparse.OptionParser(usage=usage)</span><br><span class="line">    <span class="comment"># 添加解析规则</span></span><br><span class="line">    parser.add_option(<span class="string">'-f'</span>, <span class="string">'--file'</span>, action=<span class="string">'store'</span>, type=<span class="string">'string'</span>, dest=<span class="string">'filename'</span>, help=<span class="string">'-f 操作文件（参数说明信息）'</span>)</span><br><span class="line">    parser.add_option(<span class="string">'-v'</span>, <span class="string">'--version'</span>, action=<span class="string">'store_false'</span>, dest=<span class="string">'version'</span>, default=<span class="string">'1.0.0'</span>, help=<span class="string">'-v 版本信息（参数说明信息）'</span>)</span><br><span class="line">    <span class="keyword">return</span> parser.parse_args(uargs)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">test</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="string">"""测试"""</span></span><br><span class="line">    <span class="comment"># 无参</span></span><br><span class="line">    opts, params = opt_func()</span><br><span class="line">    print(<span class="string">'opts-1: '</span>, opts)</span><br><span class="line">    print(<span class="string">'params-1: '</span>, params)</span><br><span class="line">    print(<span class="string">'-------------------------'</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 用户输入</span></span><br><span class="line">    args = [<span class="string">'-f'</span>, <span class="string">'file.txt'</span>, <span class="string">'-v'</span>, <span class="string">'this is a test'</span>, <span class="string">'last arg'</span>]</span><br><span class="line">    opts, params = opt_func(args)</span><br><span class="line">    print(<span class="string">'opts-2: '</span>, opts)</span><br><span class="line">    print(<span class="string">'params-2: '</span>, params)</span><br><span class="line">    print(<span class="string">'-------------------------'</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 帮助信息</span></span><br><span class="line">    opt_func([<span class="string">'-h'</span>])</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    test()</span><br></pre></td></tr></table></figure>

<p><strong><code>option</code>中参数的含义</strong>：</p>
<ul>
<li>type：用于检测命令行入参的数据类型</li>
<li>action：告诉程序在遇到指定选项时，如何处理</li>
<li>dest：用于保存入参选项的值，通过 <code>options</code> 访问</li>
<li>default：dest的默认值，在用户未输入时分配</li>
<li>help：生成帮助说明信息</li>
</ul>
<p><strong>运行示例</strong>：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">python optparse_test.py</span><br></pre></td></tr></table></figure>

<p><strong>结果</strong>：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">opts-1:  &#123;&#39;filename&#39;: None, &#39;version&#39;: &#39;1.0.0&#39;&#125;</span><br><span class="line">params-1:  []</span><br><span class="line">-------------------------</span><br><span class="line">opts-2:  &#123;&#39;filename&#39;: &#39;file.txt&#39;, &#39;version&#39;: False&#125;</span><br><span class="line">params-2:  [&#39;this is a test&#39;, &#39;last arg&#39;]</span><br><span class="line">-------------------------</span><br><span class="line">Usage: </span><br><span class="line">	--- 帮助信息 ---</span><br><span class="line">	program_name.py (-v | --version)</span><br><span class="line">	program_name.py (-h | --help)</span><br><span class="line">	program_name.py (-f | --file) filename</span><br><span class="line">	 </span><br><span class="line">Examples: </span><br><span class="line">	python program_name.py [options] &lt;params&gt;</span><br><span class="line"></span><br><span class="line">Options:</span><br><span class="line">  -h, --help            show this help message and exit</span><br><span class="line">  -f FILENAME, --file&#x3D;FILENAME</span><br><span class="line">                        -f 操作文件（参数说明信息）</span><br><span class="line">  -v, --version         -v 版本信息（参数说明信息）</span><br></pre></td></tr></table></figure>

<hr>
]]></content>
      <categories>
        <category>编程</category>
        <category>Python</category>
      </categories>
      <tags>
        <tag>命令行解析</tag>
      </tags>
  </entry>
  <entry>
    <title>SQL（一）：关于MySQL8.0版本：用户、密码和权限的问题！</title>
    <url>/archives/5ad10cde.html</url>
    <content><![CDATA[<blockquote>
<p>由于前段时间重装了系统，最近放假，正好有时间重新搭建一下开发环境，当然很多工具都装了最新版，MySQL也不例外。</p>
</blockquote>
<p>以前的MySQL装的是5.6或5.7的，用起来倒是没什么需要特殊说明的地方。<br>现在换了8.0，虽然功能强大了一些，但有些地方还是需要注意。</p>
<a id="more"></a>

<p>安装的话，可以参考一下这篇博客：<a href="https://blog.csdn.net/qq_33236248/article/details/80046448" target="_blank" rel="noopener">MySQL8的安装</a></p>
<blockquote>
<p>以下是记录的一些问题和解决方法</p>
</blockquote>
<h2 id="一、服务启动失败"><a href="#一、服务启动失败" class="headerlink" title="一、服务启动失败"></a>一、服务启动失败</h2><h3 id="1-1-输入：net-start-mysql，提示服务名无效"><a href="#1-1-输入：net-start-mysql，提示服务名无效" class="headerlink" title="1.1. 输入：net start mysql，提示服务名无效"></a>1.1. 输入：<code>net start mysql</code>，提示服务名无效</h3><ul>
<li>可到 <code>C:\Program Files\MySQL\MySQL Server 8.0\bin</code> 目录下；</li>
<li>打开DOS窗口，输入：<code>mysqld --install</code>  ；</li>
<li>再次输入：<code>net start mysql</code>。</li>
</ul>
<h3 id="1-2-输入：net-start-mysql-后，提示：MSQL服务无法启动。服务没有报告任何错误"><a href="#1-2-输入：net-start-mysql-后，提示：MSQL服务无法启动。服务没有报告任何错误" class="headerlink" title="1.2. 输入：net start mysql 后，提示：MSQL服务无法启动。服务没有报告任何错误"></a>1.2. 输入：<code>net start mysql</code> 后，提示：MSQL服务无法启动。服务没有报告任何错误</h3><ul>
<li>输入： <code>mysqld --console</code>，看看错误信息，通过错误信息，去查找解决方法；</li>
<li>如果错误信息是<code>Table &#39;mysql.plugin&#39; doesn&#39;t exist</code>, 如果没有解决办法，可以试着重新安装服务或初始化MySQL。</li>
</ul>
<p><strong>建议先看看my.ini文件中的配置</strong>：<br><img src="https://img-blog.csdnimg.cn/20191005145124662.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MTU5OTg1OA==,size_16,color_FFFFFF,t_70" alt="my.ini"></p>
<blockquote>
<p>这会对你有所帮助</p>
</blockquote>
<h2 id="二、忘记用户名密码"><a href="#二、忘记用户名密码" class="headerlink" title="二、忘记用户名密码"></a>二、忘记用户名密码</h2><blockquote>
<p>如果隔段时间不用的话，可能就会出现这样的问题，因为博主的用户名密码都比较长，更容易忘，痛定思痛，决定改成最常用的123…</p>
</blockquote>
<p><strong>正常情况下，可以这样做：</strong></p>
<ul>
<li><p>跳过权限表</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">mysqld –skip-grant-tables</span><br></pre></td></tr></table></figure>
</li>
<li><p>密码置空</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">UPDATE user SET authentication_string=<span class="string">''</span> WHERE user=<span class="string">'root'</span>;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>8.0 无法这样用</p>
</blockquote>
</li>
</ul>
<h3 id="处理"><a href="#处理" class="headerlink" title="处理"></a>处理</h3><h4 id="方式一：利用-–init-file参数"><a href="#方式一：利用-–init-file参数" class="headerlink" title="方式一：利用 –init-file参数"></a>方式一：利用 –init-file参数</h4><ol>
<li>停止MySQL服务<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># dos窗口，输入命令：</span></span><br><span class="line">net stop mysql   <span class="comment"># 或者 Ctrl+Alt+delete，打开任务管理器，找到服务中的MySQL80项，右键选择停止</span></span><br></pre></td></tr></table></figure></li>
<li>在MySQL目录下，新建一个文件，如reset_password.txt:<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 目录：C:\ProgramData\MySQL\MySQL Server 8.0</span></span><br><span class="line"><span class="comment"># 文件内容输入：</span></span><br><span class="line">ALTER USER <span class="string">'root'</span>@<span class="string">'localhost'</span> IDENTIFIED BY <span class="string">'123456'</span>;  <span class="comment"># 根据个人需要修改</span></span><br></pre></td></tr></table></figure></li>
<li>打开dos窗口<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 执行以下命令，关闭dos窗口</span></span><br><span class="line">mysqld --init-file=C:\ProgramData\MySQL\MySQL Server 8.0\reset_password.txt --console   <span class="comment"># 可以自己修改</span></span><br></pre></td></tr></table></figure></li>
<li>启动服务<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">net start mysql  <span class="comment"># 或者去任务管理器中开启</span></span><br></pre></td></tr></table></figure></li>
<li>最后输入修改的用户密码登录<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">mysql -uroot -p123456  <span class="comment"># 以实际为准</span></span><br></pre></td></tr></table></figure>

</li>
</ol>
<h4 id="方式二：越过权限表"><a href="#方式二：越过权限表" class="headerlink" title="方式二：越过权限表"></a>方式二：越过权限表</h4><ol>
<li>停止服务：<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">net stop mysql</span><br></pre></td></tr></table></figure></li>
<li>管理员方式打开DOS窗口：<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">mysql --shared-memory --skip-grant-tables datadir=<span class="string">"C:/ProgramData/MySQL/MySQL Server 8.0/Data"</span></span><br></pre></td></tr></table></figure></li>
<li>再开一个命令行窗口，直接登陆mysql:<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">mysql [-uroot -p]</span><br><span class="line"><span class="comment"># 清空密码</span></span><br><span class="line">use mysql;</span><br><span class="line">update user <span class="built_in">set</span> authentication_string=<span class="string">''</span> <span class="built_in">where</span> user=<span class="string">'root'</span>;</span><br></pre></td></tr></table></figure></li>
<li>关闭之前的窗口，重启服务：<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">net start mysql</span><br></pre></td></tr></table></figure></li>
<li>无密码登录，修改密码：<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">mysql -uroot -p</span><br><span class="line"><span class="comment"># 修改</span></span><br><span class="line">use mysql;</span><br><span class="line">alter user root@localhost identified by <span class="string">'123456'</span>;</span><br></pre></td></tr></table></figure></li>
<li>密码登录，查看：<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">mysql -uroot -p123456</span><br></pre></td></tr></table></figure>

</li>
</ol>
<h2 id="三、API接口无法连接数据库"><a href="#三、API接口无法连接数据库" class="headerlink" title="三、API接口无法连接数据库"></a>三、API接口无法连接数据库</h2><blockquote>
<p>昨天测试了一下，php连接数据库，发现连接失败。而本地打开数据库是可以的。</p>
</blockquote>
<h3 id="3-1-SQLSTATE-HY000-2054-The-server-requested-authentication-method-unknown-to-the-client。"><a href="#3-1-SQLSTATE-HY000-2054-The-server-requested-authentication-method-unknown-to-the-client。" class="headerlink" title="3.1. SQLSTATE[HY000] [2054] The server requested authentication method unknown to the client。"></a>3.1. SQLSTATE[HY000] [2054] The server requested authentication method unknown to the client。</h3><p>这应该是身份验证插件的问题，<br>于是通过phpinfo() 查看了一下php版本信息：<br><img src="https://img-blog.csdnimg.cn/20191005150746851.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MTU5OTg1OA==,size_16,color_FFFFFF,t_70" alt="php版本信息"><br>对比MySQL8.0信息：<br><img src="https://img-blog.csdnimg.cn/20191005150858615.png" alt="MySQL8.0信息"></p>
<blockquote>
<p>显然身份验证插件不匹配，php7.3.4居然还没支持sha2的，没办法，只能在数据库中改为php支持的了，如：mysql_native_password 。</p>
</blockquote>
<p>修改之：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">CREATE USER <span class="string">'test'</span>@<span class="string">'localhost'</span> IDENTIFIED WITH mysql_native_password BY <span class="string">'password'</span>;</span><br></pre></td></tr></table></figure>
<p>或者更新一下：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">ALTER USER <span class="string">'root'</span>@<span class="string">'localhost'</span> IDENTIFIED WITH mysql_native_password BY <span class="string">'password'</span>;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>当然也可以去my.ini 文件中，将 <code>default_authentication_plugin=caching_sha2_password</code> 中的sha2插件改掉。</p>
</blockquote>
<h2 id="四、权限修改"><a href="#四、权限修改" class="headerlink" title="四、权限修改"></a>四、权限修改</h2><p><strong>在连接数据库时，出现以下错误</strong>：</p>
<blockquote>
<p>SQLSTATE[HY000] [1044] Access denied for user ‘XXX’@’localhost’ to database ‘tests’.</p>
</blockquote>
<p>大概能猜到，应该是权限的问题，接下来，修改权限：</p>
<h3 id="4-1-添加用户"><a href="#4-1-添加用户" class="headerlink" title="4.1. 添加用户"></a>4.1. 添加用户</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">CREATE USER <span class="string">'username'</span>@<span class="string">'localhost'</span> IDENTIFIED [WITH mysql_native_password] BY <span class="string">'password'</span>;</span><br></pre></td></tr></table></figure>

<h3 id="4-2-更新密码"><a href="#4-2-更新密码" class="headerlink" title="4.2. 更新密码"></a>4.2. 更新密码</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">ALTER USER <span class="string">'username'</span>@<span class="string">'localhost'</span> IDENTIFIED [WITH mysql_native_password] BY <span class="string">'new_password'</span>;</span><br></pre></td></tr></table></figure>

<h3 id="4-3-授予-更改权限"><a href="#4-3-授予-更改权限" class="headerlink" title="4.3. 授予/更改权限"></a>4.3. 授予/更改权限</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">GRANT ALL ON *.* TO username@localhost WITH GRANT OPTION;</span><br></pre></td></tr></table></figure>

<h3 id="4-4-查看用户信息"><a href="#4-4-查看用户信息" class="headerlink" title="4.4. 查看用户信息"></a>4.4. 查看用户信息</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 表结构</span></span><br><span class="line">desc user;</span><br><span class="line"><span class="comment"># 用户信息</span></span><br><span class="line">select User,Host,authentication_string from user;</span><br><span class="line"><span class="comment"># 查看权限</span></span><br><span class="line">show grants <span class="keyword">for</span> username@localhost;</span><br></pre></td></tr></table></figure>

<p>解决！</p>
<hr>
<p>以后遇到再补充！</p>
<blockquote>
<p>原文地址： CSDN博客 - <a href="https://blog.csdn.net/weixin_41599858/article/details/102138938" target="_blank" rel="noopener">关于MySQL8.0版本：用户、密码和权限的问题！</a></p>
</blockquote>
]]></content>
      <categories>
        <category>数据库</category>
      </categories>
      <tags>
        <tag>MySQL</tag>
        <tag>用户密码</tag>
      </tags>
  </entry>
  <entry>
    <title>Hello World</title>
    <url>/archives/16107.html</url>
    <content><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p>
<a id="more"></a>

<h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p>
<h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p>
<h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p>
<h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/one-command-deployment.html" target="_blank" rel="noopener">Deployment</a></p>
]]></content>
      <categories>
        <category>网站</category>
        <category>Hexo</category>
      </categories>
      <tags>
        <tag>hello world</tag>
      </tags>
  </entry>
  <entry>
    <title>web前端（一）：HTML标签常用整理！</title>
    <url>/archives/895d0918.html</url>
    <content><![CDATA[<blockquote>
<p>如题，本文主要描述博主对之前前端学习中HTML5标签的一些整理。</p>
</blockquote>
<a id="more"></a>

<h1 id="一、基本分类"><a href="#一、基本分类" class="headerlink" title="一、基本分类"></a>一、基本分类</h1><p>HTML4中，元素被分成两大类: inline(内联元素)与block(块级元素)。</p>
<p><strong>1. 块级元素</strong></p>
<ul>
<li>每个块级元素独占一行，</li>
<li>可以直接控制宽度、高度以及盒子模型的相关css属性，</li>
<li>默认情况下，其宽度为父级元素内容的宽度，</li>
<li>默认情况下，其高度为本身内容的高度。</li>
<li>常用的块级元素有：</li>
</ul>
<table>
<thead>
<tr>
<th>标签</th>
<th>描述</th>
</tr>
</thead>
<tbody><tr>
<td><code>&lt;div&gt;</code></td>
<td>常用块级元素，多用于布局</td>
</tr>
<tr>
<td><code>&lt;h1&gt;...&lt;h6&gt;</code></td>
<td>一到六级标题</td>
</tr>
<tr>
<td><code>&lt;ol&gt;、&lt;ul&gt;、&lt;li&gt;</code></td>
<td>有序列表、无序列表、列表项</td>
</tr>
<tr>
<td><code>&lt;dl&gt;、&lt;dt&gt;、&lt;dd&gt;</code></td>
<td>自定义列表、定义术语（列表项）、定义项目描述</td>
</tr>
<tr>
<td><code>&lt;table&gt;</code></td>
<td>表格</td>
</tr>
<tr>
<td><code>&lt;p&gt;</code></td>
<td>段落，也称行内元素</td>
</tr>
<tr>
<td><code>&lt;address&gt;</code></td>
<td>定义文档作者或拥有者的联系信息</td>
</tr>
<tr>
<td><code>&lt;form&gt;</code></td>
<td>HTML 表单</td>
</tr>
<tr>
<td><code>&lt;hr&gt;</code></td>
<td>水平分隔线</td>
</tr>
<tr>
<td><code>&lt;nav&gt;</code></td>
<td>导航</td>
</tr>
<tr>
<td><code>&lt;aside&gt;</code></td>
<td>侧边栏</td>
</tr>
<tr>
<td><code>&lt;menu&gt;</code></td>
<td>菜单列表</td>
</tr>
<tr>
<td><code>&lt;article&gt;</code></td>
<td>文章</td>
</tr>
<tr>
<td><code>&lt;dialog&gt;</code></td>
<td>对话窗口</td>
</tr>
<tr>
<td><code>&lt;header&gt;、&lt;footer&gt;</code></td>
<td>页眉、页脚</td>
</tr>
<tr>
<td>…</td>
<td>…</td>
</tr>
</tbody></table>
<p><strong>2. 内联元素</strong></p>
<ul>
<li>本身属性为<code>display:inline</code>的元素，即和相邻的内联元素在同一行，</li>
<li>宽高、内外边距（垂直属性）不可改变，</li>
<li>宽高是由内容本身的大小决定的（文字、图片等）</li>
<li>常用的内联元素有：</li>
</ul>
<table>
<thead>
<tr>
<th>标签</th>
<th>描述</th>
</tr>
</thead>
<tbody><tr>
<td><code>&lt;a&gt;、&lt;b&gt;</code></td>
<td>锚点、加粗</td>
</tr>
<tr>
<td><code>&lt;span&gt;</code></td>
<td>常用的内联容器，定义文本内区块</td>
</tr>
<tr>
<td><code>&lt;br&gt;</code></td>
<td>换行</td>
</tr>
<tr>
<td><code>&lt;i&gt;</code></td>
<td>定义斜体字</td>
</tr>
<tr>
<td><code>&lt;em&gt;</code></td>
<td>定义强调文本</td>
</tr>
<tr>
<td><code>&lt;strong&gt;</code></td>
<td>加粗强调</td>
</tr>
<tr>
<td><code>&lt;label&gt;</code></td>
<td>定义 input 元素的标注</td>
</tr>
<tr>
<td><code>&lt;cite&gt;</code></td>
<td>定义引用</td>
</tr>
<tr>
<td><code>&lt;code&gt;</code></td>
<td>定义计算机代码文本，可以和<code>&lt;pre&gt;</code>连用</td>
</tr>
<tr>
<td><code>&lt;img&gt;</code></td>
<td>图片</td>
</tr>
<tr>
<td><code>&lt;input&gt;</code></td>
<td>输入框</td>
</tr>
<tr>
<td><code>&lt;select&gt;</code></td>
<td>下拉列表</td>
</tr>
<tr>
<td><code>&lt;sub&gt;、&lt;sup&gt;</code></td>
<td>定义下标文本、上标文本</td>
</tr>
<tr>
<td><code>&lt;textarea&gt;</code></td>
<td>文本域</td>
</tr>
<tr>
<td>…</td>
<td>…</td>
</tr>
</tbody></table>
<blockquote>
<p>HTML5中，元素主要分为7类：Metadata（元数据元素）、Flow（流式元素）、Sectioning（章节元素）、Heading（标题元素）、Phrasing（段落元素）、Embedded（嵌入元素）、Interactive（交互元素）。<br><strong>具体描述，可见：<a href="http://chenhaizhou.github.io/2016/01/19/html-element-class.html" target="_blank" rel="noopener">HTML5元素分类与内容模型</a></strong>。</p>
</blockquote>
<h1 id="二、HTML5新增特性"><a href="#二、HTML5新增特性" class="headerlink" title="二、HTML5新增特性"></a>二、HTML5新增特性</h1><blockquote>
<p>相对于HTML4，新增了语义化更好的标签元素和API。</p>
</blockquote>
<p><strong>1. 这里列举其中几个常用的标签：</strong></p>
<table>
<thead>
<tr>
<th>标签</th>
<th>描述</th>
</tr>
</thead>
<tbody><tr>
<td><code>&lt;article&gt;</code></td>
<td>文章</td>
</tr>
<tr>
<td><code>&lt;aside&gt;</code></td>
<td>侧边栏</td>
</tr>
<tr>
<td><code>&lt;nav&gt;</code></td>
<td>导航组</td>
</tr>
<tr>
<td><code>&lt;video&gt;</code></td>
<td>定义视频</td>
</tr>
<tr>
<td><code>&lt;audio&gt;</code></td>
<td>定义音频</td>
</tr>
<tr>
<td><code>&lt;canvas&gt;</code></td>
<td>定义图形，比如图表和其他图像，该标签是基于js的绘图api</td>
</tr>
<tr>
<td><code>&lt;svg&gt;</code></td>
<td>定义使用 SVG 的图像绘制， XML 格式定义图形</td>
</tr>
<tr>
<td><code>&lt;progress&gt;</code></td>
<td>状态标签（任务过程：安装、加载）</td>
</tr>
<tr>
<td><code>&lt;menu&gt;</code></td>
<td>菜单列表</td>
</tr>
<tr>
<td><code>&lt;time&gt;</code></td>
<td>定义日期/时间</td>
</tr>
<tr>
<td><code>&lt;ruby&gt;</code></td>
<td>ruby注释</td>
</tr>
<tr>
<td><code>&lt;dialog&gt;</code></td>
<td>定义对话框或窗口</td>
</tr>
<tr>
<td><code>&lt;details&gt;</code></td>
<td>定义用户可查看或隐藏的额外细节</td>
</tr>
<tr>
<td><code>&lt;datalist&gt;</code></td>
<td>定义输入控件的预定义选项</td>
</tr>
<tr>
<td><code>&lt;keygen&gt;</code></td>
<td>定义表单里一个生产的键值，加密信息传送</td>
</tr>
<tr>
<td><code>&lt;output&gt;</code></td>
<td>定义计算结果</td>
</tr>
<tr>
<td>…</td>
<td>…</td>
</tr>
</tbody></table>
<p><strong>2. 新增的API有：</strong></p>
<ul>
<li>上面提的<code>&lt;canvas&gt;</code> 和 <code>&lt;svg&gt;</code>，一个是基于js的绘图api，一个是使用 XML 格式定义矢量图形api，各有千秋。</li>
<li>Geolocation（地理定位）：用于获得用户的地理位置的api，<code>getCurrentPosition()</code>方法用于检测是否支持定位，<code>showPosition()</code> 函数获得并显示经度和纬度。</li>
<li>Drag/Drop（拖放）： 把 <code>draggable</code> 属性设置为 ‘true’，表示设置元素拖放，具体操作参考api中的方法。</li>
<li>web存储：<code>localStorage</code>、<code>sessionStorage</code> 。</li>
<li>应用程序缓存：通过给<code>&lt;html&gt;</code> 标签中添加 <code>manifest</code>属性，启用应用程序缓存，<code>manifest</code> 文件的建议文件扩展名为<code>&quot;.appcache&quot;</code>。</li>
<li>WebSockets：要连接远程主机，只需新建一个WebSocket实例，提供希望连接的对端URL。</li>
</ul>
<blockquote>
<p>更多，可见：<a href="https://www.w3school.com.cn/html/html5_new_elements.asp" target="_blank" rel="noopener">W3school -  HTML5 新元素</a></p>
</blockquote>
<h1 id="三、部分标签使用"><a href="#三、部分标签使用" class="headerlink" title="三、部分标签使用"></a>三、部分标签使用</h1><p><strong>1. 列表</strong></p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 1.无序列表 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h3</span>&gt;</span>购物车<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">li</span>&gt;</span>1.苹果<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">li</span>&gt;</span>2.香蕉<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">li</span>&gt;</span>3.蓝莓<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 2.有序列表 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h3</span>&gt;</span>饮料<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">ol</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">li</span>&gt;</span>1.牛奶<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">li</span>&gt;</span>2.橙汁<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">li</span>&gt;</span>3.奶茶<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ol</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 3.定义列表 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dl</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">dt</span>&gt;</span>php<span class="tag">&lt;/<span class="name">dt</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">dd</span>&gt;</span>全球通用服务器端编程语言<span class="tag">&lt;/<span class="name">dd</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">dt</span>&gt;</span>mysql<span class="tag">&lt;/<span class="name">dt</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">dd</span>&gt;</span>全球最广泛的开源关系型数据库系统<span class="tag">&lt;/<span class="name">dd</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">dt</span>&gt;</span>Laravel<span class="tag">&lt;/<span class="name">dt</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">dd</span>&gt;</span>全球最广泛的开源PHP开发框架<span class="tag">&lt;/<span class="name">dd</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dl</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>显示：<br><img src="https://img-blog.csdnimg.cn/20191006172539531.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MTU5OTg1OA==,size_16,color_FFFFFF,t_70" alt></p>
<p><strong>2. 表格</strong></p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">h3</span>&gt;</span>表格<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">table</span> <span class="attr">border</span>=<span class="string">"1"</span> <span class="attr">width</span>=<span class="string">"500"</span> <span class="attr">cellspacing</span>=<span class="string">"0"</span> <span class="attr">cellpadding</span>=<span class="string">"5"</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- 1标题 --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">caption</span>&gt;</span><span class="tag">&lt;<span class="name">h2</span>&gt;</span>购物车<span class="tag">&lt;/<span class="name">h2</span>&gt;</span><span class="tag">&lt;/<span class="name">caption</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- 2表头 --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">thead</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">tr</span> <span class="attr">bgcolor</span>=<span class="string">"bluegreen"</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">th</span>&gt;</span>编号<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">th</span>&gt;</span>名称<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">th</span>&gt;</span>单价<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">th</span>&gt;</span>数量<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">th</span>&gt;</span>金额<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">th</span>&gt;</span>付款人<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">thead</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- 3.主体 --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">tbody</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">td</span>&gt;</span>1<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">td</span>&gt;</span>电脑<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">td</span>&gt;</span>10000<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">td</span>&gt;</span>1<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">td</span>&gt;</span>10000<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">td</span> <span class="attr">rowspan</span>=<span class="string">"4"</span> <span class="attr">align</span>=<span class="string">"center"</span>&gt;</span>Alfred<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">td</span>&gt;</span>2<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">td</span>&gt;</span>手机<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">td</span>&gt;</span>2000<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">td</span>&gt;</span>2<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">td</span>&gt;</span>4000<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">td</span>&gt;</span>3<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">td</span>&gt;</span>鼠标<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">td</span>&gt;</span>300<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">td</span>&gt;</span>3<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">td</span>&gt;</span>900<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 4.底部 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">td</span> <span class="attr">colspan</span>=<span class="string">"3"</span> <span class="attr">align</span>=<span class="string">"center"</span>&gt;</span>合计<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">td</span>&gt;</span>6<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">td</span>&gt;</span>14900<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">tbody</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">table</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>显示：<br><img src="https://img-blog.csdnimg.cn/20191006173042725.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MTU5OTg1OA==,size_16,color_FFFFFF,t_70" alt></p>
<p><strong>3. 表单控件</strong></p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">h3</span>&gt;</span>表单和表单控件<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">h3</span>&gt;</span>用户注册<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">"login.php"</span> <span class="attr">method</span>=<span class="string">"POST"</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 1表单分组 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">fieldset</span> <span class="attr">style</span>=<span class="string">"border: none;background-color: rgba(22, 73, 167, 0.671);"</span>&gt;</span></span><br><span class="line">      <span class="comment">&lt;!-- 2分组名称 --&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">legend</span>&gt;</span>基本信息<span class="tag">&lt;/<span class="name">legend</span>&gt;</span></span><br><span class="line">    </span><br><span class="line">      <span class="tag">&lt;<span class="name">p</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">"username"</span>&gt;</span>账号：<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">name</span>=<span class="string">"username"</span> <span class="attr">id</span>=<span class="string">"username"</span> <span class="attr">placeholder</span>=<span class="string">"不能超过8个字符"</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">p</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">"password"</span>&gt;</span>密码：<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"password"</span> <span class="attr">name</span>=<span class="string">"password"</span> <span class="attr">id</span>=<span class="string">"password"</span> <span class="attr">placeholder</span>=<span class="string">"必须在6-12位之间"</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">p</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">"email"</span>&gt;</span>邮箱：<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"email"</span> <span class="attr">name</span>=<span class="string">"email"</span> <span class="attr">id</span>=<span class="string">"email"</span> <span class="attr">placeholder</span>=<span class="string">"example@email.com"</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">p</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">"age"</span>&gt;</span>年龄：<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"number"</span> <span class="attr">name</span>=<span class="string">"age"</span> <span class="attr">id</span>=<span class="string">"age"</span> <span class="attr">min</span>=<span class="string">"16"</span> <span class="attr">max</span>=<span class="string">"80"</span> <span class="attr">width</span>=<span class="string">"500"</span> <span class="attr">placeholder</span>=<span class="string">"范围：16-80"</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">fieldset</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">fieldset</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">legend</span>&gt;</span>兴趣爱好<span class="tag">&lt;/<span class="name">legend</span>&gt;</span></span><br><span class="line">    </span><br><span class="line">      <span class="tag">&lt;<span class="name">p</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">""</span>&gt;</span>课程：<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 下拉列表 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">select</span> <span class="attr">name</span>=<span class="string">""</span> <span class="attr">id</span>=<span class="string">""</span>&gt;</span></span><br><span class="line">          <span class="comment">&lt;!-- 分组 --&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">""</span>&gt;</span>请选择<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line"></span><br><span class="line">          <span class="tag">&lt;<span class="name">optgroup</span> <span class="attr">label</span>=<span class="string">"前端"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">""</span>&gt;</span>HTML5<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">""</span>&gt;</span>CSS3<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">""</span> <span class="attr">selected</span>&gt;</span>JavaScript<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;/<span class="name">optgroup</span>&gt;</span></span><br><span class="line">          </span><br><span class="line">          <span class="tag">&lt;<span class="name">optgroup</span> <span class="attr">label</span>=<span class="string">"后端"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">""</span>&gt;</span>PHP<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">""</span>&gt;</span>mysql<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">""</span>&gt;</span>Laravel<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;/<span class="name">optgroup</span>&gt;</span></span><br><span class="line">          </span><br><span class="line">        <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">p</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">""</span>&gt;</span>爱好：<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 复选框 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"checkbox"</span> <span class="attr">name</span>=<span class="string">"hobby[]"</span> <span class="attr">value</span>=<span class="string">"game"</span> <span class="attr">id</span>=<span class="string">"game"</span>&gt;</span><span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">"game"</span>&gt;</span>玩游戏<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"checkbox"</span> <span class="attr">name</span>=<span class="string">"hobby[]"</span> <span class="attr">value</span>=<span class="string">"programme"</span> <span class="attr">id</span>=<span class="string">"programme"</span> <span class="attr">checked</span>&gt;</span><span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">"programme"</span>&gt;</span>编程<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"checkbox"</span> <span class="attr">name</span>=<span class="string">"hobby[]"</span> <span class="attr">value</span>=<span class="string">"moves"</span> <span class="attr">id</span>=<span class="string">"moves"</span>&gt;</span><span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">"moves"</span>&gt;</span>影视<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">p</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">""</span>&gt;</span>性别：<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 单选框 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"radio"</span> <span class="attr">name</span>=<span class="string">"gender"</span> <span class="attr">id</span>=<span class="string">"male"</span>&gt;</span><span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">"male"</span>&gt;</span>男生<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"radio"</span> <span class="attr">name</span>=<span class="string">"gender"</span> <span class="attr">id</span>=<span class="string">"female"</span>&gt;</span><span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">"female"</span>&gt;</span>女生<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"radio"</span> <span class="attr">name</span>=<span class="string">"gender"</span> <span class="attr">id</span>=<span class="string">"secret"</span>&gt;</span><span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">"secret"</span>&gt;</span>保密<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">fieldset</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">fieldset</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">legend</span>&gt;</span>按钮操作<span class="tag">&lt;/<span class="name">legend</span>&gt;</span></span><br><span class="line">    </span><br><span class="line">      <span class="tag">&lt;<span class="name">p</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 常用按钮 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"submit"</span> <span class="attr">name</span>=<span class="string">"submit"</span> <span class="attr">value</span>=<span class="string">"提交"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"reset"</span> <span class="attr">name</span>=<span class="string">"reset"</span> <span class="attr">value</span>=<span class="string">"重置"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"button "</span> <span class="attr">name</span>=<span class="string">"button"</span> <span class="attr">value</span>=<span class="string">"按钮"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">button</span> <span class="attr">type</span>=<span class="string">""</span>&gt;</span>注册<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">p</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 上传提交  --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"file"</span> <span class="attr">name</span>=<span class="string">""</span> <span class="attr">id</span>=<span class="string">""</span> <span class="attr">multiple</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"image"</span> <span class="attr">src</span>=<span class="string">"submit.gif"</span> <span class="attr">alt</span>=<span class="string">"提交"</span> <span class="attr">height</span>=<span class="string">"50"</span> <span class="attr">width</span>=<span class="string">"auto"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"hidden"</span> <span class="attr">name</span>=<span class="string">""</span> <span class="attr">value</span>=<span class="string">"china"</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">p</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 文本域 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">textarea</span> <span class="attr">name</span>=<span class="string">""</span> <span class="attr">id</span>=<span class="string">""</span> <span class="attr">cols</span>=<span class="string">"100"</span> <span class="attr">rows</span>=<span class="string">"10"</span> <span class="attr">style</span>=<span class="string">"resize: both"</span>&gt;</span></span><br><span class="line">          <span class="comment">&lt;!-- 新增表单属性 --&gt;</span></span><br><span class="line">          1.placeholder：设置提示信息或默认值；</span><br><span class="line">          2.autofocus：自动获取输入焦点；</span><br><span class="line">            e.g.  <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">name</span>=<span class="string">"username"</span> <span class="attr">id</span>=<span class="string">"username"</span> <span class="attr">autofocus</span>&gt;</span></span><br><span class="line">          3.required：设置字段为必填项；</span><br><span class="line">            e.g.  <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">name</span>=<span class="string">"username"</span> <span class="attr">id</span>=<span class="string">"username"</span> <span class="attr">required</span>&gt;</span></span><br><span class="line">          4.pattern：正则表达式验证，更加精准的控制用户的输入；</span><br><span class="line">            e.g.  <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">name</span>=<span class="string">"username"</span> <span class="attr">id</span>=<span class="string">"username"</span> <span class="attr">pattern</span>=<span class="string">"[A-Z]&#123;6&#125;"</span>&gt;</span></span><br><span class="line">          5.list：list属性值必须与input的id值一致，实现dataliist列表与控件绑定；</span><br><span class="line">          6.width和height：（宽高）只要设置其中一个即可，另一个等比缩放；</span><br><span class="line">            e.g.  <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"image"</span> <span class="attr">scr</span>=<span class="string">"img.jpg"</span> <span class="attr">width</span>=<span class="string">"50"</span> <span class="attr">alt</span>=<span class="string">"提交"</span>&gt;</span></span><br><span class="line">          7.min、max和step：区间和步长设置；</span><br><span class="line">            e.g.  <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"number"</span> <span class="attr">name</span>=<span class="string">"salary"</span> <span class="attr">min</span>=<span class="string">"10000"</span> <span class="attr">max</span>=<span class="string">"50000"</span> <span class="attr">step</span>=<span class="string">"500"</span>&gt;</span></span><br><span class="line">          8.novalidate：提交时放弃数据验证（交给服务器验证）；</span><br><span class="line">            e.g.  <span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">""</span> <span class="attr">method</span>=<span class="string">"post"</span> <span class="attr">novalidate</span>&gt;</span><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line">          <span class="comment">&lt;!-- 新增表单类型 --&gt;</span></span><br><span class="line">          1.number：仅限数值型数据；</span><br><span class="line">            e.g.  <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"number"</span> <span class="attr">name</span>=<span class="string">""</span> <span class="attr">id</span>=<span class="string">""</span>&gt;</span></span><br><span class="line">          2.date：仅限日期类型数据；</span><br><span class="line">            e.g.  <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"date"</span> <span class="attr">min</span>=<span class="string">"2017-02-18"</span> <span class="attr">max</span>=<span class="string">"2019-09-01"</span> <span class="attr">value</span>=<span class="string">"2018-10-01"</span>&gt;</span></span><br><span class="line">          3.time：仅限时间型数据，只允许设置小时区间，分钟供参考；</span><br><span class="line">            e.g.  <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"time"</span> <span class="attr">min</span>=<span class="string">"10:10"</span> <span class="attr">max</span>=<span class="string">"22:00"</span> <span class="attr">value</span>=<span class="string">"21:00"</span>&gt;</span></span><br><span class="line">          以上都是输入时验证；</span><br><span class="line">          4.email：仅限于电邮地址类型；</span><br><span class="line">            e.g.  <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"email"</span> <span class="attr">name</span>=<span class="string">""</span> <span class="attr">id</span>=<span class="string">""</span>&gt;</span></span><br><span class="line">          5.search：有内容时，会显示一个取消图标；</span><br><span class="line">          6.url：仅限以http:// 或 https:// 开头的url地址；</span><br><span class="line">          以上类型，提交时验证；</span><br><span class="line">          7.color：通过系统调色板来获取颜色，返回16进制颜色值；</span><br><span class="line">            e.g.  <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"color"</span> <span class="attr">name</span>=<span class="string">"color"</span> <span class="attr">id</span>=<span class="string">"color"</span>&gt;</span></span><br><span class="line">                  <span class="tag">&lt;<span class="name">button</span> <span class="attr">id</span>=<span class="string">"btn"</span>&gt;</span>获取颜色值<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">                  <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">id</span>=<span class="string">"color-value"</span>&gt;</span></span><br><span class="line">                  <span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">                    <span class="built_in">document</span>.getElementById(<span class="string">"btn"</span>).onclick=<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">                      <span class="built_in">document</span>.getElementById(<span class="string">"color-value"</span>).value = <span class="built_in">document</span>.getElementById(<span class="string">"color"</span>).value;</span></span><br><span class="line">                    &#125;</span><br><span class="line">                  <span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">          </span><br><span class="line">        <span class="tag">&lt;/<span class="name">textarea</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">p</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 搜索框 + datalist --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">"search"</span>&gt;</span>搜索：<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">name</span>=<span class="string">"search"</span> <span class="attr">id</span>=<span class="string">"search"</span> <span class="attr">list</span>=<span class="string">"keyword"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">datalist</span> <span class="attr">id</span>=<span class="string">"keyword"</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">"html"</span>&gt;</span>html<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">"css3"</span>&gt;</span>css3<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">"javascript"</span>&gt;</span>javascript<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">"vue"</span>&gt;</span>vue<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">"bootstrap"</span>&gt;</span>bootstrap<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">"php"</span>&gt;</span>php<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">"python"</span>&gt;</span>python<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">"ruby"</span>&gt;</span>ruby<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">datalist</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">fieldset</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">fieldset</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 音视频标签 --&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">legend</span>&gt;</span>音视频标签<span class="tag">&lt;/<span class="name">legend</span>&gt;</span></span><br><span class="line">      <span class="comment">&lt;!-- 1.视频 --&gt;</span></span><br><span class="line">      <span class="comment">&lt;!-- 相关属性：</span></span><br><span class="line"><span class="comment">        controls：设置可控；</span></span><br><span class="line"><span class="comment">        autoplay：自动播放（与preload预加载属性相互排斥）；</span></span><br><span class="line"><span class="comment">        muted：静音；</span></span><br><span class="line"><span class="comment">        poster：自定义海报； --&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">video</span> <span class="attr">src</span>=<span class="string">"http://upos-hz-mirrorcosu.acgvideo.com/upgcxcode/54/67/119866754/119866754-1-6.mp4?e=ig8euxZM2rNcNbRM7WdVhoM17wUVhwdEto8g5X10ugNcXBB_&amp;deadline=1570364892&amp;gen=playurl&amp;nbs=1&amp;oi=2045622435&amp;os=cosu&amp;platform=html5&amp;trid=8c09fdc066c2410a8b74f4bd9451d90a&amp;uipk=5&amp;upsig=8cf6c9ef4fe4bfaf6b61ba5354096f34&amp;uparams=e,deadline,gen,nbs,oi,os,platform,trid,uipk&amp;mid=0"</span> <span class="attr">width</span>=<span class="string">"360"</span> <span class="attr">controls</span> <span class="attr">poster</span>=<span class="string">"http://www.laststand.cn/uploads/allimg/180911/4-1P911144R4551.jpg"</span>&gt;</span>街舞<span class="tag">&lt;/<span class="name">video</span>&gt;</span></span><br><span class="line">      </span><br><span class="line">      <span class="comment">&lt;!-- 2.音频 --&gt;</span></span><br><span class="line">      <span class="comment">&lt;!-- 相关属性：</span></span><br><span class="line"><span class="comment">        controls：设置可控制；</span></span><br><span class="line"><span class="comment">        autoplay：自动播放（与preload预加载属性相互排斥）；</span></span><br><span class="line"><span class="comment">        muted：静音；</span></span><br><span class="line"><span class="comment">        loop：循环播放 --&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">audio</span> <span class="attr">src</span>=<span class="string">"http://music.163.com/song/media/outer/url?id=29004400.mp3"</span> <span class="attr">controls</span>&gt;</span><span class="tag">&lt;/<span class="name">audio</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">fieldset</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>显示：<br><img src="https://img-blog.csdnimg.cn/20191006183242952.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MTU5OTg1OA==,size_16,color_FFFFFF,t_70" alt><br><img src="https://img-blog.csdnimg.cn/2019100618330129.png" alt><br><img src="https://img-blog.csdnimg.cn/2019100618332546.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MTU5OTg1OA==,size_16,color_FFFFFF,t_70" alt><br><img src="https://img-blog.csdnimg.cn/20191006183344691.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MTU5OTg1OA==,size_16,color_FFFFFF,t_70" alt></p>
<hr>
<p>结束！</p>
<blockquote>
<p>原文地址： CSDN博客 - <a href="https://blog.csdn.net/weixin_41599858/article/details/102230925" target="_blank" rel="noopener">Web前端（一） - HTML标签常用整理！</a></p>
</blockquote>
]]></content>
      <categories>
        <category>编程</category>
        <category>前端</category>
      </categories>
      <tags>
        <tag>HTML</tag>
      </tags>
  </entry>
  <entry>
    <title>web前端（七）：gh-pages部署到GitHub</title>
    <url>/archives/ff075d55.html</url>
    <content><![CDATA[<p>有时需要将一些前端静态资源部署到GitHub上，如博客、在线简历这类的情况。<br>这只涉及一些简单的页面和静态文件，为了减少一些脚本的使用，前端有gh-pages这样一个模块，可以帮助部署到GitHub上。</p>
<a id="more"></a>

<h2 id="1-注册-GitHub-账号"><a href="#1-注册-GitHub-账号" class="headerlink" title="1.注册 GitHub 账号"></a>1.注册 <code>GitHub</code> 账号</h2><p>确保有一个GitHub账号，新建仓库，并设置与本地关联，具体步骤参考网上的资料。</p>
<h2 id="2-创建-gh-pages-分支"><a href="#2-创建-gh-pages-分支" class="headerlink" title="2.创建 gh-pages 分支"></a>2.创建 <code>gh-pages</code> 分支</h2><p>为了不影响项目的开发，在 <code>GitHub</code> 上创建一个 gh-pages 分支。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git checkout --orphan gh-pages </span><br><span class="line">git remote add origin &#123;远程仓&#125;   <span class="comment"># 添加关联</span></span><br><span class="line">git push origin gh-pages        <span class="comment"># 推送远程</span></span><br></pre></td></tr></table></figure>

<h2 id="3-安装-node-js"><a href="#3-安装-node-js" class="headerlink" title="3.安装 node.js"></a>3.安装 <code>node.js</code></h2><p>确保有 <code>node</code> 环境，安装 <code>npm</code>，一般安装nodejs的安装包都集成了。<br>将 <code>node</code> 和 <code>npm</code> 添加到环境变量，具体流程可去网上搜索。<br>这里推荐一款修改Windows环境变量的软件：<a href="https://www.rapidee.com/en/download" target="_blank" rel="noopener">rapidee</a></p>
<h2 id="4-安装插件-gh-pages"><a href="#4-安装插件-gh-pages" class="headerlink" title="4.安装插件 gh-pages"></a>4.安装插件 <code>gh-pages</code></h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cd</span> project_path  <span class="comment"># 进入项目目录</span></span><br><span class="line">npm install gh-pages --save</span><br></pre></td></tr></table></figure>

<h2 id="5-修改-package-json"><a href="#5-修改-package-json" class="headerlink" title="5.修改 package.json"></a>5.修改 <code>package.json</code></h2><figure class="highlight json"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="comment">//配置homepage</span></span><br><span class="line">  <span class="attr">"homepage"</span>:<span class="string">"https://yaojusheng.github.io/dynamic-resume"</span>,</span><br><span class="line">  <span class="comment">//配置scripts</span></span><br><span class="line">  <span class="attr">"scripts"</span>:&#123;</span><br><span class="line">    <span class="attr">"dev"</span>: <span class="string">"node build/dev-server.js"</span>,</span><br><span class="line">    <span class="attr">"build"</span>: <span class="string">"node build/build.js"</span>,</span><br><span class="line">    <span class="attr">"predeploy"</span>:<span class="string">"npm run build"</span>,</span><br><span class="line">    <span class="attr">"deploy"</span>:<span class="string">"gh-pages -d public"</span></span><br><span class="line">  &#125;,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="6-修改-config-index-js"><a href="#6-修改-config-index-js" class="headerlink" title="6.修改 config/index.js"></a>6.修改 <code>config/index.js</code></h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">build: &#123;</span><br><span class="line">  ...,</span><br><span class="line">  assetsPublicPath: <span class="string">''</span>  <span class="comment">// 置空</span></span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure>

<h2 id="6-推送到-gh-pages-分支"><a href="#6-推送到-gh-pages-分支" class="headerlink" title="6.推送到 gh-pages 分支"></a>6.推送到 <code>gh-pages</code> 分支</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm run deploy</span><br></pre></td></tr></table></figure>

<h2 id="7-设置-GitHub-Pages-的-source"><a href="#7-设置-GitHub-Pages-的-source" class="headerlink" title="7.设置 GitHub Pages 的 source"></a>7.设置 <code>GitHub Pages</code> 的 <code>source</code></h2><p>点击项目的 <code>Settings</code> 按钮，找到 <code>GitHub Pages</code> 选项，然后选择之前创建的 <code>gh-pages</code> 分支作为 <code>source</code>，等待部署完成。</p>
<hr>
]]></content>
      <categories>
        <category>编程</category>
        <category>前端</category>
      </categories>
      <tags>
        <tag>gh-pages</tag>
      </tags>
  </entry>
  <entry>
    <title>Python（十二）- 基础知识点汇总</title>
    <url>/archives/65842ce6.html</url>
    <content><![CDATA[<p>Python 语言如今风靡一时，因其简单易学的语法和庞大完善的社区支持深受程序员的喜爱，本篇博文主要整理一下 Python 相关的基础知识以及一些汇总。</p>
<a id="more"></a>

<h2 id="一、知识点概览"><a href="#一、知识点概览" class="headerlink" title="一、知识点概览"></a>一、知识点概览</h2><ul>
<li><font color="green">1.Python 基本数据结构与类型转换</font></li>
<li><font color="green">2.作用域和命名空间</font></li>
<li><font color="green">3.内存管理和垃圾回收</font></li>
<li><font color="green">4.异常处理</font></li>
<li><font color="green">5.类与对象</font></li>
<li><font color="green">6.闭包与装饰器</font></li>
<li><font color="green">7.实例方法、静态方法和类方法</font></li>
<li><font color="green">8.魔法方法</font></li>
<li><font color="green">9.模块与包</font></li>
<li><font color="green">10.迭代器和生成器</font></li>
<li><font color="green">11.浅拷贝和深拷贝</font></li>
<li><font color="green">12.常见的高阶函数</font></li>
<li><font color="green">13.多任务和 <code>GIL</code></font></li>
<li><font color="green">14.PEP8 规范</font></li>
</ul>
<h2 id="二、解析与说明"><a href="#二、解析与说明" class="headerlink" title="二、解析与说明"></a>二、解析与说明</h2><h3 id="1-Python-基本数据结构与类型转换"><a href="#1-Python-基本数据结构与类型转换" class="headerlink" title="1.Python 基本数据结构与类型转换"></a>1.Python 基本数据结构与类型转换</h3><h4 id="1-1-常见数据类型"><a href="#1-1-常见数据类型" class="headerlink" title="1.1.常见数据类型"></a>1.1.常见数据类型</h4><table text-align="center">
  <thead>
    <tr>
      <th rowspan="2">数据类型</th>
      <th rowspan="2">操作</th>
      <th colspan="2">时间复杂度</th>
      <th rowspan="2">是否有序</th>
      <th rowspan="2">是否可变</th>
    </tr>
    <tr>
      <th>平均情况</th>
      <th>最坏情况</th>
    </tr>
  </thead>
  <tbody>
  <t-item>
    <tr>
      <td rowspan="1"><font color="green">字符串</font></td>
      <td>查</td>
      <td>O(n)</td>
      <td>O(n)</td>
      <td rowspan="1">是 (√)</td>
      <td rowspan="1">否 (×)</td>
    </tr>
  </t-item>
  <t-item>
    <tr>
      <td rowspan="4"><font color="green">列表</font></td>
      <td>增</td>
      <td>O(1)</td>
      <td>O(1)</td>
      <td rowspan="4">是 (√)</td>
      <td rowspan="4">是 (√)</td>
    </tr>
    <tr>
      <td>删</td>
      <td>O(n)</td>
      <td>O(n)</td>
    </tr>
    <tr>
      <td>改</td>
      <td>O(1)</td>
      <td>O(1)</td>
    </tr>
    <tr>
      <td>查</td>
      <td>O(n)</td>
      <td>O(n)</td>
    </tr>
  </t-item>
  <t-item>
    <tr>
      <td rowspan="1"><font color="green">元组</font></td>
      <td>查</td>
      <td>O(n)</td>
      <td>O(n)</td>
      <td rowspan="1">是 (√)</td>
      <td rowspan="1">否 (×)</td>
    </tr>
  </t-item>
  <t-item>
    <tr>
      <td rowspan="7"><font color="green">集合</font></td>
      <td>增</td>
      <td>O(1)</td>
      <td>O(1)</td>
      <td rowspan="7">否 (×)</td>
      <td rowspan="7">是 (√)</td>
    </tr>
    <tr>
      <td>删</td>
      <td>O(1)</td>
      <td>O(1)</td>
    </tr>
    <tr>
      <td>查</td>
      <td>O(1)</td>
      <td>O(n)</td>
    </tr>
    <tr>
      <td>交集（s&t）</td>
      <td>O(min(len(s), len(t))</td>
      <td>O(len(s) * len(t))</td>
    </tr>
    <tr>
      <td>并集（s|t）</td>
      <td colspan="2">O(len(s)+len(t))</td>
    </tr>
    <tr>
      <td>补集（s-t）</td>
      <td colspan="2">O(len(s))</td>
    </tr>
    <tr>
      <td>对称补集（s^t）</td>
      <td>O(len(s))</td>
      <td>O(len(s) * len(t))</td>
    </tr>
  </t-item>
  <t-item>
    <tr>
      <td rowspan="4"><font color="green">字典</font></td>
      <td>增</td>
      <td>O(1)</td>
      <td>O(n)</td>
      <td rowspan="4">否 (×)</td>
      <td rowspan="4">是 (√)</td>
    </tr>
    <tr>
      <td>删</td>
      <td>O(1)</td>
      <td>O(n)</td>
    </tr>
    <tr>
      <td>改</td>
      <td>O(1)</td>
      <td>O(n)</td>
    </tr>
    <tr>
      <td>查</td>
      <td>O(n)</td>
      <td>O(n)</td>
    </tr>
  </t-item>
  </tbody>
</table>

<blockquote>
<p><code>n</code>:容器中元素的数量。</p>
</blockquote>
<blockquote>
<p>数据类型相关的内置操作方法可参考：<a href="https://blog.csdn.net/weixin_41599858/article/details/102883940" target="_blank" rel="noopener">Python（四）- 数据类型及常用的操作！</a></p>
</blockquote>
<h4 id="1-2-类型转换"><a href="#1-2-类型转换" class="headerlink" title="1.2.类型转换"></a>1.2.类型转换</h4><p>类型转换是指将一种数据类型转换为另一种数据类型。</p>
<ul>
<li>int() ：将其他数据类型转换为整数类型</li>
<li>float(): 将其他数据类型转换为 <code>float</code> 类型</li>
<li>ord() : 将字符转换为整数</li>
<li>hex() : 将整数转换为十六进制</li>
<li>oct() : 将整数转换为八进制</li>
<li>tuple():  此函数用于转换为元组。</li>
<li>set() :  此函数在转换为 set 后返回类型。</li>
<li>list() :  此函数用于将任何数据类型转换为列表类型。</li>
<li>dict() :  此函数用于将顺序元组（键，值）转换为字典。</li>
<li>str() :  用于将整数转换为字符串。</li>
<li>complex(real，imag): 此函数将实数转换为复数。</li>
</ul>
<h3 id="2-作用域和命名空间"><a href="#2-作用域和命名空间" class="headerlink" title="2.作用域和命名空间"></a>2.作用域和命名空间</h3><h4 id="2-1-命名空间"><a href="#2-1-命名空间" class="headerlink" title="2.1.命名空间"></a>2.1.命名空间</h4><p>命名空间是从名称到对象的映射，大部分的命名空间都是通过 Python 字典来实现的。</p>
<p>命名空间是一个命名系统，各个命名空间是独立的，用于确保名称是唯一性，以避免命名冲突。</p>
<p><font color="green">一般有三种命名空间：</font></p>
<ul>
<li><font color="blue">内置名称（built-in names）</font>：Python 语言内置的名称，比如函数名 abs、char 和异常名称 BaseException、Exception 等等。</li>
<li><font color="blue">全局名称（global names）</font>：模块中定义的名称，记录了模块的变量，包括函数、类、其它导入的模块、模块级的变量和常量。</li>
<li><font color="blue">局部名称（local names）</font>：函数中定义的名称，记录了函数的变量，包括函数的参数和局部定义的变量。（类中定义的也是）</li>
</ul>
<p><font color="green">命名空间查找顺序:</font> 局部的命名空间 -&gt; 全局命名空间 -&gt; 内置命名空间。如果找不到变量，它将放弃查找并引发一个 NameError 异常。</p>
<p><font color="green">命名空间的生命周期：</font>命名空间的生命周期取决于对象的作用域，如果对象执行完成，则该命名空间的生命周期就结束。因此，无法从外部命名空间访问内部命名空间的对象。</p>
<h4 id="2-2-作用域"><a href="#2-2-作用域" class="headerlink" title="2.2.作用域"></a>2.2.作用域</h4><p><code>作用域</code>就是一个 Python 程序可以直接访问命名空间的正文区域。</p>
<p><font color="green">Python 有四种作用域：</font></p>
<ul>
<li><font color="blue">L（Local）</font>：本地作用域，最内层，包含局部变量，比如一个函数/方法内部。</li>
<li><font color="blue">E（Enclosing）</font>：当前作用域被嵌入的本地作用域，包含了非局部(non-local)也非全局(non-global)的变量。比如两个嵌套函数，一个函数（或类） A 里面又包含了一个函数 B ，那么对于 B 中的名称来说 A 中的作用域就为 nonlocal。</li>
<li><font color="blue">G（Global）</font>：全局/模块作用域，当前脚本的最外层，比如当前模块的全局变量。</li>
<li><font color="blue">B（Built-in）</font>： 内置作用域，包含了内建的变量/关键字等，最后被搜索。</li>
</ul>
<p>规则顺序： 本地作用域（L） –&gt; 当前作用域被嵌入的本地作用域（E） –&gt; 全局/模块作用域（G） –&gt; 内置作用域（B）。</p>
<p>全局变量：在函数外或全局空间中声明的变量称为全局变量。这些变量可以由程序中的任何函数访问。<br>局部变量：在函数内声明的任何变量都称为局部变量。此变量存在于局部空间中，而不是全局空间中。</p>
<blockquote>
<p>参考：<a href="https://www.runoob.com/python3/python3-namespace-scope.html" target="_blank" rel="noopener">菜鸟教程</a></p>
</blockquote>
<h3 id="3-内存管理和垃圾回收"><a href="#3-内存管理和垃圾回收" class="headerlink" title="3.内存管理和垃圾回收"></a>3.内存管理和垃圾回收</h3><p>python 中的内存管理由 Python 私有堆空间管理。所有 Python 对象和数据结构都位于私有堆中。程序员无权访问此私有堆。python 解释器负责处理这个问题。<br>Python 对象的堆空间分配由 Python 的内存管理器完成。核心 API 提供了一些程序员编写代码的工具。<br>Python 还有一个内置的垃圾收集器，它可以回收所有未使用的内存，并使其可用于堆空间。</p>
<p>从三个方面说明：</p>
<ul>
<li>对象的引用计数机制</li>
<li>垃圾回收机制</li>
<li>内存池机制</li>
</ul>
<h4 id="3-1-对象的引用计数机制"><a href="#3-1-对象的引用计数机制" class="headerlink" title="3.1.对象的引用计数机制"></a>3.1.对象的引用计数机制</h4><p>Python 内部使用引用计数，来保持追踪内存中的对象，所有对象都有引用计数。</p>
<ul>
<li>引用计数增加的情况：<ul>
<li>一个对象分配一个新名称</li>
<li>将其放入一个容器中（如列表、元组或字典） +引用计数减少的情况：</li>
<li>使用 del 语句对对象别名显示的销毁</li>
<li>引用超出作用域或被重新赋值<blockquote>
<p>sys.getrefcount( )函数可以获得对象的当前引用计数，<br>多数情况下，引用计数比你猜测得要大得多。对于不可变数据（如数字和字符串），解释器会在程序的不同部分共享内存，以便节约内存。</p>
</blockquote>
</li>
</ul>
</li>
</ul>
<h4 id="3-2-垃圾回收"><a href="#3-2-垃圾回收" class="headerlink" title="3.2. 垃圾回收"></a>3.2. 垃圾回收</h4><ul>
<li>当一个对象的引用计数归零时，它将被垃圾收集机制处理掉。</li>
<li>当两个对象 a 和 b 相互引用时，del 语句可以减少 a 和 b 的引用计数，并销毁用于引用底层对象的名称。然而由于每个对象都包含一个对其他对象的应用，因此引用计数不会归零，对象也不会销毁。（从而导致内存泄露）。为解决这一问题，解释器会定期执行一个循环检测器，搜索不可访问对象的循环并删除它们。</li>
</ul>
<h4 id="3-3-内存池机制"><a href="#3-3-内存池机制" class="headerlink" title="3.3. 内存池机制"></a>3.3. 内存池机制</h4><p>Python 提供了对内存的垃圾收集机制，但是它将不用的内存放到内存池而不是返回给操作系统。</p>
<ul>
<li>Pymalloc 机制。为了加速 Python 的执行效率，Python 引入了一个内存池机制，用于管理对小块内存的申请和释放。</li>
<li>Python 中所有小于 256 个字节的对象都使用 pymalloc 实现的分配器，而大的对象则使用系统的 malloc。</li>
<li>对于 Python 对象，如整数，浮点数和 List，都有其独立的私有内存池，对象间不共享他们的内存池。也就是说如果你分配又释放了大量的整数，用于缓存这些整数的内存就不能再分配给浮点数。</li>
</ul>
<h3 id="4-异常处理"><a href="#4-异常处理" class="headerlink" title="4.异常处理"></a>4.异常处理</h3><p>如果我们没有对异常进行任何预防，那么在程序执行的过程中发生异常，就会中 断程序，调用 python 默认的异常处理器，并在终端输出异常信息。</p>
<p>Python 中的异常处理语句有：</p>
<ul>
<li><strong><code>try...except...finally</code></strong> 语句: 当 <code>try</code> 语句执行时发生异常，回到 <code>try</code> 语句层， 寻找后面是否有 <code>except</code> 语句。找到 except 语句后，会调用这个自定义的异常处 理器。<code>except</code> 将异常处理完毕后，程序继续往下执行。<code>finally</code> 语句表示，无论 异常发生与否，finally 中的语句都要执行。</li>
<li><strong><code>assert</code></strong> 语句：判断 <code>assert</code> 后面紧跟的语句是 <code>True</code> 还是 <code>False</code>，如果是 <code>True</code> 则 继续执行 <code>print</code>，如果是 <code>False</code> 则中断程序，调用默认的异常处理器，同时输出 <code>assert</code> 语句逗号后面的提示信息。</li>
<li><strong><code>with</code></strong> 语句：如果 <code>with</code> 语句或语句块中发生异常，会调用默认的异常处理器处理，但文件还是会正常关闭。</li>
</ul>
<h3 id="5-类与对象"><a href="#5-类与对象" class="headerlink" title="5.类与对象"></a>5.类与对象</h3><p>类（class）：即某一类事物的统称。它们具有相同的属性，例如狗，狗的毛色多样，其颜色就属于狗的 <strong>属性</strong>（也被叫做变量）。</p>
<p>对象(object)：黑狗，黄狗等等都是对象，这个对象就是类的 <strong>实例</strong>（instance）。其作用为属性引用。</p>
<p>Python 类可以看作属性和方法的集合，其中定义了每个对象所共有的属性和方法。<br>对象为类的实例,对象可调用类的属性和方法。</p>
<p>Python 中声明一个类，需要：关键字（class） + 标识符（类名） + 继承类。<br>类的实例化需要一个初始化方法（<code>__init__()</code>）。</p>
<p>如：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Animal</span><span class="params">(object)</span>:</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, name)</span>:</span></span><br><span class="line">        self.name = name</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">sleep</span><span class="params">(sec)</span>:</span></span><br><span class="line">        print(<span class="string">f"<span class="subst">&#123;self.name&#125;</span> sleep <span class="subst">&#123;sec&#125;</span>s"</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Dog</span><span class="params">(Animal)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, name, color)</span>:</span></span><br><span class="line">        self.name = name</span><br><span class="line">        self.color = color</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">dog1 = Dog(<span class="string">'wc'</span>, <span class="string">'yellow'</span>)</span><br><span class="line">dog1.sleep(<span class="number">1</span>)</span><br></pre></td></tr></table></figure>

<p>面向对象的三大特性：</p>
<ul>
<li><strong>封装</strong>: 将抽象得到的数据和行为（功能）相结合，形成一个有机的整体（即类）。广义的说法，即类与函数本身也是一种封装的体现；狭义的说法是将某些不想被外界访问的属性进行私有化，对外提供接口和访问方法。</li>
<li><strong>继承</strong>: python 中，一个类可以继承一个或多个父类。</li>
<li><strong>多态</strong>: 一类事物的多种形态，如：动物类可衍生猫、狗、猪类等等，Python 的多态通过继承实现，子类在执行相同的方法时表现出不同状态。</li>
</ul>
<h4 id="5-1-封装"><a href="#5-1-封装" class="headerlink" title="5.1.封装"></a>5.1.封装</h4><p>封装的原则：</p>
<ul>
<li>将不需要对外提供的内容都隐藏起来；</li>
<li>把属性都隐藏，提供公共方法对其访问。</li>
</ul>
<p>封装的作用：</p>
<ul>
<li>提高复用性</li>
<li>降低冗余度</li>
<li>提高安全性</li>
</ul>
<h4 id="5-2-继承"><a href="#5-2-继承" class="headerlink" title="5.2.继承"></a>5.2.继承</h4><p>其作用是：</p>
<ul>
<li>减少重复代码，提高空间利用率</li>
<li>增加代码的可读性，避免冗长阅读</li>
<li>提高可维护性，代码快速定位</li>
</ul>
<p>子类继承自父类，可以重用父类的方法，也可以覆写该继承方法（派生），如：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 修改上述Dog类</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Dog</span><span class="params">(Animal)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, name, color)</span>:</span></span><br><span class="line">        super(Animal, self).__init__(name)  <span class="comment"># or super().__init__(name)</span></span><br><span class="line">        self.color = color</span><br></pre></td></tr></table></figure>

<blockquote>
<p>多继承：遵循广度优先遍历顺序</p>
</blockquote>
<h4 id="5-3-多态"><a href="#5-3-多态" class="headerlink" title="5.3.多态"></a>5.3.多态</h4><p>多态意味着多种形式，其作用是让程序在不同情况下用一个函数名启用不同形态的方法，它给予了面向对象系统极大的灵活性。</p>
<p>如：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Cat</span><span class="params">(Animal)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, name)</span>:</span></span><br><span class="line">        super(Animal, self).__init__(name)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Pig</span><span class="params">(Animal)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, name)</span>:</span></span><br><span class="line">        super(Animal, self).__init__(name)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">sleep</span><span class="params">(a)</span>:</span></span><br><span class="line">    a.sleep(<span class="number">3</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">cat = Cat(<span class="string">'cat'</span>)</span><br><span class="line">pig = Pig(<span class="string">'pig'</span>)</span><br><span class="line"></span><br><span class="line">sleep(cat)  <span class="comment"># cat sleep 3s</span></span><br><span class="line">sleep(pig)  <span class="comment"># pig sleep 3s</span></span><br></pre></td></tr></table></figure>

<h3 id="6-闭包与装饰器"><a href="#6-闭包与装饰器" class="headerlink" title="6.闭包与装饰器"></a>6.闭包与装饰器</h3><h4 id="6-1-闭包"><a href="#6-1-闭包" class="headerlink" title="6.1.闭包"></a>6.1.闭包</h4><p>闭包(closure)是函数式编程的重要的语法结构，也是一种组织代码的结构， 它同样提高了代码的可重复使用性。<br>当一个内嵌函数引用其外部作作用域的变量，我们就会得到一个闭包。</p>
<p>总结一下，创建一个闭包必须满足以下几点:</p>
<ul>
<li>必须有一个内嵌函数</li>
<li>内嵌函数必须引用外部函数中的变量</li>
<li>外部函数的返回值必须是内嵌函数</li>
</ul>
<h4 id="6-2-装饰器"><a href="#6-2-装饰器" class="headerlink" title="6.2.装饰器"></a>6.2.装饰器</h4><p>装饰器本质上是一个 <code>Python 函数</code>，它可以让其他函数在不需要做任何代码变动 的前提下，增加额外功能，装饰器的返回值也是一个函数对象。<br>它经常用于有切面 需求的场景，比如：插入日志、性能测试、事务处理、缓存、权限校验等场景。<br>有了装饰器，就可以抽离出大量与函数功能本身无关的相似代码并继续重用。</p>
<h3 id="7-实例方法、静态方法和类方法"><a href="#7-实例方法、静态方法和类方法" class="headerlink" title="7.实例方法、静态方法和类方法"></a>7.实例方法、静态方法和类方法</h3><h4 id="7-1-实例方法"><a href="#7-1-实例方法" class="headerlink" title="7.1.实例方法"></a>7.1.实例方法</h4><p>Python 中，实例方法定义在类中，它的第一个参数为 <code>self</code>。</p>
<p><code>self</code> 在定义类的方法时是必须有的，虽然在调用时不必传入相应的参数。</p>
<p><strong>注意</strong>：<code>self</code> 代表类的 <strong>实例</strong>，而不是这个类。</p>
<p>如：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Test</span><span class="params">(object)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">tHelp</span><span class="params">(self)</span>:</span></span><br><span class="line">        print(self)</span><br><span class="line">        print(self.__class__)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">t = Test()</span><br><span class="line">t.tHelp()  <span class="comment"># tHelp()就是一个实例方法</span></span><br></pre></td></tr></table></figure>

<h4 id="7-2-静态方法（staticmethod）"><a href="#7-2-静态方法（staticmethod）" class="headerlink" title="7.2.静态方法（staticmethod）"></a>7.2.静态方法（staticmethod）</h4><p>在类中无需实例参与即可调用的方法（无需 <code>self</code> 参数），在调用过程中，无需创建类的实例，通过类直接来调用的方法。</p>
<p>在 Python 中，静态方法使用装饰器 <strong><code>@staticmethod</code></strong> 来声明。</p>
<p>使用场景：开发过程中需要定义的一些方法和类有关，但在实现时并不需要引用类或者实例，此时用静态方法，将其作为一个封装在类中的普通函数。</p>
<p>好处是调用时它返回一个真正的函数，且是同一实例。</p>
<p>例：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">TestS</span><span class="params">(object)</span>:</span></span><br><span class="line"></span><br><span class="line"><span class="meta">    @staticmethod</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">func</span><span class="params">()</span>:</span></span><br><span class="line">        print(<span class="string">'Hello Python'</span>)</span><br></pre></td></tr></table></figure>

<h4 id="7-3-类方法（classmethod）"><a href="#7-3-类方法（classmethod）" class="headerlink" title="7.3.类方法（classmethod）"></a>7.3.类方法（classmethod）</h4><p>类方法传入的第一个参数为 <code>cls</code>，是类本身。<br>其意义是表明为类对象所拥有的方法。<br>类方法可以通过类直接调用，也可以通过类的实例来调用。</p>
<p>在 Python 中，类方法使用装饰器 <strong><code>@classmethod</code></strong> 来声明。</p>
<p>使用场景：大多情况下，可以替代静态方法。增加了一个对实际调用类的引用。</p>
<p>例：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">TestC</span><span class="params">(object)</span>:</span></span><br><span class="line"></span><br><span class="line"><span class="meta">    @classmethod</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">func</span><span class="params">(cls)</span>:</span></span><br><span class="line">        print(type(cls), cls)</span><br></pre></td></tr></table></figure>

<h4 id="7-4-property-属性装饰器"><a href="#7-4-property-属性装饰器" class="headerlink" title="7.4.@property 属性装饰器"></a>7.4.<code>@property</code> 属性装饰器</h4><p>其作用是把一个方法变成属性。</p>
<p>对于 <code>@property</code> ，在对实例属性操作的时候，该属性的读写通过 getter 和 setter 方法来实现。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Student</span><span class="params">(object)</span>:</span></span><br><span class="line"></span><br><span class="line"><span class="meta">    @property</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">birth</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> self._birth</span><br><span class="line"></span><br><span class="line"><span class="meta">    @birth.setter</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">birth</span><span class="params">(self, value)</span>:</span></span><br><span class="line">        self._birth = value</span><br><span class="line"></span><br><span class="line"><span class="meta">    @property</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">age</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> <span class="number">2020</span> - self._birth</span><br></pre></td></tr></table></figure>

<p>上面的 <code>birth</code> 是可读写属性，而 <code>age</code> 就是一个只读属性，因为 <code>age</code> 可以根据 <code>birth</code> 和当前时间计算出来。</p>
<blockquote>
<p>参考：<a href="https://www.liaoxuefeng.com/wiki/1016959663602400/1017502538658208" target="_blank" rel="noopener">@property 的使用</a></p>
</blockquote>
<h3 id="8-魔法方法"><a href="#8-魔法方法" class="headerlink" title="8.魔法方法"></a>8.魔法方法</h3><p>在 Python 中，一般我们将类内外定义的函数，称之为方法和函数，差别不大，只是写法上的差异。<br>但是在类中，有一些特殊的方法，被归为一类，这些特殊方法以前后双下划线和字母组成（<code>__xxx__</code>），我们称之为魔法方法。</p>
<p>常见的魔法方法有：</p>
<ul>
<li><p><strong>基本方法</strong>：</p>
<table>
<thead>
<tr>
<th align="center">方法</th>
<th align="center">描述</th>
<th align="center">补充说明</th>
</tr>
</thead>
<tbody><tr>
<td align="center"><code>__init__(self, *args, **kwargs)</code></td>
<td align="center">构造器，当一个实例对象被定义时调用</td>
<td align="center">初始化对象，类似于 C++的构造函数</td>
</tr>
<tr>
<td align="center"><code>__new__(cls, *args, **kwargs)</code></td>
<td align="center">在一个对象实例化的时候所调用的第一个方法，返回一个实例</td>
<td align="center">实例化方法，决定是否要使用该 <code>__init__</code> 方法，如果未返回实例对象，则 <code>__init__</code> 不会被调用</td>
</tr>
<tr>
<td align="center"><code>__call__(self, *args, **kwargs)</code></td>
<td align="center">允许一个类像函数一样被调用</td>
<td align="center"><code>class_obj(*args, **kwargs)</code>实际调用的是<code>class_obj.__call__(*args, **kwargs)</code></td>
</tr>
<tr>
<td align="center"><code>__del__(self)</code></td>
<td align="center">析构器，当删除一个实例对象时调用</td>
<td align="center">类似于 C++的析构函数</td>
</tr>
<tr>
<td align="center"><code>__len__(self)</code></td>
<td align="center">获得实例对象的长度</td>
<td align="center">相当于<code>len(obj)</code></td>
</tr>
<tr>
<td align="center"><code>__repr__(self)</code></td>
<td align="center">将实例对象转化为字符串的形式，给解释器看</td>
<td align="center">与函数 repr(obj)功能相同</td>
</tr>
<tr>
<td align="center"><code>__str__(self)</code></td>
<td align="center">将实例对象转化为字符串的形式，给程序员看</td>
<td align="center">相当于 str(obj)</td>
</tr>
<tr>
<td align="center">…</td>
<td align="center">…</td>
<td align="center">…</td>
</tr>
</tbody></table>
</li>
<li><p><strong>运算符操作</strong>：</p>
<table>
<thead>
<tr>
<th align="center">方法</th>
<th align="center">描述</th>
<th align="center">补充说明</th>
</tr>
</thead>
<tbody><tr>
<td align="center"><code>__add__(self, other)</code></td>
<td align="center">加法：+</td>
<td align="center"></td>
</tr>
<tr>
<td align="center"><code>__sub__(self, other)</code></td>
<td align="center">减法：-</td>
<td align="center"></td>
</tr>
<tr>
<td align="center"><code>__mul__(self,other)</code></td>
<td align="center">乘法：*</td>
<td align="center"></td>
</tr>
<tr>
<td align="center"><code>__truediv(self, other)</code></td>
<td align="center">除法：/</td>
<td align="center">返回一个浮点数</td>
</tr>
<tr>
<td align="center"><code>__floordiv(self, other)</code></td>
<td align="center">整除：//</td>
<td align="center">向下取整</td>
</tr>
<tr>
<td align="center"><code>__mod__(self, other)</code></td>
<td align="center">求余：%</td>
<td align="center"></td>
</tr>
<tr>
<td align="center"><code>__pow__(self, other[, mod])</code></td>
<td align="center">幂运算</td>
<td align="center">相当于函数 <code>pow(base, exp, mod=None)</code></td>
</tr>
<tr>
<td align="center"><code>__and__(self, other)</code></td>
<td align="center">按位与</td>
<td align="center">相当于 <code>&amp;</code></td>
</tr>
<tr>
<td align="center"><code>__or__(self, other)</code></td>
<td align="center">按位或</td>
<td align="center">相当于 `</td>
</tr>
<tr>
<td align="center">…</td>
<td align="center">…</td>
<td align="center">…</td>
</tr>
</tbody></table>
</li>
<li><p><strong>比较操作符</strong>：</p>
<table>
<thead>
<tr>
<th align="center">方法</th>
<th align="center">描述</th>
<th align="center">补充说明</th>
</tr>
</thead>
<tbody><tr>
<td align="center"><code>__gt__(self, other)</code></td>
<td align="center">大于：&gt;</td>
<td align="center">以 <code>&gt;</code> 判断</td>
</tr>
<tr>
<td align="center"><code>__lt__(self, other)</code></td>
<td align="center">小于：&lt;</td>
<td align="center">以 <code>&lt;</code> 判断</td>
</tr>
<tr>
<td align="center"><code>__eq__(self, other)</code></td>
<td align="center">等于：==</td>
<td align="center">以 <code>==</code> 判断</td>
</tr>
<tr>
<td align="center"><code>__ne__(self, other)</code></td>
<td align="center">不等于：!=</td>
<td align="center">以 <code>!=</code> 判断</td>
</tr>
<tr>
<td align="center">…</td>
<td align="center">…</td>
<td align="center">…</td>
</tr>
</tbody></table>
</li>
<li><p><strong>属性操作</strong>：</p>
<table>
<thead>
<tr>
<th align="center">方法</th>
<th align="center">描述</th>
</tr>
</thead>
<tbody><tr>
<td align="center"><code>__getattr__(self, name)</code></td>
<td align="center">访问一个不存在的属性时调用</td>
</tr>
<tr>
<td align="center"><code>__setattr__(self, name, value)</code></td>
<td align="center">设置属性时调用</td>
</tr>
<tr>
<td align="center"><code>__delattr__(self, name)</code></td>
<td align="center">删除一个属性时调用</td>
</tr>
<tr>
<td align="center"><code>__getattribute(self, name)</code></td>
<td align="center">访问存在的属性时调用</td>
</tr>
<tr>
<td align="center">…</td>
<td align="center">…</td>
</tr>
</tbody></table>
</li>
<li><p><strong>容器类型操作</strong>：</p>
<table>
<thead>
<tr>
<th align="center">方法</th>
<th align="center">描述</th>
</tr>
</thead>
<tbody><tr>
<td align="center"><code>__iter__(self)</code></td>
<td align="center">定义迭代器对象的行为</td>
</tr>
<tr>
<td align="center"><code>__next__(self)</code></td>
<td align="center">定义迭代器中元素的行为</td>
</tr>
<tr>
<td align="center"><code>__getitem__(self, key)</code></td>
<td align="center">获取容器中指定元素的行为</td>
</tr>
<tr>
<td align="center"><code>__setitem__(self, key, value)</code></td>
<td align="center">设置容器中指定元素的行为</td>
</tr>
<tr>
<td align="center"><code>__delitem__(self, key)</code></td>
<td align="center">删除容器中指定元素的行为</td>
</tr>
<tr>
<td align="center">…</td>
<td align="center">…</td>
</tr>
</tbody></table>
</li>
</ul>
<blockquote>
<p>参考：<a href="https://www.cnblogs.com/Jimmy1988/p/6801795.html" target="_blank" rel="noopener">python魔法方法总结</a></p>
</blockquote>
<h3 id="9-模块与包"><a href="#9-模块与包" class="headerlink" title="9.模块与包"></a>9.模块与包</h3><p>Python 模块是包含 Python 代码的.py 文件。此代码可以是函数类或变量。一些常用的内置模块包括：sys、math、random、time、json、os、re。<br>Python 包是包含多个模块的命名空间。即是一个目录,目录下可以有多个模块文件,必须要有一个 <strong><code>__init__.py</code></strong> 文件</p>
<h3 id="10-迭代器和生成器"><a href="#10-迭代器和生成器" class="headerlink" title="10.迭代器和生成器"></a>10.迭代器和生成器</h3><p>首先，搞清楚几个概念：容器(container)、可迭代对象(iterable)、迭代器(iterator)、生成器(generator)。<br>迭代是 Python 最强大的功能之一，是访问集合元素的一种方式。</p>
<h4 id="10-1-容器-container"><a href="#10-1-容器-container" class="headerlink" title="10.1.容器(container)"></a>10.1.容器(container)</h4><p><code>容器</code> 是一种把多个元素组织在一起的数据结构，<code>容器</code> 中的元素可通过迭代逐个获取，用 <code>in</code>, <code>not in</code> 关键字可以判断元素是否在 <code>容器</code> 中。</p>
<p><code>序列</code> 是指一块可存放多个值的连续内存空间，这些值的排列有一定的顺序（有序），其中的每个值可以通过所在位置的编号（索引）来访问和获取。</p>
<p>Python 中，特殊的 <code>容器</code> 在 <code>collections</code> 中可以找到，通常，序列、字典、迭代器都可作为 <code>容器</code>。</p>
<p>常见的 <code>容器</code> 对象有：</p>
<ul>
<li>字符串(str)</li>
<li>列表(list), 双端队列(deque), …</li>
<li>元组(tuple), 命名元组(namedtuple), …</li>
<li>集合(set), 固定集合(frozenset), …</li>
<li>字典(dict), 有序字典(OrderedDict), …</li>
</ul>
<blockquote>
<p>参考：<a href="https://docs.python.org/zh-cn/3/library/collections.html" target="_blank" rel="noopener">官方文档</a></p>
</blockquote>
<h4 id="10-2-可迭代对象-iterable"><a href="#10-2-可迭代对象-iterable" class="headerlink" title="10.2.可迭代对象(iterable)"></a>10.2.可迭代对象(iterable)</h4><p>使用 <code>iter()</code> 内置函数可以返回一个迭代器的对象，就是 <code>可迭代对象</code> 。即凡是可以返回一个迭代器的对象都可称之为 <code>可迭代对象</code>，可见: <code>可迭代对象</code> 包含 <code>迭代器</code>。</p>
<img src="/archives/65842ce6/iterable&iterator.png" class>

<p><code>可迭代对象</code> 的实现:</p>
<ul>
<li>实现了能返回迭代器的 <code>__iter__</code> 方法；</li>
<li>没有实现 <code>__iter__</code> 方法，但实现了 <code>__getitem__</code> 方法而且其参数是从零开始的索引。</li>
</ul>
<p>例：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">IterA</span><span class="params">(object)</span>:</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, n)</span>:</span></span><br><span class="line">        self.n = n</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__iter__</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> IterB(self.n)   <span class="comment"># 返回一个迭代器</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">IterB</span><span class="params">(object)</span>:</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, n)</span>:</span></span><br><span class="line">        self.count = <span class="number">0</span></span><br><span class="line">        self.n = n  <span class="comment"># 上限</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__iter__</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> self</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__next__</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">if</span> self.count &lt;= self.n:</span><br><span class="line">            num = self.count</span><br><span class="line">            self.count += <span class="number">1</span></span><br><span class="line">            <span class="keyword">return</span> num</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">raise</span> StopIteration()</span><br></pre></td></tr></table></figure>

<h4 id="10-3-迭代器-iterator"><a href="#10-3-迭代器-iterator" class="headerlink" title="10.3.迭代器(iterator)"></a>10.3.迭代器(iterator)</h4><p><code>迭代器</code> 是一个可以记住遍历的位置的对象。<br><code>迭代器</code> 对象从集合的第一个元素开始访问，直到所有的元素被访问完结束。<br><code>迭代器</code> 只能往前不会后退。</p>
<p><code>迭代器</code> 有两个基本的方法：<code>iter()</code> 和 <code>next()</code>。<br>将一个类作为一个 <code>迭代器</code> 使用，需要在类中实现两个方法： <code>__iter__()</code> 与 <code>__next__()</code> 。</p>
<p><code>__iter__()</code> 方法返回一个特殊的<code>迭代器</code> 对象，<code>__next__()</code> 方法（Python2 里是 <code>next()</code>）会返回下一个可用元素。</p>
<p>例：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Counter</span><span class="params">(object)</span>:</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__iter__</span><span class="params">(self)</span>:</span></span><br><span class="line">      self.count = <span class="number">1</span></span><br><span class="line">      <span class="keyword">return</span> self</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__next__</span><span class="params">(self)</span>:</span></span><br><span class="line">      num = self.count</span><br><span class="line">      self.count += <span class="number">1</span></span><br><span class="line">      <span class="keyword">return</span> num</span><br><span class="line"></span><br><span class="line">mycounter = Counter()</span><br><span class="line">myiter = iter(mycounter)</span><br><span class="line"></span><br><span class="line">print(next(myiter))</span><br></pre></td></tr></table></figure>

<h4 id="10-4-生成器-generator"><a href="#10-4-生成器-generator" class="headerlink" title="10.4.生成器(generator)"></a>10.4.生成器(generator)</h4><p>在 Python 中，使用了 <code>yield</code> 的函数被称为 <code>生成器</code>（generator）。</p>
<p><code>生成器</code> 是一个返回迭代器的函数，只能用于迭代操作。</p>
<p>可以简单理解：在 python 中，<code>生成器</code> 就是一个迭代器。</p>
<p>例：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">fibs</span><span class="params">(n)</span>:</span>  <span class="comment"># 生成器函数 - 斐波那契</span></span><br><span class="line">    a, b, counter = <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span></span><br><span class="line">    <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">        <span class="keyword">if</span> (counter &gt; n):</span><br><span class="line">            <span class="keyword">return</span></span><br><span class="line">        <span class="keyword">yield</span> a</span><br><span class="line">        a, b = b, a + b</span><br><span class="line">        counter += <span class="number">1</span></span><br><span class="line">f = fibs(<span class="number">10</span>)  <span class="comment"># f 是一个迭代器，由生成器返回生成</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        <span class="keyword">print</span> (next(f), end=<span class="string">" "</span>)</span><br><span class="line">    <span class="keyword">except</span> StopIteration:</span><br><span class="line">        sys.exit()</span><br></pre></td></tr></table></figure>

<blockquote>
<p>参考：<a href="https://www.runoob.com/python3/python3-iterator-generator.html" target="_blank" rel="noopener">菜鸟教程</a></p>
</blockquote>
<h3 id="11-浅拷贝和深拷贝"><a href="#11-浅拷贝和深拷贝" class="headerlink" title="11.浅拷贝和深拷贝"></a>11.浅拷贝和深拷贝</h3><ul>
<li>直接赋值：其实就是对象的（别名）引用（内存地址）的传递。</li>
<li>浅拷贝(copy)：拷贝父对象，不会拷贝对象的内部的子对象，依然使用原始的引用。</li>
<li>深拷贝(deepcopy)： copy 模块的 deepcopy 方法，完全拷贝了父对象及其子对象（完全独立的对象，新的引用）。</li>
</ul>
<img src="/archives/65842ce6/deep_copy.png" class>

<h3 id="12-常见的高阶函数"><a href="#12-常见的高阶函数" class="headerlink" title="12.常见的高阶函数"></a>12.常见的高阶函数</h3><p>变量可以指向函数，函数的参数能接收变量。<br>如果一个函数能够接收另一个函数作为参数，那么这种函数就称为高阶函数。</p>
<p>在 Python 中，常用的高阶函数有：<code>filter()</code> 、<code>sorted()</code> 、<code>reduce()</code> 、<code>map()</code>。</p>
<h4 id="12-1-匿名函数（lambda）"><a href="#12-1-匿名函数（lambda）" class="headerlink" title="12.1.匿名函数（lambda）"></a>12.1.匿名函数（<code>lambda</code>）</h4><p>匿名函数没有名字，只是一个表达式，其返回值就是该表达式的结果。</p>
<p>匿名函数也是一个函数对象，可以通过赋值给一个变量来调用，非常简洁方便。</p>
<p>通常将其与高阶函数一起使用。</p>
<p>匿名函数的好处：</p>
<ul>
<li>匿名函数没有名字，可以避免函数名冲突</li>
<li>代码简洁，不增加额外变量</li>
</ul>
<p>例：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">func = <span class="keyword">lambda</span> x,y: x * y</span><br><span class="line"></span><br><span class="line"><span class="comment"># 等价于</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">func</span><span class="params">(x, y)</span>:</span></span><br><span class="line">    <span class="keyword">return</span> x * y</span><br><span class="line"></span><br><span class="line"><span class="comment"># 使用</span></span><br><span class="line">res = func(<span class="number">10</span>, <span class="number">20</span>)  <span class="comment"># 200</span></span><br></pre></td></tr></table></figure>

<h4 id="12-2-filter-函数"><a href="#12-2-filter-函数" class="headerlink" title="12.2.filter() 函数"></a>12.2.<code>filter()</code> 函数</h4><p><code>filter()</code> 函数的作用是过滤元素，入参接收一个函数和一个序列。</p>
<p>语法：</p>
<ul>
<li><code>filter(func, seq)</code></li>
</ul>
<p>参数：</p>
<ul>
<li><code>func</code>：一个函数，用来设置判断条件，返回<code>True</code> 或 <code>False</code>，也可以为<code>none</code>，若 <code>func</code> 为 <code>none</code>，<code>filter()</code>将返回序列中为<code>True</code>的元素组成的<code>filter</code> 对象。</li>
<li><code>seq</code>：一个序列</li>
</ul>
<p>返回值：过滤<code>func</code>返回值为<code>True</code>的元素组成的 <code>filter</code> 对象。</p>
<p>例：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">filter_test</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="string">"""高阶函数：filter()"""</span></span><br><span class="line">    seq = range(<span class="number">0</span>, <span class="number">25</span>, <span class="number">3</span>)</span><br><span class="line">    res = filter(<span class="keyword">lambda</span> x: x % <span class="number">2</span> == <span class="number">0</span>, seq)</span><br><span class="line">    <span class="keyword">return</span> list(res)  <span class="comment"># [0, 6, 12, 18, 24]</span></span><br></pre></td></tr></table></figure>

<h4 id="12-3-sorted-函数"><a href="#12-3-sorted-函数" class="headerlink" title="12.3.sorted() 函数"></a>12.3.<code>sorted()</code> 函数</h4><p><code>sorted()</code> 函数默认将序列升序排列后，返回一个新的 <code>list</code>，可以自定义<code>key</code>来进行排序，也可以通过 <code>reverse</code> 参数设置来指定升/降序， <code>reverse=True</code> 时为降序。</p>
<p>语法：</p>
<ul>
<li><code>sorted(iterable, key, reverse)</code></li>
</ul>
<p>参数：</p>
<ul>
<li><code>iterable</code>：可迭代对象</li>
<li><code>key</code>：排序关键字</li>
<li><code>reverse</code>：升降序(<code>bool</code>值)</li>
</ul>
<p>返回值：一个排序后的新列表</p>
<p>例：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">sorted_test</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="string">"""高阶函数：sorted()"""</span></span><br><span class="line">    seq = range(<span class="number">0</span>, <span class="number">25</span>, <span class="number">3</span>)</span><br><span class="line">    <span class="keyword">return</span> sorted(seq, reverse=<span class="literal">True</span>)  <span class="comment"># [24, 21, 18, 15, 12, 9, 6, 3, 0]</span></span><br></pre></td></tr></table></figure>

<p>除了<code>sorted()</code> 函数外，Python 中，<code>sort()</code>函数也具有排序的功能。</p>
<p>语法：</p>
<ul>
<li><code>sort(key=None, reverse=False)</code></li>
</ul>
<p>其区别在于：</p>
<ul>
<li><code>sort()</code>函数是在<strong>原列表</strong>上进行元素的排序，不会生成新的列表</li>
<li><code>sort()</code>函数是列表的操作方法，其他 <code>iterable</code> 无法使用</li>
</ul>
<h4 id="12-4-reduce-函数"><a href="#12-4-reduce-函数" class="headerlink" title="12.4.reduce() 函数"></a>12.4.<code>reduce()</code> 函数</h4><p><code>reduce()</code> 函数接收一个函数和一个序列以及一个初始化参数，其作用相当于累计计算。</p>
<p>语法：</p>
<ul>
<li><code>reduce(function, sequence, initial=None)</code></li>
</ul>
<p>参数：</p>
<ul>
<li><code>function</code>：一个函数</li>
<li><code>sequence</code>：序列</li>
<li><code>initial</code>：初始化值</li>
</ul>
<p>返回值：累计结果</p>
<p>例：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> functools <span class="keyword">import</span> reduce</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">reduce_test</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="string">"""高阶函数：reduce()"""</span></span><br><span class="line">    seq = range(<span class="number">0</span>, <span class="number">10</span>, <span class="number">2</span>)</span><br><span class="line">    <span class="keyword">return</span> reduce(<span class="keyword">lambda</span> x, y: x + y, seq, <span class="number">10</span>)  <span class="comment"># 30</span></span><br></pre></td></tr></table></figure>

<h4 id="12-5-map-函数"><a href="#12-5-map-函数" class="headerlink" title="12.5.map() 函数"></a>12.5.<code>map()</code> 函数</h4><p><code>map()</code> 函数接收一个函数和多个可迭代对象，其作用是分别逐个提取这些<code>iterable</code>的同位元素，作为函数参数进行处理，即传入函数循环提取后面每个<code>iterable</code>同位元素，处理后返回结果，其结果个数以最小<code>iterable</code>计。</p>
<p>语法：</p>
<ul>
<li><code>map(func, *iterables)</code></li>
</ul>
<p>参数：</p>
<ul>
<li><code>func</code>: 一个函数，接收可迭代对象内的同位元素。</li>
<li><code>*iterables</code>: 可迭代对象，可以是多个（<code>func</code>函数接收参数也相应增加）。</li>
</ul>
<p>返回值：一个<code>map</code>对象，存储了<code>func</code>函数对<code>*iterables</code>的处理结果。</p>
<p>例：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">map_test</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="string">"""高阶函数：map()"""</span></span><br><span class="line">    seq = range(<span class="number">0</span>, <span class="number">25</span>, <span class="number">3</span>)</span><br><span class="line">    t = &#123;<span class="number">1</span>, <span class="number">11</span>, <span class="number">21</span>&#125;</span><br><span class="line">    lst = [<span class="number">6</span>] * <span class="number">6</span></span><br><span class="line">    res = map(<span class="keyword">lambda</span> x, y, z: x + y + z, t, seq, lst)</span><br><span class="line">    <span class="keyword">return</span> list(res)  <span class="comment"># [7, 20, 33]</span></span><br></pre></td></tr></table></figure>

<h3 id="13-多任务和-GIL"><a href="#13-多任务和-GIL" class="headerlink" title="13.多任务和 GIL"></a>13.多任务和 <code>GIL</code></h3><p><strong>多任务</strong>：指的是操作系统同时运行多个任务。<br>多任务编程的目的就是通过应用程序利用多个计算机核心达到多任务同时执行的目的，以此来提升程序执行效率。</p>
<p>多任务的处理方式通常为：多进程、多线程、进程池、线程池。</p>
<p>Python 有一个名为 <code>Global Interpreter Lock（GIL）</code>的全局解释器锁。<br><code>GIL</code> 确保每次只能执行一个 “线程”。一个线程获取 <code>GIL</code> 执行相关操作，然后将 <code>GIL</code> 传递到下一个线程。<br>虽然看起来程序被多线程并行执行，但它们实际上只是轮流使用相同的 <code>CPU</code> 核心。<br>所有这些 <code>GIL</code> 传递都增加了执行的开销。这意味着多线程并不能让程序运行的更快。</p>
<h4 id="13-1-多进程"><a href="#13-1-多进程" class="headerlink" title="13.1.多进程"></a>13.1.多进程</h4><p><strong>进程</strong>：程序在一个数据集上的一次动态执行过程进程是一个动态的过程，占有 CPU 资源，有一定的生命周期。</p>
<p><strong>程序</strong>：是一个静态的描述，不占有计算机资源。</p>
<p><strong>多进程</strong>：在 Python 中，有一个多进程库（<code>multiprocessing</code>）。</p>
<ol>
<li>优点：</li>
</ol>
<ul>
<li>并行多个任务，提高运行效率</li>
<li>空间独立，数据安全，创建方便</li>
</ul>
<ol start="2">
<li>缺点：</li>
</ol>
<ul>
<li>进程创建销毁的过程中消耗较多的计算机资源</li>
</ul>
<p>进程间通信: 管道（Pipe）、消息队列（Queue）、共享内存、信号（signal）、信号量（Semaphore）、套接字（Socket）。</p>
<table>
<thead>
<tr>
<th align="center">比较项</th>
<th align="center">管道</th>
<th align="center">消息队列</th>
<th align="center">共享内存</th>
</tr>
</thead>
<tbody><tr>
<td align="center">开辟空间</td>
<td align="center">内存</td>
<td align="center">内存</td>
<td align="center">内存</td>
</tr>
<tr>
<td align="center">读写方式</td>
<td align="center">双向/单向</td>
<td align="center">先进先出</td>
<td align="center">操作覆盖内存</td>
</tr>
<tr>
<td align="center">效率</td>
<td align="center">一般</td>
<td align="center">一般</td>
<td align="center">快</td>
</tr>
<tr>
<td align="center">应用</td>
<td align="center">多用于亲缘进程</td>
<td align="center">方便灵活、广泛</td>
<td align="center">较复杂</td>
</tr>
<tr>
<td align="center">是否需要互斥机制</td>
<td align="center">否</td>
<td align="center">否</td>
<td align="center">需要</td>
</tr>
</tbody></table>
<h4 id="13-2-多线程"><a href="#13-2-多线程" class="headerlink" title="13.2.多线程"></a>13.2.多线程</h4><p><strong>线程</strong>：操作系统中能够进行运算调度的最小单位。包含在进程之中，是进程中的实际运作单位。<br>线程又称为轻量级的进程，在创建和删除时消耗的计算机资源小。</p>
<p>在 Python 中，有一个多线程库（<code>Threading</code>），但是由于 <code>GIL</code> 锁的存在，用多线程来加速代码的效果并不是那么的好。</p>
<p>线程的通信：全局变量（需要加锁）、消息队列（Queue）、事件（event）、线程锁（Lock）、条件变量（condition）。</p>
<h3 id="14-PEP8-规范"><a href="#14-PEP8-规范" class="headerlink" title="14.PEP8 规范"></a>14.PEP8 规范</h3><p>PEP8 是 python 的一种编程规范，PEP 代表 Python Enhancement Proposal。它是一组规则，指定如何格式化 Python 代码以获得最大可读性。<br>这里简述其中几条规范：</p>
<ul>
<li>缩进：缩进使用 4 个空格</li>
<li>行字符限制：所有行限制的最大字符数为 79</li>
<li>导入语句：import 引入语句独占一行，引入顺序：标准库导入 -&gt; 相关第三方库导入 -&gt; 本地导入（推荐使用绝对路径导入）</li>
<li>命名：模块应该用简短全小写的名字，类名一般首字母大写，函数名应该小写，如果想提高可读性可以用下划线分隔。</li>
<li>注释：行注释为 <code>#</code> 加上一个空格开始每一行的注释，且与代码间隔 2 个空格以上；块注释缩进到其描述代码的相同级别，每一行相当于一个行注释；文档字符串一般在函数方法的代码之前。</li>
</ul>
<blockquote>
<p>编程规范可以大概了解一下，IDE 一般都集成了代码规范类的插件，可以格式化编写代码，如：pycharm、vscode 等等。</p>
</blockquote>
<blockquote>
<p>可参考：<a href="https://www.python.org/dev/peps/pep-0008/" target="_blank" rel="noopener">PEP8 官方文档</a></p>
</blockquote>
<hr>
]]></content>
      <categories>
        <category>编程</category>
        <category>Python</category>
      </categories>
      <tags>
        <tag>基础知识</tag>
      </tags>
  </entry>
  <entry>
    <title>web前端（三）：CSS布局之双飞翼、圣杯布局</title>
    <url>/archives/d533509a.html</url>
    <content><![CDATA[<blockquote>
<p>本文简单整理一下前端样式中的经典布局方式。</p>
</blockquote>
<a id="more"></a>

<h2 id="1-三栏布局"><a href="#1-三栏布局" class="headerlink" title="1.三栏布局"></a>1.三栏布局</h2><p>所谓的 ‘三栏布局’， 即：左右两栏固定宽度，中间部分自适应的布局方式。</p>
<h3 id="1-1-相同点"><a href="#1-1-相同点" class="headerlink" title="1.1.相同点"></a>1.1.相同点</h3><p>双飞翼与圣杯布局的相同点：</p>
<ul>
<li>都是浮动布局，在实现三栏布局；</li>
<li>左右两边加上负的margin值，使之与中间并排；</li>
<li>中间盒子优先渲染，两边的盒子框子固定不变，即使页面宽度变小，也不影响浏览。</li>
</ul>
<h3 id="1-2-不同点"><a href="#1-2-不同点" class="headerlink" title="1.2.不同点"></a>1.2.不同点</h3><ul>
<li>圣杯布局：通过父容器的内边距（padding）来实现各列的间隙；</li>
<li>双飞翼布局：通过新建的div的外边距（margin）隔离各列。</li>
</ul>
<h2 id="2-圣杯布局"><a href="#2-圣杯布局" class="headerlink" title="2.圣杯布局"></a>2.圣杯布局</h2><p><strong>实现方式</strong>：</p>
<ul>
<li>三者都设置向左浮动，脱离文档流，且设置 <code>position: relative;</code></li>
<li>设置 <code>main</code> 宽度为100%；</li>
<li>设置 负边距，<code>left</code> 设置负左边距为自身宽度，<code>right</code> 设置负右边距为自身宽度；</li>
<li><code>container</code> 设置 <code>padding: 0, rightWidth, 0, leftWidth;</code>，给左右两个子面板留出空间，同时 设置<code>overflow: hidden;</code></li>
</ul>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"container"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"main"</span>&gt;</span>middle<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"left"</span>&gt;</span>left<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"right"</span>&gt;</span>right<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="3-双飞翼布局"><a href="#3-双飞翼布局" class="headerlink" title="3.双飞翼布局"></a>3.双飞翼布局</h2><p><strong>实现方式</strong>：</p>
<ul>
<li>三者都设置向左浮动，脱离文档流；</li>
<li>设置 <code>main-wraper</code> 宽度为100%；</li>
<li>设置 负边距，<code>left</code> 设置 <code>margin-left: -100%</code>，<code>right</code> 设置 <code>margin-left:</code> 为负的自身宽度；</li>
<li><code>container</code> 设置 <code>margin: 0, rightWidth, 0, leftWidth;</code>，给左右两个子面板留出空间，同时 设置<code>overflow: hidden;</code></li>
</ul>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"container"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"main-wraper"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"main"</span>&gt;</span>middle<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"left"</span>&gt;</span>left<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"right"</span>&gt;</span>right<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>


<blockquote>
<p>参考：<a href="https://www.zhihu.com/question/21504052" target="_blank" rel="noopener">知乎</a>、<a href="https://juejin.im/post/5caf4043f265da039f0eff94" target="_blank" rel="noopener">掘金</a></p>
</blockquote>
<hr>
]]></content>
      <categories>
        <category>编程</category>
        <category>前端</category>
      </categories>
      <tags>
        <tag>CSS布局</tag>
        <tag>圣杯布局</tag>
        <tag>双飞翼布局</tag>
      </tags>
  </entry>
  <entry>
    <title>web前端（二）：HTML标签常用属性和CSS样式</title>
    <url>/archives/9d4c0047.html</url>
    <content><![CDATA[<blockquote>
<p>本文主要记录一下HTML标签的常用属性和CSS样式。</p>
</blockquote>
<a id="more"></a>

<h2 id="1-一些特殊标签"><a href="#1-一些特殊标签" class="headerlink" title="1.一些特殊标签"></a>1.一些特殊标签</h2><table>
<thead>
<tr>
<th>标签</th>
<th>描述</th>
</tr>
</thead>
<tbody><tr>
<td><code>&lt;b&gt;</code></td>
<td>粗体字</td>
</tr>
<tr>
<td><code>&lt;strong&gt;</code></td>
<td>粗体字，强调</td>
</tr>
<tr>
<td><code>&lt;i&gt;</code></td>
<td>斜体字</td>
</tr>
<tr>
<td><code>&lt;em&gt;</code></td>
<td>斜体字，强调</td>
</tr>
<tr>
<td><code>&lt;dfn&gt;</code></td>
<td>斜体定义</td>
</tr>
<tr>
<td><code>&lt;u&gt;</code></td>
<td>底线</td>
</tr>
<tr>
<td><code>&lt;ins&gt;</code></td>
<td>底线，插入文字</td>
</tr>
<tr>
<td><code>&lt;strike&gt;</code></td>
<td>横线</td>
</tr>
<tr>
<td><code>&lt;s&gt;</code>、<code>&lt;del&gt;</code></td>
<td>删除线</td>
</tr>
<tr>
<td><code>&lt;kbd&gt;</code></td>
<td>键盘文字</td>
</tr>
<tr>
<td><code>&lt;tt&gt;</code></td>
<td>打字体，H5不支持</td>
</tr>
<tr>
<td><code>&lt;xmp&gt;</code></td>
<td>固定宽度的字体，在文件中空白，换行</td>
</tr>
<tr>
<td><code>&lt;pre&gt;</code></td>
<td>预格式化</td>
</tr>
<tr>
<td><code>&lt;code&gt;</code></td>
<td>源代码</td>
</tr>
<tr>
<td>…</td>
<td>…</td>
</tr>
</tbody></table>
<h2 id="2-常用属性及样式"><a href="#2-常用属性及样式" class="headerlink" title="2.常用属性及样式"></a>2.常用属性及样式</h2><h3 id="2-1-背景、颜色"><a href="#2-1-背景、颜色" class="headerlink" title="2.1. 背景、颜色"></a>2.1. 背景、颜色</h3><ul>
<li>background：背景</li>
<li>color：颜色，可用颜色名称、16进制、rgb元组表示</li>
<li>opacity：透明度，也可用rgba()的第四参数指定，filter可添加可视效果</li>
</ul>
<h3 id="2-2-形状边界"><a href="#2-2-形状边界" class="headerlink" title="2.2. 形状边界"></a>2.2. 形状边界</h3><ul>
<li>width/height：宽/高，同时有最大/小值、比例等设置</li>
<li>border-radius：圆角</li>
<li>border-shadow：添加阴影</li>
<li>border-image：边界图片，不支持IE</li>
<li>resize：调整尺寸，由用户调整，IE不兼容，e.g.：resize:both;…</li>
<li>box-sizing：方框大小调整，以确切方式定义适应某区域具体内容</li>
<li>outline-offset：对轮廓进行偏移，并在超出边缘的位置绘制轮廓</li>
</ul>
<h3 id="2-3-位置排布"><a href="#2-3-位置排布" class="headerlink" title="2.3. 位置排布"></a>2.3. 位置排布</h3><ul>
<li>top/right/bottom/left：上/右/下/左</li>
<li>position：位置布局，relative - 相对、absolute - 绝对</li>
<li>float：浮动</li>
<li>display：显示样式，如：none、block、inline、inherit、flex …</li>
<li>align/text-align/vertical-align：位置显示设置</li>
<li>margin/padding：外/内 边距</li>
<li>transform：元素空间位置变换</li>
</ul>
<h3 id="2-4-文本效果"><a href="#2-4-文本效果" class="headerlink" title="2.4. 文本效果"></a>2.4. 文本效果</h3><ul>
<li>@font-face规则：可通过font-family指定字体类型，src指定字体url，font-weight指定字体粗细等等</li>
<li>text-shadow：文本阴影</li>
<li>box-shadow：盒子阴影</li>
<li>text-overflow：定义如何显示溢出内容</li>
<li>word-wrap：允许文本换行</li>
<li>word-break：单词拆分换行属性，指定换行规则</li>
</ul>
<h3 id="2-5-2-3D转换"><a href="#2-5-2-3D转换" class="headerlink" title="2.5. 2/3D转换"></a>2.5. 2/3D转换</h3><ul>
<li><p>2D：</p>
<ul>
<li>translate()方法：根据左（X）轴和顶（Y）轴位置参数，从当前位置移动</li>
<li>rotate()方法：对于给定参数的元素，顺/逆时针旋转</li>
<li>scale()方法：对给定参数（x,y）的元素增加或减少大小</li>
<li>skew()方法：（x,y）对应两轴的倾斜角</li>
<li>…</li>
</ul>
</li>
<li><p>3D:</p>
<ul>
<li>matrix()方法：有六个参数，为合并方法，包含上述功能</li>
<li>rotateX()方法：围绕一个给定度数的X轴旋转元素</li>
<li>rotateY()方法：围绕一个给定度数的Y轴旋转元素</li>
<li>…</li>
</ul>
<hr>
</li>
</ul>
]]></content>
      <categories>
        <category>编程</category>
        <category>前端</category>
      </categories>
      <tags>
        <tag>HTML</tag>
        <tag>属性样式</tag>
      </tags>
  </entry>
  <entry>
    <title>web前端（五）：CSS布局之Grid网格布局</title>
    <url>/archives/2db465c1.html</url>
    <content><![CDATA[<blockquote>
<p>以下资料来源于网络。</p>
</blockquote>
<a id="more"></a>

<h2 id="1-简介"><a href="#1-简介" class="headerlink" title="1.简介"></a>1.简介</h2><p>CSS网格布局（又名“网格”）是一个二维的基于网格的布局系统，其目的只在于完全改变我们设计基于网格的用户界面的方式。</p>
<ul>
<li><p>Grid是第一个专门为解决布局问题而生的CSS模块</p>
</li>
<li><p>雷切尔·安德鲁（Rachel Andrew）的书<a href="http://abookapart.com/products/get-ready-for-css-grid-layout" target="_blank" rel="noopener">为CSS Grid布局准备</a>。 这本书对网格布局做了彻底、清晰的介绍，也是是整篇文章的基础。</p>
</li>
<li><p>Chris Coyier的<a href="https://css-tricks.com/snippets/css/a-guide-to-flexbox/" target="_blank" rel="noopener">Flexbox完全指南</a>。</p>
</li>
</ul>
<h2 id="2-常用术语"><a href="#2-常用术语" class="headerlink" title="2.常用术语"></a>2.常用术语</h2><p>在深入了解网格的概念之前，理解术语是很重要的。 由于这里所涉及的术语在概念上都是相似的，如果不先记住它们在网格规范中定义的含义，则很容易将它们彼此混淆。</p>
<h3 id="2-1-网格容器Grid-Container"><a href="#2-1-网格容器Grid-Container" class="headerlink" title="2.1. 网格容器Grid Container"></a>2.1. 网格容器<code>Grid Container</code></h3><p>设置了 <code>display: gird</code> 的元素。 这是所有 grid item 的直接父项。 在下面的例子中，<code>.container</code> 就是是 grid container。</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"container"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"item item-1"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"item item-2"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"item item-3"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>



<h3 id="2-2-网格项目Grid-Item"><a href="#2-2-网格项目Grid-Item" class="headerlink" title="2.2. 网格项目Grid Item"></a>2.2. 网格项目<code>Grid Item</code></h3><p>Grid 容器的孩子（直接子元素）。下面的 <code>.item</code> 元素就是 grid item，但 <code>.sub-item</code>不是</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"container"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"item"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span> </span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"item"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span> <span class="attr">class</span>=<span class="string">"sub-item"</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"item"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="2-3-网格线Grid-Line"><a href="#2-3-网格线Grid-Line" class="headerlink" title="2.3. 网格线Grid Line"></a>2.3. 网格线<code>Grid Line</code></h3><p>这个分界线组成网格结构。 它们既可以是垂直的（“column grid lines”），也可以是水平的（“row grid lines”），并位于行或列的任一侧。 下面例中的黄线就是一个列网格线</p>
<p><img src="/archives/2db465c1/grid_line.jpeg" alt="表格线"></p>
<h3 id="2-4-网格轨道Grid-Track"><a href="#2-4-网格轨道Grid-Track" class="headerlink" title="2.4. 网格轨道Grid Track"></a>2.4. 网格轨道<code>Grid Track</code></h3><p>两个相邻网格线之间的空间。 你可以把它们想象成网格的列或行。 下面是第二行和第三行网格线之间的网格轨道</p>
<p><img src="/archives/2db465c1/gird_track.jpeg" alt="网格轨道"></p>
<h3 id="2-5-网格单元Grid-Cell"><a href="#2-5-网格单元Grid-Cell" class="headerlink" title="2.5. 网格单元Grid Cell"></a>2.5. 网格单元<code>Grid Cell</code></h3><p>两个相邻的行和两个相邻的列网格线之间的空间。它是网格的一个“单元”。 下面是行网格线1和2之间以及列网格线2和3的网格单元。</p>
<p><img src="/archives/2db465c1/grid_cell.jpeg" alt="网格单元"></p>
<h3 id="2-6-网格区域Grid-Area"><a href="#2-6-网格区域Grid-Area" class="headerlink" title="2.6. 网格区域Grid Area"></a>2.6. 网格区域<code>Grid Area</code></h3><p>四个网格线包围的总空间。 网格区域可以由任意数量的网格单元组成。 下面是行网格线1和3以及列网格线1和3之间的网格区域</p>
<p><img src="/archives/2db465c1/grid-area.jpeg" alt="网格区域"></p>
<h2 id="3-Grid容器属性"><a href="#3-Grid容器属性" class="headerlink" title="3.Grid容器属性"></a>3.Grid容器属性</h2><p><strong>Grid Container 的全部属性</strong></p>
<ul>
<li><font color="blue">display</font>: 显示样式选择，如：grid | inline-grid | subgrid;<ul>
<li><strong><code>grid</code></strong>:  生成一个块级(block-level)网格</li>
<li><strong><code>inline-grid</code></strong>:  生成一个行级(inline-level)网格</li>
<li><strong><code>subgrid</code></strong>:  如果你的 grid container 本身就是一个 grid item（即,嵌套网格），你可以使用这个属性来表示你想从它的父节点获取它的行/列的大小，而不是指定它自己的大小。</li>
</ul>
</li>
<li><font color="blue">grid-template-columns</font>：以空格分隔的多个值来定义网格的列。这些值表示轨道大小(track size)，它们之间的空格代表表格线(grid line)；</li>
<li><font color="blue">grid-template-rows</font>：以空格分隔的多个值来定义网格的行。这些值表示轨道大小(track size)，它们之间的空格代表表格线(grid line)；</li>
<li><font color="blue">grid-template-areas</font>：指定的网格区域的名称来定义网格模板（网格区域的名称）；<ul>
<li><strong><code>&lt;grid-area-name&gt;</code></strong> – 使用 grid-area 属性设置的网格区域的名称</li>
<li><strong><code>.</code></strong> – 点号代表一个空网格单元</li>
<li><strong>none</strong> – 没有定义网格区域</li>
</ul>
</li>
<li><font color="blue">grid-template</font>：在单个声明中定义 grid-template-rows、grid-template-columns、grid-template-areas 的简写；<ul>
<li><strong>none</strong> – 将三个属性都设置为其初始值</li>
<li><strong>subgrid</strong> – 把 grid-template-rows 和 grid-template-columns 设置为 subgrid, 并且 grid-template-areas 设置为初始值</li>
<li><strong><code>grid-template-rows</code> / <code>&lt;grid-template-columns</code></strong> – 把 grid-template-columns 和 grid-template-rows 设置为指定值, 与此同时, 设置 grid-template-areas 为 none</li>
</ul>
</li>
<li><font color="blue">grid-column-gap</font>：网格线的大小，即设置列之间的间距的宽度；</li>
<li><font color="blue">grid-row-gap</font>：网格线的大小，即设置行之间的间距的宽度；</li>
<li><font color="blue">grid-gap</font>：grid-row-gap 和 grid-column-gap 的缩写；</li>
<li><font color="blue">justify-items</font>：沿着行轴对齐网格内的内容，该值适用于容器内的所有的 grid items，如：start | end | center | stretch；<ul>
<li><strong>start</strong>: 内容与网格区域的左端对齐</li>
<li><strong>end</strong>: 内容与网格区域的右端对齐</li>
<li><strong>center</strong>: 内容位于网格区域的中间位置</li>
<li><strong>stretch</strong>: 内容宽度占据整个网格区域空间(这是默认值)</li>
</ul>
</li>
<li><font color="blue">align-items</font>：沿着列轴对齐网格内的内容，该值适用于容器内的所有的 grid items；<ul>
<li><strong>start</strong>: 内容与网格区域的顶端对齐</li>
<li><strong>end</strong>: 内容与网格区域的底部对齐</li>
<li><strong>center</strong>: 内容位于网格区域的垂直中心位置</li>
<li><strong>stretch</strong>: 内容高度占据整个网格区域空间(这是默认值)</li>
</ul>
</li>
<li><font color="blue">justify-content</font>：沿着行轴对齐网格，设置网格容器内的网格的对齐方式；<ul>
<li><strong>start</strong> – 网格与网格容器的左边对齐</li>
<li><strong>end</strong> – 网格与网格容器的右边对齐</li>
<li><strong>center</strong> – 网格与网格容器的中间对齐</li>
<li><strong>stretch</strong> – 调整g rid item 的大小，让宽度填充整个网格容器</li>
<li><strong>space-around</strong> – 在 grid item 之间设置均等宽度的空白间隙，其外边缘间隙大小为中间空白间隙宽度的一半</li>
<li><strong>space-between</strong> – 在 grid item 之间设置均等宽度空白间隙，其外边缘无间隙</li>
<li><strong>space-evenly</strong> – 在每个 grid item 之间设置均等宽度的空白间隙，包括外边缘</li>
</ul>
</li>
<li><font color="blue">align-content</font>：沿着列轴对齐网格，设置网格容器内的网格的对齐方式；<ul>
<li><strong>start</strong> – 网格与网格容器的顶部对齐</li>
<li><strong>end</strong> – 网格与网格容器的底部对齐</li>
<li><strong>center</strong> – 网格与网格容器的中间对齐</li>
<li><strong>stretch</strong> – 调整 grid item 的大小，让高度填充整个网格容器</li>
<li><strong>space-around</strong> – 在 grid item 之间设置均等宽度的空白间隙，其外边缘间隙大小为中间空白间隙宽度的一半</li>
<li><strong>space-between</strong> – 在 grid item 之间设置均等宽度空白间隙，其外边缘无间隙</li>
<li><strong>space-evenly</strong> – 在每个 grid item 之间设置均等宽度的空白间隙，包括外边缘</li>
</ul>
</li>
<li><font color="blue">grid-auto-columns</font>：指定自动生成的网格轨道（又名隐式网格轨道）的大小，隐式网格轨道在你显式的定位超出指定网格范围的行或列（使用 grid-template-rows/grid-template-columns）时被创建；</li>
<li><font color="blue">grid-auto-rows</font>：指定自动生成的网格轨道（又名隐式网格轨道）的大小，隐式网格轨道在你显式的定位超出指定网格范围的行或列（使用 grid-template-rows/grid-template-columns）时被创建；</li>
<li><font color="blue">grid-auto-flow</font>：如果你存在没有显示指明放置在网格上的 grid item，则自动放置算法会自动放置这些项目；<ul>
<li><strong>row</strong> – 告诉自动布局算法依次填充每行，根据需要添加新行</li>
<li><strong>column</strong> – 告诉自动布局算法依次填充每列，根据需要添加新列</li>
<li><strong>dense</strong> – 告诉自动布局算法，如果后面出现较小的 grid item，则尝试在网格中填充空洞</li>
</ul>
</li>
<li><font color="blue">grid</font>：设置所有以下属性的简写：grid-template-rows，grid-template-columns，grid-template-areas，grid-auto-rows，grid-auto-columns和grid-auto-flow。 它同时也将 sets grid-column-gap 和 grid-row-gap 设置为它们的初始值；</li>
</ul>
<h2 id="4-Grid项目属性"><a href="#4-Grid项目属性" class="headerlink" title="4.Grid项目属性"></a>4.Grid项目属性</h2><p><strong>Grid Items 的全部属性</strong></p>
<ul>
<li><font color="blue">grid-column-start</font>：表示 <code>grid item</code> 的网格线的列起始位置；</li>
<li><font color="blue">grid-column-end</font>：表示 <code>grid item</code> 的网格线的列终止位置；</li>
<li><font color="blue">grid-row-start</font>：表示 <code>grid item</code> 的网格线的行起始位置；</li>
<li><font color="blue">grid-row-end</font>：表示 <code>grid item</code> 的网格线的行终止位置；<ul>
<li><strong><code>&lt;line&gt;</code></strong>: 可以是一个数字来指代相应编号的网格线，也可使用名称指代相应命名的网格线</li>
<li><strong><code>span &lt;number&gt;</code></strong>: 网格项将跨越指定数量的网格轨道</li>
<li><strong><code>span &lt;name&gt;</code></strong>: 网格项将跨越一些轨道，直到碰到指定命名的网格线</li>
<li><strong>auto</strong>: 自动布局， 或者自动跨越， 或者跨越一个默认的轨道</li>
</ul>
</li>
</ul>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.item</span> &#123;</span><br><span class="line">  <span class="attribute">grid-column-start</span>: &lt;number&gt; | &lt;name&gt; | span &lt;number&gt; | span &lt;name&gt; | auto</span><br><span class="line">  grid-column-end: &lt;number&gt; | &lt;name&gt; | span &lt;number&gt; | span &lt;name&gt; | auto</span><br><span class="line">  grid-row-start: &lt;number&gt; | &lt;name&gt; | span &lt;number&gt; | span &lt;name&gt; | auto</span><br><span class="line">  grid-row-end: &lt;number&gt; | &lt;name&gt; | span &lt;number&gt; | span &lt;name&gt; | auto</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ul>
<li><font color="blue">grid-column</font>：<code>grid-column-start</code> + <code>grid-column-end</code> 的简写形式；</li>
<li><font color="blue">grid-row</font>：<code>grid-row-start</code> + <code>grid-row-end</code> 的简写形式；<ul>
<li><strong><code>&lt;start-line&gt;</code> / <code>&lt;end-line&gt;</code></strong> – 每个值的用法都和属性分开写时的用法一样</li>
</ul>
</li>
</ul>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.item</span> &#123;</span><br><span class="line">  <span class="attribute">grid-column</span>: &lt;start-line&gt; / &lt;end-line&gt; | &lt;start-line&gt; / span &lt;value&gt;;</span><br><span class="line">  <span class="attribute">grid-row</span>: &lt;start-line&gt; / &lt;end-line&gt; | &lt;start-line&gt; / span &lt;value&gt;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ul>
<li><font color="blue">grid-area</font>：给 <code>grid item</code> 进行命名以便于使用 <code>grid-template-areas</code> 属性创建模板时来进行引用，也可以做为 <code>grid-row-start</code> + <code>grid-column-start</code> + <code>grid-row-end</code> + <code>grid-column-end</code> 的简写形式；<ul>
<li><strong><code>&lt;name&gt;</code></strong> – 你的命名</li>
<li><strong><code>&lt;row-start&gt;</code> / <code>&lt;column-start&gt;</code> / <code>&lt;row-end&gt;</code> / <code>&lt;column-end&gt;</code></strong> – 可以是数字，也可以是网格线的名字</li>
</ul>
</li>
</ul>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.item</span> &#123;</span><br><span class="line">  <span class="attribute">grid-area</span>: &lt;name&gt; | &lt;row-start&gt; / &lt;column-start&gt; / &lt;row-end&gt; / &lt;column-end&gt;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ul>
<li><font color="blue">justify-self</font>：沿着行轴对齐 <code>grid item</code> 里的内容，此属性对单个网格项内的内容生效；<ul>
<li><strong>start</strong> – 将内容对齐到网格区域的左端</li>
<li><strong>end</strong> – 将内容对齐到网格区域的右端</li>
<li><strong>center</strong> – 将内容对齐到网格区域的中间</li>
<li><strong>stretch</strong> – 填充网格区域的宽度 (这是默认值)</li>
</ul>
</li>
<li><font color="blue">align-self</font>：沿列轴对齐 <code>grid item</code> 里的内容，此属性对单个网格项内的内容生效；<ul>
<li><strong>start</strong> – 将内容对齐到网格区域的左端</li>
<li><strong>end</strong> – 将内容对齐到网格区域的右端</li>
<li><strong>center</strong> – 将内容对齐到网格区域的中间</li>
<li><strong>stretch</strong> – 填充网格区域的宽度 (这是默认值)</li>
</ul>
</li>
</ul>
<h2 id="5-三列布局案例"><a href="#5-三列布局案例" class="headerlink" title="5.三列布局案例"></a>5.三列布局案例</h2><p><img src="/archives/2db465c1/layout1.jpg" alt="最终效果图"></p>
<h3 id="5-1-HTML结构"><a href="#5-1-HTML结构" class="headerlink" title="5.1. HTML结构"></a>5.1. HTML结构</h3><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">  	<span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">"stylesheet"</span> <span class="attr">href</span>=<span class="string">"style.css"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>简单的三列布局<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">header</span> <span class="attr">class</span>=<span class="string">"header"</span>&gt;</span>头部<span class="tag">&lt;/<span class="name">header</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">aside</span> <span class="attr">class</span>=<span class="string">"left"</span>&gt;</span>左边栏<span class="tag">&lt;/<span class="name">aside</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">main</span> <span class="attr">class</span>=<span class="string">"content"</span>&gt;</span>主体内容区<span class="tag">&lt;/<span class="name">main</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">aside</span> <span class="attr">class</span>=<span class="string">"right"</span>&gt;</span>右边栏<span class="tag">&lt;/<span class="name">aside</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">footer</span> <span class="attr">class</span>=<span class="string">"footer"</span>&gt;</span>底部<span class="tag">&lt;/<span class="name">footer</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="5-2-CSS代码"><a href="#5-2-CSS代码" class="headerlink" title="5.2. CSS代码"></a>5.2. CSS代码</h3><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* style.css */</span></span><br><span class="line"><span class="selector-tag">body</span> &#123;</span><br><span class="line">  <span class="comment">/*设置body元素采用网格布局*/</span></span><br><span class="line">  <span class="attribute">display</span>: grid;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/*行模板: 第一行60px,第二行750px, 第三行60px*/</span></span><br><span class="line">  <span class="attribute">grid-template-rows</span>: <span class="number">60px</span> <span class="number">750px</span> <span class="number">60px</span>;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/*列模板: 第一列200px,第2列自动扩展, 第3列200px*/</span></span><br><span class="line">  <span class="attribute">grid-template-columns</span>: <span class="number">200px</span> auto <span class="number">200px</span>;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/*设置行间距:10px*/</span></span><br><span class="line">  <span class="attribute">grid-row-gap</span>: <span class="number">10px</span>;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/*设置列间距: 10px*/</span></span><br><span class="line">  <span class="attribute">grid-column-gap</span>: <span class="number">10px</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.header</span> &#123;</span><br><span class="line">  <span class="comment">/*网格区域命名*/</span></span><br><span class="line">  <span class="attribute">grid-area</span>: my-header;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/*参考背景色*/</span></span><br><span class="line">  <span class="attribute">background-color</span>: lightgreen;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.footer</span> &#123;</span><br><span class="line">  <span class="comment">/*网格区域命名*/</span></span><br><span class="line">  <span class="attribute">grid-area</span>: my-footer;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/*参考背景色*/</span></span><br><span class="line">  <span class="attribute">background-color</span>: lightgreen;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.left</span> &#123;</span><br><span class="line">  <span class="comment">/*网格区域命名*/</span></span><br><span class="line">  <span class="attribute">grid-area</span>: my-left;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/*参考背景色*/</span></span><br><span class="line">  <span class="attribute">background-color</span>: lightblue;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.right</span> &#123;</span><br><span class="line">  <span class="comment">/*网格区域命名*/</span></span><br><span class="line">  <span class="attribute">grid-area</span>: my-right;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/*参考背景色*/</span></span><br><span class="line">  <span class="attribute">background-color</span>: lightblue;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.content</span> &#123;</span><br><span class="line">  <span class="comment">/*网格区域命名*/</span></span><br><span class="line">  <span class="attribute">grid-area</span>: my-content;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/*参考背景色*/</span></span><br><span class="line">  <span class="attribute">background-color</span>: coral;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/*设置网格区域: 非常直观*/</span></span><br><span class="line"><span class="selector-tag">body</span> &#123;</span><br><span class="line">  <span class="comment">/*网格区域名称相同, 意味着合并*/</span></span><br><span class="line">  <span class="attribute">grid-template-areas</span>:</span><br><span class="line">    <span class="string">"my-header  my-header   my-header"</span></span><br><span class="line">    <span class="string">"my-left    my-content    my-right"</span></span><br><span class="line">    <span class="string">"my-footer  my-footer   my-footer"</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<hr>
]]></content>
      <categories>
        <category>编程</category>
        <category>前端</category>
      </categories>
      <tags>
        <tag>css布局</tag>
        <tag>grid布局</tag>
      </tags>
  </entry>
  <entry>
    <title>web前端（八）：webpack的使用</title>
    <url>/archives/7c6cfabd.html</url>
    <content><![CDATA[<p><code>webpack</code> 是一款模块加载器兼打包工具，它能够把各种资源，例如js（含JSX）、样式（含less/sass）、图片等都作为模块来使用和处理。</p>
<a id="more"></a>

<h2 id="1-简介"><a href="#1-简介" class="headerlink" title="1.简介"></a>1.简介</h2><p><code>Webpack</code> 是一个模块打包器。根据模块的依赖关系进行静态分析，然后按照指定的规则将这些模块生成对应的静态资源。<br>相比于  <code>gulp</code>、<code>grunt</code> 等构件工具，<code>WebPack</code> 是一种模块化的解决方案，适合一些前后端分离项目的的场景，模块间依赖不强，<br>而 <code>gulp</code> 等工具侧重于资源压缩和自动化的构建，目前大型项目的开发，可以结合两者，协同工作。</p>
<p>这张官网图片，很好地展示了它的用途：</p>
<img src="/archives/7c6cfabd/webpack.jpg" class>

<h2 id="2-Webpack-的特点"><a href="#2-Webpack-的特点" class="headerlink" title="2.Webpack 的特点"></a>2.<code>Webpack</code> 的特点</h2><ul>
<li><p>代码拆分<br>Webpack 有两种组织模块依赖的方式，同步和异步。异步依赖作为分割点，形成一个新的块。在优化了依赖树后，每一个异步区块都作为一个文件被打包。</p>
</li>
<li><p>Loader<br>Webpack 本身只能处理原生的 JavaScript 模块，但是 loader 转换器可以将各种类型的资源转换成 JavaScript 模块。这样，任何资源都可以成为 Webpack 可以处理的模块。</p>
</li>
<li><p>智能解析<br>Webpack 有一个智能解析器，几乎可以处理任何第三方库，无论它们的模块形式是 CommonJS、 AMD 还是普通的 JS 文件。甚至在加载依赖的时候，允许使用动态表达式 require(“./templates/“ + name + “.jade”)。</p>
</li>
<li><p>插件系统<br>Webpack 还有一个功能丰富的插件系统。大多数内容功能都是基于这个插件系统运行的，还可以开发和使用开源的 Webpack 插件，来满足各式各样的需求。</p>
</li>
<li><p>快速运行<br>Webpack 使用异步 I/O 和多级缓存提高运行效率，这使得 Webpack 能够以令人难以置信的速度快速增量编译。</p>
</li>
</ul>
<blockquote>
<p>参考：<a href="https://www.w3cschool.cn/webpackguide/webpackguide-ewiz2775.html" target="_blank" rel="noopener">W3Cschool</a></p>
</blockquote>
<h2 id="3-安装使用"><a href="#3-安装使用" class="headerlink" title="3.安装使用"></a>3.安装使用</h2><h3 id="3-1-安装"><a href="#3-1-安装" class="headerlink" title="3.1.安装"></a>3.1.安装</h3><p>（1）、确保已安装 <code>Node.js</code> 环境，使用 <code>npm</code> 安装：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm install webpack -g</span><br></pre></td></tr></table></figure>

<p>（2）、在项目目录，进行初始化：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm init</span><br><span class="line"><span class="comment"># 此时会生成 package.json</span></span><br></pre></td></tr></table></figure>

<p>（3）、安装 <code>webpack</code> 依赖：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm install webpack --save-dev</span><br></pre></td></tr></table></figure>

<p>（4）、安装 <code>Webpack</code> 开发工具：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm install webpack-dev-server --save-dev</span><br></pre></td></tr></table></figure>

<h3 id="3-2-简单使用"><a href="#3-2-简单使用" class="headerlink" title="3.2.简单使用"></a>3.2.简单使用</h3><p>新建一个简单的项目 <code>hello-world</code>，目录结构如下：</p>
<img src="/archives/7c6cfabd/hello-world.png" class>

<p>（1）、<code>index.html</code> 内容如下：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">title</span>&gt;</span>Webpack test<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">align</span>=<span class="string">"center"</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">h2</span>&gt;</span><span class="tag">&lt;<span class="name">font</span> <span class="attr">color</span>=<span class="string">"blue"</span>&gt;</span>This is a test<span class="tag">&lt;/<span class="name">font</span>&gt;</span><span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">span</span>&gt;</span>Hello Webpack!<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">h6</span>&gt;</span>----------------------------------------<span class="tag">&lt;/<span class="name">h6</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">div</span>&gt;</span> </span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span> <span class="attr">src</span>=<span class="string">"bundle.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>（2）、<code>module.js</code> 和 <code>test.js</code> 内容如下：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// module.js</span></span><br><span class="line"><span class="built_in">module</span>.exports = <span class="string">'&lt;div align="center"&gt;&lt;h4&gt;It works from module.js.&lt;/h4&gt;&lt;/div&gt;'</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// test.js</span></span><br><span class="line"><span class="built_in">document</span>.write(<span class="built_in">require</span>(<span class="string">'./module.js'</span>)) <span class="comment">// 添加模块</span></span><br><span class="line"><span class="built_in">document</span>.write(<span class="string">'&lt;div align="center"&gt;&lt;h3&gt;webpack`s work is done.&lt;/h3&gt;&lt;/div&gt;'</span>)</span><br></pre></td></tr></table></figure>

<p>（3）、<code>package.json</code> 内容如下：</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">"name"</span>: <span class="string">"hello-world"</span>,</span><br><span class="line">  <span class="attr">"version"</span>: <span class="string">"1.0.0"</span>,</span><br><span class="line">  <span class="attr">"description"</span>: <span class="string">"webpack test"</span>,</span><br><span class="line">  <span class="attr">"main"</span>: <span class="string">"test.js"</span>,</span><br><span class="line">  <span class="attr">"scripts"</span>: &#123;</span><br><span class="line">    <span class="attr">"test"</span>: <span class="string">"echo \"Error: no test specified\" &amp;&amp; exit 1"</span>,</span><br><span class="line">    <span class="attr">"dev"</span>: <span class="string">"webpack test.js bundle.js"</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">"author"</span>: <span class="string">"Mr. Yao"</span>,</span><br><span class="line">  <span class="attr">"license"</span>: <span class="string">"ISC"</span>,</span><br><span class="line">  <span class="attr">"devDependencies"</span>: &#123;</span><br><span class="line">    <span class="attr">"webpack"</span>: <span class="string">"^4.42.1"</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">"dependencies"</span>: &#123;&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>（4）、新建 <code>webpack.config.js</code> 文件：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">  <span class="comment">// 入口文件</span></span><br><span class="line">  entry:  __dirname + <span class="string">"/test.js"</span>, <span class="comment">//</span></span><br><span class="line">  <span class="comment">// 输出文件</span></span><br><span class="line">  output: &#123;</span><br><span class="line">    path: __dirname + <span class="string">"/"</span>, </span><br><span class="line">    filename: <span class="string">"bundle.js"</span> <span class="comment">//打包后的输出文件名</span></span><br><span class="line">  &#125;,</span><br><span class="line">  mode: <span class="string">'development'</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>（5）、运行打包命令：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm run dev</span><br></pre></td></tr></table></figure>

<p>页面显示：</p>
<img src="/archives/7c6cfabd/result.png" class>

<h2 id="4-Webpack-核心"><a href="#4-Webpack-核心" class="headerlink" title="4.Webpack 核心"></a>4.<code>Webpack</code> 核心</h2><p><strong><font face="楷体" color="green">核心概念</font></strong>：</p>
<ul>
<li><font face="华文行楷" color="green">入口(entry)</font>：<font face="华文行楷">指示 webpack 应该使用哪个模块，以及模块和库是入口起点</font></li>
<li><font face="华文行楷" color="green">输出(output)</font>：<font face="华文行楷">告诉 webpack 在哪里输出它所创建的目标文件，以及如何命名。</font></li>
<li><font face="华文行楷" color="green">加载转换(loader)</font>：<font face="华文行楷">让 webpack 能够去处理其他类型的文件，并将它们转换为可识别的模块</font></li>
<li><font face="华文行楷" color="green">插件(plugin)</font>：<font face="华文行楷">用于执行范围更广的任务（扩展）。包括：打包优化，资源管理，注入环境变量。</font></li>
<li><font face="华文行楷" color="green">模式(mode)</font>：<font face="华文行楷">通过选择 development, production 或 none 之中的一个，来设置 mode 参数</font></li>
</ul>
<h3 id="4-1-常用-Loader"><a href="#4-1-常用-Loader" class="headerlink" title="4.1.常用 Loader"></a>4.1.常用 <code>Loader</code></h3><ol>
<li>样式： <code>css-loader</code>、<code>style-loader</code>、<code>less-loader</code>、<code>sass-loader</code>等</li>
</ol>
<ul>
<li><p><code>scss</code> 样式处理</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// webpack.config.js</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">  <span class="built_in">module</span>: &#123;</span><br><span class="line">    rules: [</span><br><span class="line">      &#123;</span><br><span class="line">        test: <span class="regexp">/\.scss$/</span>,</span><br><span class="line">        use:[</span><br><span class="line">          &#123;<span class="attr">loader</span>:<span class="string">'style-loader'</span>&#125;,</span><br><span class="line">          &#123;<span class="attr">loader</span>:<span class="string">'css-loader'</span>,<span class="attr">options</span>:&#123;<span class="attr">sourceMap</span>:<span class="literal">true</span>,<span class="attr">modules</span>:<span class="literal">true</span>&#125;&#125;,</span><br><span class="line">          &#123;<span class="attr">loader</span>:<span class="string">'sass-loader'</span>,<span class="attr">options</span>:&#123;<span class="attr">sourceMap</span>:<span class="literal">true</span>&#125;&#125;</span><br><span class="line">        ],</span><br><span class="line">        exclude:<span class="regexp">/node_modules/</span></span><br><span class="line">      &#125;</span><br><span class="line">    ]</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p><code>postcss-loader/autoprefixer</code>: 浏览器兼容考虑，将前缀补充交由<code>webpack</code> 完成</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// postcss.config.js</span></span><br><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">  plugins: [</span><br><span class="line">    <span class="comment">// 需要使用的插件列表</span></span><br><span class="line">    <span class="built_in">require</span>(<span class="string">'autoprefixer'</span>),</span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// webpack.config.js</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">  <span class="built_in">module</span>:&#123;</span><br><span class="line">    rules: [</span><br><span class="line">      &#123;</span><br><span class="line">        test: <span class="regexp">/\.css$/</span>,</span><br><span class="line">        use: [<span class="string">'style-loader'</span>, <span class="string">'css-loader'</span>, <span class="string">'postcss-loader'</span>]</span><br><span class="line">      &#125;,</span><br><span class="line">      <span class="comment">// ...</span></span><br><span class="line">    ]</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ul>
<ol start="2">
<li>文件：<code>raw-loader</code>、<code>file-loader</code>、<code>json-loader</code> 、<code>url-loader</code>等</li>
<li>编译：<code>babel-loader</code>、<code>coffee-loader</code> 、<code>ts-loader</code>等</li>
<li>校验：<code>mocha-loader</code>、<code>jshint-loader</code> 、<code>eslint-loader</code>等</li>
</ol>
<blockquote>
<p>参考： <a href="https://juejin.im/post/5980752ef265da3e2e56e82e" target="_blank" rel="noopener">webpack之 loader 和 plugin 简介</a></p>
</blockquote>
<h3 id="4-2-常用-plugin"><a href="#4-2-常用-plugin" class="headerlink" title="4.2.常用 plugin"></a>4.2.常用 <code>plugin</code></h3><p>在配置文件 <code>webpack.config.js</code> 中，<code>plugins</code> 是一个插件组成的数组。 数组中的插件对象是插件new出来的实例。<br><strong>用法</strong>：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">plugins:[plugin1,plugin2, ...]</span><br></pre></td></tr></table></figure>

<p><em>e.g.</em>：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">plugins: [</span><br><span class="line">    <span class="keyword">new</span> webpack.optimize.UglifyJsPlugin(),</span><br><span class="line">    <span class="keyword">new</span> HtmlWebpackPlugin(&#123;<span class="attr">template</span>: <span class="string">'./public/index.html'</span>&#125;)</span><br><span class="line">]</span><br></pre></td></tr></table></figure>

<h4 id="4-2-1-HTML文件生成插件-html-webpack-plugin"><a href="#4-2-1-HTML文件生成插件-html-webpack-plugin" class="headerlink" title="4.2.1.HTML文件生成插件(html-webpack-plugin)"></a>4.2.1.HTML文件生成插件(html-webpack-plugin)</h4><p><strong>作用</strong>：HtmlWebpackPlugin 在此可以用于自动重新生成一个index.html或依据模板生成，帮你把所有生产的js文件引入到html中，最终生成到output目录。</p>
<p><strong>安装</strong>：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm install --save-dev html-webpack-plugin</span><br></pre></td></tr></table></figure>

<p><strong>配置</strong>:</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//引入</span></span><br><span class="line"><span class="keyword">const</span> HtmlWebpackPlugin = <span class="built_in">require</span>(<span class="string">'html-webpack-plugin'</span>);</span><br><span class="line"><span class="comment">//配置</span></span><br><span class="line">plugins: [</span><br><span class="line">    <span class="keyword">new</span> HtmlWebpackPlugin(&#123;  <span class="comment">// 打包输出HTML</span></span><br><span class="line">      title: <span class="string">'Hello World app'</span>,</span><br><span class="line">      favicon: <span class="string">''</span>,             <span class="comment">// 指定页面的图标</span></span><br><span class="line">      inject: <span class="string">''</span>,              <span class="comment">// 引入模板的注入位置（true/false/body/head）</span></span><br><span class="line">      minify: &#123;                <span class="comment">// 压缩HTML文件</span></span><br><span class="line">        removeComments: <span class="literal">true</span>,     <span class="comment">// 移除HTML中的注释</span></span><br><span class="line">        collapseWhitespace: <span class="literal">true</span>, <span class="comment">// 删除空白符与换行符</span></span><br><span class="line">        caseSensitive: <span class="literal">false</span>,     <span class="comment">// 是否大小写敏感</span></span><br><span class="line">        minifyCSS: <span class="literal">true</span>           <span class="comment">// 压缩内联css</span></span><br><span class="line">      &#125;,</span><br><span class="line">      template: <span class="string">'index.html'</span>,     <span class="comment">// 模板来源html文件</span></span><br><span class="line">      filename: <span class="string">'index.html'</span>      <span class="comment">// 生成的模板文件名</span></span><br><span class="line">    &#125;)</span><br><span class="line">]</span><br></pre></td></tr></table></figure>

<h4 id="4-2-2-图片压缩插件-imagemin-webpack-plugin"><a href="#4-2-2-图片压缩插件-imagemin-webpack-plugin" class="headerlink" title="4.2.2.图片压缩插件(imagemin-webpack-plugin)"></a>4.2.2.图片压缩插件(imagemin-webpack-plugin)</h4><p><strong>作用</strong>：批量压缩图片。</p>
<p><strong>安装</strong>：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm install --save-dev imagemin-webpack-plugin</span><br></pre></td></tr></table></figure>

<p><strong>配置</strong>：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//引入插件</span></span><br><span class="line"><span class="keyword">var</span> ImageminPlugin = <span class="built_in">require</span>(<span class="string">'imagemin-webpack-plugin'</span>).default;</span><br><span class="line"></span><br><span class="line"><span class="comment">//配置</span></span><br><span class="line">plugins: [</span><br><span class="line">  <span class="keyword">new</span> ImageminPlugin(&#123;</span><br><span class="line">    disable: process.env.NODE_ENV !== <span class="string">'production'</span>, <span class="comment">// 开发时不启用</span></span><br><span class="line">    pngquant: &#123;<span class="comment">//图片质量</span></span><br><span class="line">      quality: <span class="string">'95-100'</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;)</span><br><span class="line">]</span><br></pre></td></tr></table></figure>

<h4 id="4-2-3-清空文件夹插件-clean-webpack-plugin"><a href="#4-2-3-清空文件夹插件-clean-webpack-plugin" class="headerlink" title="4.2.3.清空文件夹插件(clean-webpack-plugin)"></a>4.2.3.清空文件夹插件(clean-webpack-plugin)</h4><p><strong>作用</strong>：打包前先清空output文件夹。</p>
<p><strong>安装</strong>：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm install --save-dev clean-webpack-plugin</span><br></pre></td></tr></table></figure>

<p><strong>配置</strong>：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//引入</span></span><br><span class="line"><span class="keyword">const</span> CleanWebpackPlugin = <span class="built_in">require</span>(<span class="string">'clean-webpack-plugin'</span>);</span><br><span class="line"><span class="comment">//清空dist文件夹</span></span><br><span class="line">plugins: [</span><br><span class="line">  <span class="keyword">new</span> CleanWebpackPlugin([<span class="string">'public'</span>])</span><br><span class="line">]</span><br></pre></td></tr></table></figure>

<h4 id="4-2-4-删除冗余css插件-purifycss-webpack"><a href="#4-2-4-删除冗余css插件-purifycss-webpack" class="headerlink" title="4.2.4.删除冗余css插件(purifycss-webpack)"></a>4.2.4.删除冗余css插件(purifycss-webpack)</h4><p><strong>作用</strong>：去除冗余的css代码。</p>
<p><strong>安装</strong>：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm install --save-dev purifycss-webpack</span><br></pre></td></tr></table></figure>

<p><strong>配置</strong>：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> purifycssWebpack = <span class="built_in">require</span>(<span class="string">'purifycss-webpack'</span>);</span><br><span class="line"><span class="keyword">const</span> glob = <span class="built_in">require</span>(<span class="string">'glob'</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// Make sure this is after ExtractTextPlugin!</span></span><br><span class="line"><span class="keyword">new</span> purifycssWebpack(&#123;</span><br><span class="line">　　paths: glob.sync(path.resolve(<span class="string">'./public/*.html'</span>))</span><br><span class="line">&#125;),</span><br></pre></td></tr></table></figure>

<h4 id="4-2-5-加速代码构建-happypack"><a href="#4-2-5-加速代码构建-happypack" class="headerlink" title="4.2.5.加速代码构建(happypack)"></a>4.2.5.加速代码构建(happypack)</h4><p><strong>作用</strong>：通过多进程模型，来加速代码构建。</p>
<p><strong>安装</strong>：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm install --save-dev happypack</span><br></pre></td></tr></table></figure>

<p><strong>配置</strong>：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> os = <span class="built_in">require</span>(<span class="string">'os'</span>);</span><br><span class="line"><span class="keyword">let</span> HappyPack = <span class="built_in">require</span>(<span class="string">'happypack'</span>);</span><br><span class="line"><span class="keyword">let</span> happyThreadPool = HappyPack.ThreadPool(&#123;<span class="attr">size</span>: os.cpus().length&#125;);</span><br><span class="line">exports.plugins = [</span><br><span class="line">  <span class="keyword">new</span> HappyPack(&#123;</span><br><span class="line">    id: <span class="string">'jsx'</span>,</span><br><span class="line">    threadPool: happyThreadPool,</span><br><span class="line">    loaders: [ <span class="string">'babel-loader'</span> ]</span><br><span class="line">  &#125;),</span><br><span class="line"></span><br><span class="line">  <span class="keyword">new</span> HappyPack(&#123;</span><br><span class="line">    id: <span class="string">'coffeescripts'</span>,</span><br><span class="line">    threadPool: happyThreadPool,</span><br><span class="line">    loaders: [ <span class="string">'coffee-loader'</span> ]</span><br><span class="line">  &#125;)</span><br><span class="line">];</span><br><span class="line"></span><br><span class="line">exports.module.loaders = [</span><br><span class="line">  &#123;</span><br><span class="line">    test: <span class="regexp">/\.js$/</span>,</span><br><span class="line">    loaders: [ <span class="string">'happypack/loader?id=jsx'</span> ]</span><br><span class="line">  &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">    test: <span class="regexp">/\.coffee$/</span>,</span><br><span class="line">    loaders: [ <span class="string">'happypack/loader?id=coffeescripts'</span> ]</span><br><span class="line">  &#125;,</span><br><span class="line">]</span><br></pre></td></tr></table></figure>

<h4 id="4-2-6-提取公共模块-CommonsChunkPlugin"><a href="#4-2-6-提取公共模块-CommonsChunkPlugin" class="headerlink" title="4.2.6.提取公共模块(CommonsChunkPlugin)"></a>4.2.6.提取公共模块(CommonsChunkPlugin)</h4><p><strong>作用</strong>：提取代码中的公共模块，单独生成一个或多个文件，这样避免在多入口重复打包文件。</p>
<p><strong>配置</strong>：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> webpack = <span class="built_in">require</span>(<span class="string">'webpack'</span>);</span><br><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">  entry:[<span class="string">'index1.js'</span>,<span class="string">'index2.js'</span>],</span><br><span class="line">  plugins: [</span><br><span class="line">    <span class="keyword">new</span> CommonsChunkPlugin(&#123;</span><br><span class="line">      name:<span class="string">"entry"</span>,</span><br><span class="line">      filename:<span class="string">"common.js"</span>,  <span class="comment">//忽略则以name为输出文件的名字，否则以此为输出文件名字</span></span><br><span class="line">      minChunks:<span class="number">2</span>,  <span class="comment">// 最小引用2次</span></span><br><span class="line">   &#125;)</span><br><span class="line">  ]</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">// 把 index1.js，index2.js公用的js抽取出来，打包成单独文件common.js。</span></span><br></pre></td></tr></table></figure>

<h4 id="4-2-7-js压缩-UglifyJsPlugin"><a href="#4-2-7-js压缩-UglifyJsPlugin" class="headerlink" title="4.2.7.js压缩(UglifyJsPlugin)"></a>4.2.7.js压缩(UglifyJsPlugin)</h4><p><strong>作用</strong>：压缩js文件。</p>
<p><strong>配置</strong>：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> webpack = <span class="built_in">require</span>(<span class="string">'webpack'</span>);</span><br><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">  entry:[<span class="string">'index.js'</span>],</span><br><span class="line">  plugins: [</span><br><span class="line">    <span class="keyword">new</span> webpack.optimize.UglifyJsPlugin(&#123;</span><br><span class="line">      compress: &#123;</span><br><span class="line">        warnings: VERBOSE,</span><br><span class="line">      &#125;,</span><br><span class="line">    &#125;)</span><br><span class="line">  ]</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<h4 id="4-2-8-开启服务插件-webpack-dev-server"><a href="#4-2-8-开启服务插件-webpack-dev-server" class="headerlink" title="4.2.8.开启服务插件(webpack-dev-server)"></a>4.2.8.开启服务插件(webpack-dev-server)</h4><p><strong>作用</strong>：可以完成自动刷新、热替换等功能的服务端。</p>
<p><strong>安装</strong>：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm install --save-dev  webpack-dev-server</span><br></pre></td></tr></table></figure>

<p><strong>配置</strong>：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// package.json</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">  <span class="string">"scripts"</span>: &#123;</span><br><span class="line">    <span class="string">"dev"</span>: <span class="string">"webpack-dev-server --open --hot"</span>,</span><br><span class="line">    <span class="string">"build"</span>: <span class="string">"set NODE_ENV=production &amp;&amp; webpack"</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// webpack.config.js</span></span><br><span class="line"><span class="keyword">const</span> path = <span class="built_in">require</span>(path);</span><br><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">  plugins: [</span><br><span class="line">    <span class="keyword">new</span> webpack.HotModuleReplacementPlugin()  <span class="comment">// 热模块替换：只替换更新部分,不会页面重载.</span></span><br><span class="line">  ],</span><br><span class="line">  devServer: &#123;</span><br><span class="line">    contentBase: path.join(__dirname, <span class="string">'public'</span>),</span><br><span class="line">    port: <span class="number">8000</span>,</span><br><span class="line">    <span class="comment">// inline: false,</span></span><br><span class="line">    hot: <span class="literal">true</span>,</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>


<blockquote>
<p>参考：<a href="https://juejin.im/post/5d591c2ae51d453b39774399" target="_blank" rel="noopener">webpack常用插件</a></p>
</blockquote>
<hr>
]]></content>
      <categories>
        <category>编程</category>
        <category>前端</category>
      </categories>
      <tags>
        <tag>Webpack</tag>
      </tags>
  </entry>
  <entry>
    <title>web前端（六）：静态资源压缩</title>
    <url>/archives/3d25ddbc.html</url>
    <content><![CDATA[<blockquote>
<p>前端的静态资源压缩的方式有很多，这里记录一下 <code>Grunt</code> 和  <code>Gulp</code> 的使用</p>
</blockquote>
<a id="more"></a>

<h2 id="1-Grunt压缩"><a href="#1-Grunt压缩" class="headerlink" title="1. Grunt压缩"></a>1. Grunt压缩</h2><p>Grunt3是基于NodeJS的一个自动化压缩、合并、测试等构建工具，可用npm安装，任务文件Gruntfile.js放在项目的根目录下。</p>
<h3 id="1-1-安装"><a href="#1-1-安装" class="headerlink" title="1.1.安装"></a>1.1.安装</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm install -g grunt-cli</span><br></pre></td></tr></table></figure>

<h3 id="1-2-新建-package-json"><a href="#1-2-新建-package-json" class="headerlink" title="1.2.新建 package.json"></a>1.2.新建 <code>package.json</code></h3><p>文件内容如下：</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">"name"</span>: <span class="string">"project-name"</span>,</span><br><span class="line">  <span class="attr">"version"</span>: <span class="string">"1.0.0"</span>,</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">  <span class="attr">"devDependencies"</span>: &#123;</span><br><span class="line">    <span class="attr">"grunt"</span>: <span class="string">"^0.4.5"</span>,</span><br><span class="line">    <span class="attr">"grunt-contrib-concat"</span>: <span class="string">"^1.0.0"</span>,</span><br><span class="line">    <span class="attr">"grunt-contrib-cssmin"</span>: <span class="string">"^0.12.3"</span>,</span><br><span class="line">    <span class="attr">"grunt-contrib-imagemin"</span>: <span class="string">"^1.0.0"</span>,</span><br><span class="line">    <span class="attr">"grunt-contrib-jshint"</span>: <span class="string">"^0.12.0"</span>,</span><br><span class="line">    <span class="attr">"grunt-contrib-nodeunit"</span>: <span class="string">"~0.4.1"</span>,</span><br><span class="line">    <span class="attr">"grunt-contrib-uglify"</span>: <span class="string">"^0.5.1"</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="1-3-安装依赖"><a href="#1-3-安装依赖" class="headerlink" title="1.3.安装依赖"></a>1.3.安装依赖</h3><p>执行命令:</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm install</span><br></pre></td></tr></table></figure>

<h3 id="1-4-新建-Gruntfile-js"><a href="#1-4-新建-Gruntfile-js" class="headerlink" title="1.4.新建 Gruntfile.js"></a>1.4.新建 <code>Gruntfile.js</code></h3><p>添加配置任务，如：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="built_in">module</span>.exports = <span class="function"><span class="keyword">function</span>(<span class="params">grunt</span>) </span>&#123;</span><br><span class="line">grunt.initConfig(&#123;</span><br><span class="line">  pkg: grunt.file.readJSON(<span class="string">'package.json'</span>),</span><br><span class="line">  </span><br><span class="line">  <span class="comment">//压缩 js</span></span><br><span class="line">  uglify: &#123;</span><br><span class="line">    options: &#123;</span><br><span class="line">      banner: <span class="string">'/*压缩文件声明文本...*/\n'</span></span><br><span class="line">    &#125;,</span><br><span class="line">    build:&#123;</span><br><span class="line">     files:[&#123;</span><br><span class="line">      src: [<span class="string">'a.js'</span>, <span class="string">'b.js'</span>, <span class="string">'c.js'</span>],</span><br><span class="line">      dest: <span class="string">'abc.min.js'</span>  <span class="comment">//合并压缩后生成的文件</span></span><br><span class="line">     &#125;,&#123;</span><br><span class="line">      src: [<span class="string">'d.js'</span>],</span><br><span class="line">      dest: <span class="string">'d.min.js'</span></span><br><span class="line">     &#125;]</span><br><span class="line">   &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="comment">//压缩 css</span></span><br><span class="line">  cssmin: &#123;</span><br><span class="line">    options: &#123;</span><br><span class="line">      keepSpecialComments: <span class="number">0</span></span><br><span class="line">    &#125;,</span><br><span class="line">    compress: &#123;</span><br><span class="line">      files: [&#123;</span><br><span class="line">        src: [<span class="string">"a.css"</span>, <span class="string">"b.css"</span>],</span><br><span class="line">        dest: <span class="string">'ab.min.css'</span>  <span class="comment">//合并压缩后生成的文件</span></span><br><span class="line">      &#125;,&#123;</span><br><span class="line">        src: [<span class="string">'c.css'</span>],</span><br><span class="line">        dest: <span class="string">'c.min.css'</span></span><br><span class="line">      &#125;]</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="comment">//压缩 图片</span></span><br><span class="line">  imagemin: &#123;</span><br><span class="line">    <span class="comment">/* 压缩图片大小 */</span></span><br><span class="line">    dist: &#123;</span><br><span class="line">      options: &#123;</span><br><span class="line">        optimizationLevel: <span class="number">3</span> <span class="comment">//定义 PNG 图片优化水平</span></span><br><span class="line">      &#125;,</span><br><span class="line">      files: [&#123;</span><br><span class="line">        expand: <span class="literal">true</span>,</span><br><span class="line">        cwd: <span class="string">'images'</span>,</span><br><span class="line">        src: [<span class="string">'**/*.&#123;png,jpg,jpeg&#125;'</span>], <span class="comment">// 优化 img 目录下所有 png/jpg/jpeg 图片</span></span><br><span class="line">        dest: <span class="string">'images'</span> <span class="comment">// 优化后的图片保存位置，覆盖旧图片，并且不作提示（建议新建一个目录）</span></span><br><span class="line">      &#125;]</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">  <span class="comment">/* 加载任务插件 */</span></span><br><span class="line">  grunt.loadNpmTasks(<span class="string">'grunt-contrib-uglify'</span>);</span><br><span class="line">  grunt.loadNpmTasks(<span class="string">'grunt-contrib-cssmin'</span>);</span><br><span class="line">  grunt.loadNpmTasks(<span class="string">'grunt-contrib-imagemin'</span>);</span><br><span class="line"></span><br><span class="line">  <span class="comment">/* 默认被执行的任务列表 */</span></span><br><span class="line">  grunt.registerTask(<span class="string">'default'</span>, [<span class="string">'uglify'</span>, <span class="string">'cssmin'</span>, <span class="string">'imagemin]);</span></span><br><span class="line"><span class="string">&#125;;</span></span><br></pre></td></tr></table></figure>

<h2 id="2-Gulp压缩"><a href="#2-Gulp压缩" class="headerlink" title="2. Gulp压缩"></a>2. Gulp压缩</h2><h3 id="2-1-安装"><a href="#2-1-安装" class="headerlink" title="2.1.安装"></a>2.1.安装</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm install gulp -g</span><br><span class="line"><span class="comment"># or</span></span><br><span class="line">npm install gulp-cli -g</span><br></pre></td></tr></table></figure>

<h3 id="2-2-新建-package-json-文件"><a href="#2-2-新建-package-json-文件" class="headerlink" title="2.2.新建 package.json 文件"></a>2.2.新建 <code>package.json</code> 文件</h3><p>添加依赖项：</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">"name"</span>: <span class="string">"project-name"</span>,</span><br><span class="line">  <span class="attr">"version"</span>: <span class="string">"1.0.0"</span>,</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">  <span class="attr">"devDependencies"</span>: &#123;</span><br><span class="line">    <span class="attr">"gulp"</span>: <span class="string">"^4.0.2"</span>,</span><br><span class="line">    <span class="attr">"gulp-autoprefixer"</span>: <span class="string">"^3.1.0"</span>,</span><br><span class="line">    <span class="attr">"gulp-minify-css"</span>: <span class="string">"^1.2.1"</span>,</span><br><span class="line">    <span class="attr">"gulp-rename"</span>: <span class="string">"^1.2.2"</span>,</span><br><span class="line">    <span class="attr">"gulp-htmlclean"</span>: <span class="string">"^2.7.22"</span>,</span><br><span class="line">    <span class="attr">"gulp-htmlmin"</span>: <span class="string">"^5.0.1"</span>,</span><br><span class="line">    <span class="attr">"gulp-uglify"</span>: <span class="string">"^3.0.2"</span>,</span><br><span class="line">    <span class="attr">"babel-core"</span>: <span class="string">"^6.26.3"</span>,</span><br><span class="line">    <span class="attr">"gulp-babel"</span>: <span class="string">"^7.0.1"</span>,</span><br><span class="line">    <span class="attr">"gulp-imagemin"</span>: <span class="string">"^7.1.0"</span>,</span><br><span class="line">    <span class="attr">"gulp-sass"</span>: <span class="string">"^4.0.2"</span></span><br><span class="line">  &#125;,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="2-3-安装依赖"><a href="#2-3-安装依赖" class="headerlink" title="2.3.安装依赖"></a>2.3.安装依赖</h3><p>执行命令：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm install</span><br></pre></td></tr></table></figure>

<h3 id="2-4-新建-gulpfile-js-文件"><a href="#2-4-新建-gulpfile-js-文件" class="headerlink" title="2.4.新建 gulpfile.js 文件"></a>2.4.新建 <code>gulpfile.js</code> 文件</h3><p>添加任务配置，如：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> gulp        = <span class="built_in">require</span>(<span class="string">'gulp'</span>);</span><br><span class="line"><span class="keyword">var</span> sass        = <span class="built_in">require</span>(<span class="string">'gulp-sass'</span>);</span><br><span class="line"><span class="keyword">var</span> prefix      = <span class="built_in">require</span>(<span class="string">'gulp-autoprefixer'</span>);</span><br><span class="line"><span class="keyword">var</span> minifyCSS   = <span class="built_in">require</span>(<span class="string">'gulp-minify-css'</span>);</span><br><span class="line"><span class="keyword">var</span> rename      = <span class="built_in">require</span>(<span class="string">'gulp-rename'</span>);</span><br><span class="line"><span class="keyword">var</span> htmlmin     = <span class="built_in">require</span>(<span class="string">'gulp-htmlmin'</span>);</span><br><span class="line"><span class="keyword">var</span> htmlclean   = <span class="built_in">require</span>(<span class="string">'gulp-htmlclean'</span>);</span><br><span class="line"><span class="keyword">var</span> babel       = <span class="built_in">require</span>(<span class="string">'gulp-babel'</span>);</span><br><span class="line"><span class="keyword">var</span> uglify      = <span class="built_in">require</span>(<span class="string">'gulp-uglify'</span>);</span><br><span class="line"><span class="keyword">var</span> imagemin    = <span class="built_in">require</span>(<span class="string">'gulp-imagemin'</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 压缩 html</span></span><br><span class="line">gulp.task(<span class="string">'minify-html'</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> gulp.src(<span class="string">'./*.html'</span>)</span><br><span class="line">      .pipe(htmlclean())</span><br><span class="line">      .pipe(htmlmin(&#123;</span><br><span class="line">          removeComments: <span class="literal">true</span>,</span><br><span class="line">          minifyJS: <span class="literal">true</span>,</span><br><span class="line">          minifyCSS: <span class="literal">true</span>,</span><br><span class="line">          minifyURLs: <span class="literal">true</span>,</span><br><span class="line">      &#125;))</span><br><span class="line">      .pipe(gulp.dest(<span class="string">'./public'</span>));</span><br><span class="line">  done();</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 压缩 css</span></span><br><span class="line">gulp.task(<span class="string">'compressCSS'</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> gulp.src([<span class="string">'src/css/*.scss'</span>,<span class="string">'src/css/*.css'</span>])</span><br><span class="line">        .pipe(sass())</span><br><span class="line">        .pipe(prefix([<span class="string">'last 15 versions'</span>, <span class="string">'&gt; 1%'</span>, <span class="string">'ie 8'</span>, <span class="string">'ie 7'</span>], &#123; <span class="attr">cascade</span>: <span class="literal">true</span> &#125;))</span><br><span class="line">        .pipe(minifyCSS())</span><br><span class="line">        .pipe(rename(&#123;</span><br><span class="line">            suffix: <span class="string">'.min'</span></span><br><span class="line">        &#125;))</span><br><span class="line">        .pipe(gulp.dest(<span class="string">'./public/src/css/'</span>))</span><br><span class="line">        .pipe(browserSync.stream());</span><br><span class="line">  done();</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 压缩 js</span></span><br><span class="line">gulp.task(<span class="string">'minify-js'</span>, <span class="function"><span class="keyword">function</span> (<span class="params">done</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> gulp.src([<span class="string">'src/js/*.js'</span>])</span><br><span class="line">      .pipe(uglify())</span><br><span class="line">      .pipe(gulp.dest(<span class="string">'./public/src/js/'</span>));</span><br><span class="line">  done();</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 压缩 图片</span></span><br><span class="line">gulp.task(<span class="string">'minify-images'</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> gulp.src(<span class="string">'*.ico'</span>, <span class="string">'src/img/*.*'</span>)</span><br><span class="line">        .pipe(imagemin(</span><br><span class="line">        [imagemin.gifsicle(&#123;<span class="string">'optimizationLevel'</span>: <span class="number">3</span>&#125;),</span><br><span class="line">        imagemin.optipng(&#123;<span class="string">'optimizationLevel'</span>: <span class="number">7</span>&#125;),</span><br><span class="line">        imagemin.svgo()],</span><br><span class="line">        &#123;<span class="string">'verbose'</span>: <span class="literal">true</span>&#125;))</span><br><span class="line">        .pipe(gulp.dest(<span class="string">'./public/src/images'</span>))</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">gulp.task(<span class="string">'font'</span>, <span class="function"><span class="keyword">function</span> (<span class="params">done</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> gulp.src([<span class="string">'./font/*'</span>])</span><br><span class="line">      .pipe(gulp.dest(<span class="string">'./public/font'</span>));</span><br><span class="line">  done();</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">gulp.task(<span class="string">'default'</span>,gulp.series(gulp.parallel(<span class="string">'compressCSS'</span>,<span class="string">'minify-js'</span>, <span class="string">'minify-images'</span>, <span class="string">'font'</span>, <span class="string">'minify-html'</span>)), <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">"----------gulp Finished----------"</span>);</span><br><span class="line">  <span class="comment">// Do something after a, b, and c are finished.</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<blockquote>
<p>另外，其他同类插件的使用，可参考：<a href="https://fis.baidu.com/fis3/docs/lv3.html" target="_blank" rel="noopener">fis3使用</a>、<a href="https://juejin.im/entry/5a577f64518825733a30a050" target="_blank" rel="noopener">gzip压缩</a>、<a href="https://blog.7v1.net/front-end/webpack.html" target="_blank" rel="noopener">Webpack 构建前端资源</a></p>
</blockquote>
<p><strong>参考</strong>：<br>[1]. <a href="https://borninsummer.com/2015/01/03/web-performance-in-practice/" target="_blank" rel="noopener">Web前端性能优化实践</a><br>[2]. <a href="https://lanqy.xyz/2018/05/21/grunt-example/" target="_blank" rel="noopener">Gruntjs 压缩合并前端静态资源</a></p>
<hr>
]]></content>
      <categories>
        <category>编程</category>
        <category>前端</category>
      </categories>
      <tags>
        <tag>资源压缩</tag>
      </tags>
  </entry>
  <entry>
    <title>Python（四）- 数据类型及常用的操作！</title>
    <url>/archives/2fc509ab.html</url>
    <content><![CDATA[<blockquote>
<p>所有语言的开端都绕不开数据类型，作为面向对象语言，Python之所以深受欢迎，同样离不开其丰富的数据类型</p>
</blockquote>
<a id="more"></a>

<h2 id="一、类型分类"><a href="#一、类型分类" class="headerlink" title="一、类型分类"></a>一、类型分类</h2><ol>
<li><strong>数字 Number</strong></li>
<li><strong>字符串 String</strong></li>
<li><strong>列表 List</strong></li>
<li><strong>元组 Tuple</strong></li>
<li><strong>字典 Dict/有序字典 OrderedDict</strong></li>
<li><strong>集合 Set/固定集合 FrozenSet</strong></li>
</ol>
<h2 id="二、相关操作"><a href="#二、相关操作" class="headerlink" title="二、相关操作"></a>二、相关操作</h2><h3 id="1-数字-Number"><a href="#1-数字-Number" class="headerlink" title="1. 数字 Number"></a>1. 数字 Number</h3><ul>
<li>int：整型</li>
<li>float：浮点型</li>
<li>bool：布尔型</li>
<li>complex：复数<blockquote>
<p>数值运算： 加、减、乘、除、取模、求余、幂运算</p>
</blockquote>
</li>
</ul>
<h3 id="2-字符串-String"><a href="#2-字符串-String" class="headerlink" title="2. 字符串 String"></a>2. 字符串 String</h3><blockquote>
<p>Python中的字符串用单引号 ‘ 或双引号 “ 括起来，使用反斜杠 \ 转义特殊字符。支持索引、切片，但不能改变</p>
</blockquote>
<p><strong>常用字符串方法:</strong></p>
<table>
<thead>
<tr>
<th>方法</th>
<th>说明</th>
</tr>
</thead>
<tbody><tr>
<td>S.isdigit()</td>
<td>判断字符串中的字符是否全为数字</td>
</tr>
<tr>
<td>S.isalpha()</td>
<td>判断字符串是否全为英文字母</td>
</tr>
<tr>
<td>S.islower()</td>
<td>判断字符串所有字符是否全为小写英文字母</td>
</tr>
<tr>
<td>S.isupper()</td>
<td>判断字符串所有字符是否全为大写英文字母</td>
</tr>
<tr>
<td>S.isspace()</td>
<td>判断字符串是否全为空白字符</td>
</tr>
<tr>
<td>S.center(width[,fill])</td>
<td>将原字符串居中，左右默认填充空格</td>
</tr>
<tr>
<td>S.count(sub[, start[,end]])</td>
<td>获取一个字符串中子串的个数</td>
</tr>
<tr>
<td>S.find(sub[, start[,end]])</td>
<td>获取字符串中子串sub的索引,失败返回-1</td>
</tr>
<tr>
<td>S.strip()</td>
<td>返回去掉左右空白字符的字符串</td>
</tr>
<tr>
<td>S.lstrip()</td>
<td>返回去掉左侧空白字符的字符串</td>
</tr>
<tr>
<td>S.rstrip()</td>
<td>返回去掉右侧空白字符的字符串</td>
</tr>
<tr>
<td>S.upper()</td>
<td>生成将英文转换为大写的字符串</td>
</tr>
<tr>
<td>S.lower()</td>
<td>生成将英文转换为小写的字符串</td>
</tr>
<tr>
<td>S.replace(old, new[, count])</td>
<td>将原字符串的old用new代替，生成一个新的字符串</td>
</tr>
<tr>
<td>S.startswith(prefix[, start[, end]])</td>
<td>返回S是否是以prefix开头，如果以prefix开头返回True,否则返回False,</td>
</tr>
<tr>
<td>S.endswith(suffix[, start[, end]])</td>
<td>返回S是否是以suffix结尾，如果以suffix结尾返回True,否则返回False</td>
</tr>
<tr>
<td>S.title()</td>
<td>生成每个英文单词的首字母大写字符串</td>
</tr>
<tr>
<td>S.isnumeric()</td>
<td>判断字符串是否全为数字字符</td>
</tr>
<tr>
<td>…</td>
<td>…</td>
</tr>
</tbody></table>
<h3 id="3-列表-List"><a href="#3-列表-List" class="headerlink" title="3. 列表 List"></a>3. 列表 List</h3><blockquote>
<p>Python 中使用最频繁的数据类型，支持索引、切片、赋值，为可变类型。详细可见：help(list)</p>
</blockquote>
<p><strong>常用列表方法：</strong></p>
<table>
<thead>
<tr>
<th>方法</th>
<th>说明</th>
</tr>
</thead>
<tbody><tr>
<td>L.index(v [, begin[, end]])</td>
<td>返回对应元素的索引下标, begin为开始索引，end为结束索引,当 value不存在时触发ValueError错误</td>
</tr>
<tr>
<td>L.insert(index, obj)</td>
<td>将某个元素插放到列表中指定的位置</td>
</tr>
<tr>
<td>L.count(x)</td>
<td>返回列表中元素的个数</td>
</tr>
<tr>
<td>L.remove(x)</td>
<td>从列表中删除第一次出现在列表中的值</td>
</tr>
<tr>
<td>L.copy()</td>
<td>复制此列表（只复制一层，不会复制深层对象)</td>
</tr>
<tr>
<td>L.append(x)</td>
<td>向列表中追加单个元素</td>
</tr>
<tr>
<td>L.extend(lst)</td>
<td>向列表追加另一个列表</td>
</tr>
<tr>
<td>L.clear()</td>
<td>清空列表,等同于 L[:] = []</td>
</tr>
<tr>
<td>L.sort(reverse=False)</td>
<td>将列表中的元素进行排序，默认顺序按值的小到大的顺序排列</td>
</tr>
<tr>
<td>L.reverse()</td>
<td>列表的反转，用来改变原列表的先后顺序</td>
</tr>
<tr>
<td>L.pop([index])</td>
<td>删除索引对应的元素，如果不加索引，默认删除最后元素，同时返回删除元素的引用关系</td>
</tr>
<tr>
<td>…</td>
<td>…</td>
</tr>
</tbody></table>
<blockquote>
<p>常用还有列表推倒式，如：[i for i in range(10) if i % 2 == 0]</p>
</blockquote>
<h3 id="4-元组-Tuple"><a href="#4-元组-Tuple" class="headerlink" title="4. 元组 Tuple"></a>4. 元组 Tuple</h3><blockquote>
<p>元组是一个不可变类型，支持索引、切片，当元组内嵌有其他可变类型时，可以改变可变类型的值。</p>
</blockquote>
<p><strong>元组支持的方法：</strong></p>
<table>
<thead>
<tr>
<th>方法</th>
<th>说明</th>
</tr>
</thead>
<tbody><tr>
<td>len(tuple)</td>
<td>计算元组元素个数</td>
</tr>
<tr>
<td>max(tuple)</td>
<td>返回元组中元素最大值</td>
</tr>
<tr>
<td>min(tuple)</td>
<td>返回元组中元素最小值</td>
</tr>
<tr>
<td>tuple(seq)</td>
<td>将列表转换为元组</td>
</tr>
<tr>
<td><del>cmp(tup1,tup2</del> )</td>
<td>比较两个元组元素</td>
</tr>
<tr>
<td>tuple.count(val)</td>
<td>计算元素val在元组中的出现次数</td>
</tr>
<tr>
<td>tuple.index(val)</td>
<td>返回元素val在元组中的位置</td>
</tr>
<tr>
<td>…</td>
<td>…</td>
</tr>
</tbody></table>
<blockquote>
<p>python3中将cmp()比较方法弃用了，可以手写一个：<br><code>cmp = lambda x,y: (x&gt;y) - (x&lt;y)</code></p>
</blockquote>
<h3 id="5-字典-Dict"><a href="#5-字典-Dict" class="headerlink" title="5. 字典 Dict"></a>5. 字典 Dict</h3><blockquote>
<p>python中的字典属于可变无序类型，类似于其他语言中的哈希，如果需要有序，可用有序字典：OrderedDict</p>
</blockquote>
<p><strong>字典的方法:</strong></p>
<table>
<thead>
<tr>
<th>方法</th>
<th>说明</th>
</tr>
</thead>
<tbody><tr>
<td>D.clear()</td>
<td>清空字典</td>
</tr>
<tr>
<td>D.pop(key)</td>
<td>移除键，同时返回此键所对应的值</td>
</tr>
<tr>
<td>D.copy()</td>
<td>返回字典D的副本,只复制一层(浅拷贝)</td>
</tr>
<tr>
<td>D.update(D2)</td>
<td>将字典 D2 合并到D中，如果键相同，则此键的值取D2的值作为新值</td>
</tr>
<tr>
<td>D.get(key, default)</td>
<td>返回键key所对应的值,如果没有此键，则返回default</td>
</tr>
<tr>
<td>D.keys()</td>
<td>返回可迭代的 dict_keys 集合对象</td>
</tr>
<tr>
<td>D.values()</td>
<td>返回可迭代的 dict_values 值对象</td>
</tr>
<tr>
<td>D.items()</td>
<td>返回可迭代的 dict_items 对象</td>
</tr>
<tr>
<td>…</td>
<td>…</td>
</tr>
</tbody></table>
<blockquote>
<p>常用还有字典推倒式，如：    {k: v for k, v in zip(lst1, lst2)}</p>
</blockquote>
<blockquote>
<p>创建有序字典：<br><code>import collections</code><br><code>od = collections.OrderedDict()</code></p>
</blockquote>
<p><strong>有序字典的方法：</strong></p>
<table>
<thead>
<tr>
<th>方法</th>
<th>说明</th>
</tr>
</thead>
<tbody><tr>
<td>od.clear()</td>
<td>清空字典</td>
</tr>
<tr>
<td>od.copy()</td>
<td>拷贝</td>
</tr>
<tr>
<td>od.fromkeys(lst1,val)</td>
<td>fromkeys(指定一个列表，把列表中的值作为字典的key,生成一个字典)</td>
</tr>
<tr>
<td>od.get(key, default)</td>
<td>返回键key所对应的值,如果没有此键，则返回default</td>
</tr>
<tr>
<td>od.update(od2)</td>
<td>将字典 od2 合并到od中，如果键相同，则此键的值取od2的值作为新值</td>
</tr>
<tr>
<td>od.pop(k)</td>
<td>获取指定key的value，并在字典中删除</td>
</tr>
<tr>
<td>od.popitem()</td>
<td>按照后进先出原则，删除最后加入的元素，返回key-value</td>
</tr>
<tr>
<td>od.move_to_end(k)</td>
<td>指定一个key，把对应的key-value移到最后</td>
</tr>
<tr>
<td>od.keys()</td>
<td>获取字典所有的key</td>
</tr>
<tr>
<td>od.values()</td>
<td>获取字典所有的value</td>
</tr>
<tr>
<td>od.items()</td>
<td>返回由键值对组成的列表</td>
</tr>
<tr>
<td>od.setdefault(k)</td>
<td>获取指定key的value，如果key不存在，则创建</td>
</tr>
</tbody></table>
<h3 id="6-集合-Set"><a href="#6-集合-Set" class="headerlink" title="6. 集合 Set"></a>6. 集合 Set</h3><blockquote>
<p>集合：基本功能是进行成员关系测试和删除重复元素，也是无序可变的，固定集合是不可变的。</p>
</blockquote>
<p><strong>1. 集合的运算：</strong></p>
<ul>
<li>交集 &amp;</li>
<li>并集 |</li>
<li>补集（差集） -</li>
<li>对称补集 ^</li>
<li>子集 &lt;</li>
<li>超集（父集） &gt;</li>
</ul>
<p><strong>2. 集合的常用方法：</strong></p>
<table>
<thead>
<tr>
<th>方法</th>
<th>说明</th>
</tr>
</thead>
<tbody><tr>
<td>S.add(e)</td>
<td>在集合中添加一个新的元素e；如果元素已经存在，则不添加</td>
</tr>
<tr>
<td>S.remove(e)</td>
<td>从集合中删除一个元素，如果元素不存在于集合中，则会产生一个KeyError错误</td>
</tr>
<tr>
<td>S.discard(e)</td>
<td>从集合S中移除一个元素e;</td>
</tr>
<tr>
<td>S.clear()</td>
<td>清空集合内的所有元素</td>
</tr>
<tr>
<td>S.copy()</td>
<td>将集合进行一次浅拷贝</td>
</tr>
<tr>
<td>S.pop()</td>
<td>从集合S中删除一个随机元素;如果此集合为空，则引发KeyError异常</td>
</tr>
<tr>
<td>S.update(s2)</td>
<td>用 S与s2得到的全集更新变量S</td>
</tr>
<tr>
<td>S.difference(s2)</td>
<td>用S - s2 运算，返回存在于在S中，但不在s2中的所有元素的集合</td>
</tr>
<tr>
<td>S.difference_update(s2)</td>
<td>等同于 S = S - s2</td>
</tr>
<tr>
<td>S.intersection(s2)</td>
<td>等同于S &amp; s2</td>
</tr>
<tr>
<td>S.intersection_update(s2)</td>
<td>等同于S = S &amp; s2</td>
</tr>
<tr>
<td>S.isdisjoint(s2)</td>
<td>如果S与s2交集为空返回True,非空则返回False</td>
</tr>
<tr>
<td>S.issubset(s2)</td>
<td>如果S与s2交集为非空返回True,空则返回False</td>
</tr>
<tr>
<td>S.issuperset(…)</td>
<td>如果S为s2的子集返回True,否则返回False</td>
</tr>
<tr>
<td>S.symmetric_difference(s2)</td>
<td>返回对称补集,等同于 S ^ s2</td>
</tr>
<tr>
<td>S.symmetric_difference_update(s2)</td>
<td>用S 与 s2的对称补集更新 S</td>
</tr>
<tr>
<td>S.union(s2)</td>
<td>生成 S 与 s2的全集</td>
</tr>
<tr>
<td>…</td>
<td>…</td>
</tr>
</tbody></table>
<blockquote>
<p>常用还有集合推倒式，如：{x**2 for x in range(6)}</p>
</blockquote>
<hr>
<p>另外的关于时间的类型，可以参考time、datetime、pytz等模块，对时间格式化处理比较多样灵活。</p>
<p>结束！</p>
<blockquote>
<p>原文地址： CSDN博客 - <a href="https://blog.csdn.net/weixin_41599858/article/details/102883940" target="_blank" rel="noopener">Python（四）- 数据类型及常用的操作！</a></p>
</blockquote>
]]></content>
      <categories>
        <category>编程</category>
        <category>Python</category>
      </categories>
      <tags>
        <tag>数据类型</tag>
        <tag>基本操作</tag>
      </tags>
  </entry>
  <entry>
    <title>web前端（四）：CSS布局之flex弹性布局</title>
    <url>/archives/1155e3cf.html</url>
    <content><![CDATA[<ul>
<li>布局的传统解决方案，基于<a href="https://developer.mozilla.org/en-US/docs/Web/CSS/box_model" target="_blank" rel="noopener">盒状模型</a>，依赖 <a href="https://developer.mozilla.org/en-US/docs/Web/CSS/display" target="_blank" rel="noopener"><code>display</code></a> 属性 + <a href="https://developer.mozilla.org/en-US/docs/Web/CSS/position" target="_blank" rel="noopener"><code>position</code></a>属性 + <a href="https://developer.mozilla.org/en-US/docs/Web/CSS/float" target="_blank" rel="noopener"><code>float</code></a>属性。</li>
<li>它对于那些特殊布局非常不方便，比如，<a href="https://css-tricks.com/centering-css-complete-guide/" target="_blank" rel="noopener">垂直居中</a>就不容易实现。</li>
</ul>
<a id="more"></a>

<blockquote>
<p>2009年, W3C提出一个新方案: Flex布局</p>
</blockquote>
<h2 id="1-Flex-简介"><a href="#1-Flex-简介" class="headerlink" title="1.Flex 简介"></a>1.Flex 简介</h2><p>Flex 是 <strong>Flexible Box</strong>的缩写, 意思是”<strong>弹性布局</strong>“, 用来为盒状模型提供最大的布局灵活性，任何一个容器都可以设置为<code>Flex</code>布局模式。</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* 块元素可以设置为Flex容器 */</span></span><br><span class="line"><span class="selector-class">.container</span> &#123;</span><br><span class="line">  <span class="attribute">display</span>: flex;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*内联元素也可以设置为Flex*/</span></span><br><span class="line"><span class="selector-tag">span</span> &#123;</span><br><span class="line">  <span class="attribute">display</span>: inline-flex;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* WebKit内核浏览器,如Safari, 需要加前缀*/</span></span><br><span class="line"><span class="selector-tag">div</span> &#123;</span><br><span class="line">  <span class="attribute">display</span>: -webkit-flex;	<span class="comment">/*Safari*/</span></span><br><span class="line">  <span class="attribute">display</span>: lfex;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><font face="微软雅黑" color="Blue"><strong>Tips</strong>:</font></p>
<ul>
<li>一旦设置为Flex容器, 则容器内子元素的<code>float</code>, <code>clear</code>, <code>vertical-align</code>属性则全部失去效果</li>
<li>布局演变史: 表格布局<code>table</code> -&gt; 定位布局<code>positon</code> -&gt; 浮动布局<code>float</code> -&gt; 弹性布局<code>flex</code> -&gt; 网格布局<code>grid</code></li>
</ul>
<h2 id="2-基本术语"><a href="#2-基本术语" class="headerlink" title="2.基本术语"></a>2.基本术语</h2><h3 id="2-1-Flex容器-flex-container"><a href="#2-1-Flex容器-flex-container" class="headerlink" title="2.1.Flex容器(flex container)"></a>2.1.Flex容器(flex container)</h3><p>采用<code>flex</code>布局的元素, 称为<code>flex容器</code>, 简称<strong>容器</strong></p>
<h3 id="2-2-Flex项目-flex-item"><a href="#2-2-Flex项目-flex-item" class="headerlink" title="2.2.Flex项目(flex item)"></a>2.2.Flex项目(flex item)</h3><p>Flex容器中的所有成员(子元素)会自动成为该容器的成员，称为<code>flex项目</code>，简称<strong>项目</strong>。<br>flex项目都支持宽高设置, 哪怕它之前是内联元素，类似于浮动元素。</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="css">  <span class="comment">/*flex容器*/</span></span></span><br><span class="line"><span class="css">  <span class="selector-class">.contaier</span> &#123;</span></span><br><span class="line">    display: flex;</span><br><span class="line">  &#125;</span><br><span class="line"><span class="css">  <span class="comment">/*flex项目*/</span></span></span><br><span class="line"><span class="css">  <span class="selector-class">.item</span> &#123;</span></span><br><span class="line">    ...</span><br><span class="line">  &#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line">...</span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"container"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"item"</span>&gt;</span>item1<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"item"</span>&gt;</span>item2<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"item"</span>&gt;</span>item3<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="2-3-主轴-main-axis"><a href="#2-3-主轴-main-axis" class="headerlink" title="2.3.主轴(main axis)"></a>2.3.主轴(main axis)</h3><p>主轴也叫水平轴, 横轴,x轴</p>
<ul>
<li><code>main start</code>: 起始位置</li>
<li><code>main end</code>: 结束位置</li>
<li><code>main size</code>: 单个项目占据的主轴空间</li>
</ul>
<h3 id="2-4-交叉轴-cross-axis"><a href="#2-4-交叉轴-cross-axis" class="headerlink" title="2.4.交叉轴(cross axis)"></a>2.4.交叉轴(cross axis)</h3><p>交叉轴也叫垂直轴,坚轴,y轴</p>
<ul>
<li><code>cross start</code>: 起始位置</li>
<li><code>cross end</code>: 结束位置</li>
<li><code>cross size</code>: 单个项目占据的交叉轴空间</li>
</ul>
<img src="/archives/1155e3cf/bg2015071004.png" class title="图例">

<h2 id="3-Flex容器属性"><a href="#3-Flex容器属性" class="headerlink" title="3.Flex容器属性"></a>3.Flex容器属性</h2><p><strong>容器属性汇总:</strong></p>
<table>
<thead>
<tr>
<th align="center">序号</th>
<th align="left">属性</th>
<th align="left">描述</th>
</tr>
</thead>
<tbody><tr>
<td align="center">1</td>
<td align="left">flex-direction</td>
<td align="left">主轴方向(即项目排列方向)</td>
</tr>
<tr>
<td align="center">2</td>
<td align="left">flex-wrap</td>
<td align="left">当多个项目在一行排列不下时,如何换行</td>
</tr>
<tr>
<td align="center">3</td>
<td align="left">flex-flow</td>
<td align="left">flex-direction,flex-wrap的简写,默认:<code>row nowrap</code></td>
</tr>
<tr>
<td align="center">4</td>
<td align="left">justify-content</td>
<td align="left">项目在主轴上对齐方式</td>
</tr>
<tr>
<td align="center">5</td>
<td align="left">align-items</td>
<td align="left">项目在交叉轴上的对齐方式</td>
</tr>
<tr>
<td align="center">6</td>
<td align="left">align-content</td>
<td align="left">项目在多根轴线上的对齐方式,只有一根轴线无效</td>
</tr>
</tbody></table>
<hr>
<h3 id="3-1-flex-direction"><a href="#3-1-flex-direction" class="headerlink" title="3.1.flex-direction"></a>3.1.flex-direction</h3><ul>
<li><strong>功能</strong>: 决定项目在主轴上的排列方向</li>
<li>它有四个可能的值:</li>
</ul>
<table>
<thead>
<tr>
<th>序号</th>
<th>属性值</th>
<th>描述</th>
</tr>
</thead>
<tbody><tr>
<td>1</td>
<td>row 默认值</td>
<td>主轴为水平方向,起点在左边</td>
</tr>
<tr>
<td>2</td>
<td>row-reverse</td>
<td>主轴为水平方向, 起点在右边(反转)</td>
</tr>
<tr>
<td>3</td>
<td>column</td>
<td>主轴为垂直方向, 起点在上边</td>
</tr>
<tr>
<td>4</td>
<td>column-reverse</td>
<td>主轴为垂直方向, 起点在下边</td>
</tr>
</tbody></table>
<ul>
<li>CSS语法:</li>
</ul>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.container</span> &#123;</span><br><span class="line">  <span class="attribute">display</span>: flex;</span><br><span class="line">  <span class="attribute">flex-direction</span>: row | row-reverse | column | column-reverse;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ul>
<li>示意图:</li>
</ul>
<p><img src="/archives/1155e3cf/bg2015071005.png" alt="flex-direction"></p>
<h3 id="3-2-flex-wrap"><a href="#3-2-flex-wrap" class="headerlink" title="3.2.flex-wrap"></a>3.2.flex-wrap</h3><ul>
<li><strong>功能</strong>: 多个项目默认排列在一根轴线上,该属性定义了当一根轴线排列不下时,多作的项目的换行方式</li>
</ul>
<table>
<thead>
<tr>
<th>序号</th>
<th>属性值</th>
<th>描述</th>
</tr>
</thead>
<tbody><tr>
<td>1</td>
<td>nowrap 默认值</td>
<td>不换行</td>
</tr>
<tr>
<td>2</td>
<td>wrap</td>
<td>自动换行, 第一行排列不下, 自动转到下一行</td>
</tr>
<tr>
<td>3</td>
<td>wrap-reverse</td>
<td>自动反向换行, 第一行显示在下方, 与wrap相反</td>
</tr>
</tbody></table>
<p><img src="/archives/1155e3cf/bg2015071006.png" alt="flex-wrap"></p>
<ul>
<li>CSS语法</li>
</ul>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.container</span> &#123;</span><br><span class="line">  <span class="attribute">display</span>: flex;</span><br><span class="line">  <span class="attribute">flex-wrap</span>: nowrap | wrap | wrap-reverse;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li><p>属性值说明:</p>
<ul>
<li><code>nowrap</code>: (默认值)不换行</li>
</ul>
<p><img src="/archives/1155e3cf/bg2015071007.png" alt="nowrap"></p>
<ul>
<li><code>wrap</code>: 自动换行</li>
</ul>
<p><img src="/archives/1155e3cf/bg2015071008.jpg" alt="wrap"></p>
<ul>
<li><code>wrap-reverse</code>: 自动反向换行</li>
</ul>
<p><img src="/archives/1155e3cf/bg2015071009.jpg" alt="wrap-reverse"></p>
</li>
</ul>
<h3 id="3-3-flex-flow"><a href="#3-3-flex-flow" class="headerlink" title="3.3.flex-flow"></a>3.3.flex-flow</h3><p>flex-flow属性是flex-direction属性和flex-wrap属性的简写形式，默认值为<code>row nowrap</code></p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.container</span> &#123;</span><br><span class="line">  <span class="attribute">display</span>: flex;</span><br><span class="line">  <span class="attribute">flex-flow</span>: [flex-direction] || [flex-wrap];</span><br><span class="line">  <span class="comment">/*默认*/</span></span><br><span class="line">  <span class="attribute">flex-flow</span>: row nowrap;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="3-4-justity-content"><a href="#3-4-justity-content" class="headerlink" title="3.4. justity-content"></a>3.4. justity-content</h3><ul>
<li><strong>功能</strong>: 设置项目在主轴上的对齐方式</li>
<li>CSS语法:</li>
</ul>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.container</span> &#123;</span><br><span class="line">  <span class="attribute">display</span>: flex;</span><br><span class="line">  <span class="attribute">justify-content</span>: flex-start | flex-end | center | space-between | space-around;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>属性值说明</li>
</ul>
<table>
<thead>
<tr>
<th>序号</th>
<th>属性值</th>
<th>描述</th>
</tr>
</thead>
<tbody><tr>
<td>1</td>
<td>flex-start 默认值</td>
<td>左对齐</td>
</tr>
<tr>
<td>2</td>
<td>flex-end</td>
<td>右对齐</td>
</tr>
<tr>
<td>3</td>
<td>center</td>
<td>居中对齐</td>
</tr>
<tr>
<td>4</td>
<td>space-between</td>
<td>两端对齐: 项目之间间隔相等</td>
</tr>
<tr>
<td>5</td>
<td>space-around</td>
<td>项目两侧间隔相等,即项目之间间隔是项目到两端的二倍</td>
</tr>
<tr>
<td>6</td>
<td>space-evenly</td>
<td>平均分配主轴上的剩余空间</td>
</tr>
</tbody></table>
<ul>
<li>示意图:</li>
</ul>
<p><img src="/archives/1155e3cf/bg2015071010.png" alt="justify-content"></p>
<h3 id="3-5-align-items"><a href="#3-5-align-items" class="headerlink" title="3.5. align-items"></a>3.5. align-items</h3><ul>
<li><strong>功能:</strong> 该属性设置项目在交叉轴上的对齐方式</li>
<li>CSS语法:</li>
</ul>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.container</span> &#123;</span><br><span class="line">  <span class="attribute">display</span>: flex;</span><br><span class="line">  <span class="attribute">align-items</span>: flex-start | flex-end | center | baseline | stretch;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>属性值说明:</li>
</ul>
<table>
<thead>
<tr>
<th>序号</th>
<th>属性值</th>
<th>描述</th>
</tr>
</thead>
<tbody><tr>
<td>1</td>
<td>flex-start</td>
<td>与交叉轴起点对齐, 即: 顶对齐 / 上对齐</td>
</tr>
<tr>
<td>2</td>
<td>flex-end</td>
<td>与交叉轴终点对齐, 即: 底对齐 / 下对齐</td>
</tr>
<tr>
<td>3</td>
<td>center</td>
<td>与交叉轴中间线对齐, 即: 居中对齐</td>
</tr>
<tr>
<td>4</td>
<td>baseline</td>
<td>与项目中第一行文本的基线对齐, 即文本的下边线</td>
</tr>
<tr>
<td>5</td>
<td>stretch 默认值</td>
<td>自动伸展到容器的高度(项目未设置高度或将高度设置为auto有效)</td>
</tr>
</tbody></table>
<ul>
<li>示意图:</li>
</ul>
<p><img src="/archives/1155e3cf/bg2015071011.png" alt="align-items"></p>
<h3 id="3-6-align-content"><a href="#3-6-align-content" class="headerlink" title="3.6. align-content"></a>3.6. align-content</h3><ul>
<li><code>align-items</code>和<code>align-content</code>有相同的功能，不过不同点是它是用来让每一个单行的容器居中而不是让整个容器居中</li>
<li><code>align-content</code>属性只适用于<strong>多行</strong>的flex容器，并且当交叉轴上有多余空间使flex容器内的flex线对齐</li>
<li><code>align-items</code>属性适用于所有的flex容器，它是用来设置每个flex元素在交叉轴上的默认对齐方式</li>
<li>该属性的重点,在于<strong>多行项目</strong>, 这是与<code>align-items</code>最重要的区别</li>
<li>CSS语法:</li>
</ul>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.container</span> &#123;</span><br><span class="line">  <span class="attribute">display</span>: flex;</span><br><span class="line">  <span class="attribute">align-content</span>: flex-start | flex-end | center | space-between | space-around | stretch;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>属性值说明:</li>
</ul>
<table>
<thead>
<tr>
<th>序号</th>
<th>属性值</th>
<th>描述</th>
</tr>
</thead>
<tbody><tr>
<td>1</td>
<td>flex-start</td>
<td>与交叉轴起点对齐</td>
</tr>
<tr>
<td>2</td>
<td>flex-end</td>
<td>与交叉轴终点对齐</td>
</tr>
<tr>
<td>3</td>
<td>center</td>
<td>与交叉轴中间点对齐</td>
</tr>
<tr>
<td>4</td>
<td>space-between</td>
<td>与交叉轴两端对齐, 轴线之间间隔相等</td>
</tr>
<tr>
<td>5</td>
<td>sapce-around</td>
<td>每根轴线间隔相等,轴线间隔比轴线到边框大一倍</td>
</tr>
<tr>
<td>6</td>
<td>stretch 默认值</td>
<td>轴线占满整个交叉轴</td>
</tr>
</tbody></table>
<ul>
<li>示意图:</li>
</ul>
<p><img src="/archives/1155e3cf/bg2015071012.png" alt="align-content"></p>
<h2 id="4-Flex项目属性"><a href="#4-Flex项目属性" class="headerlink" title="4.Flex项目属性"></a>4.Flex项目属性</h2><p>在Flex项目也有6个可用的属性，分别是:</p>
<table>
<thead>
<tr>
<th>序号</th>
<th>属性</th>
<th>描述</th>
</tr>
</thead>
<tbody><tr>
<td>1</td>
<td>order</td>
<td>定义项目排列顺序,索引越小超靠前,默认为0</td>
</tr>
<tr>
<td>2</td>
<td>flex-grow</td>
<td>定义项目的放大比例,默认为0表示不放大, 即就算存在剩余空间也不放大</td>
</tr>
<tr>
<td>3</td>
<td>flex-shrink</td>
<td>定义了项目的缩小比例,默认为1,即如何空间不足,则自动缩小项目来填充</td>
</tr>
<tr>
<td>4</td>
<td>flex-basis</td>
<td>定义了项目占据的主轴空间,默认值为auto, 即项目原始大小</td>
</tr>
<tr>
<td>5</td>
<td>flex</td>
<td>是flex-grow,flex-shrink,flex-basis简写,默认值: 0 1 auto, 后二个属性可选</td>
</tr>
<tr>
<td>6</td>
<td>align-self</td>
<td>个性化定定制某单个项目的对齐方式,可覆盖容器<code>align-items</code>属性,默认auto</td>
</tr>
</tbody></table>
<hr>
<h3 id="4-1-order"><a href="#4-1-order" class="headerlink" title="4.1.order"></a>4.1.order</h3><ul>
<li>定义项目的排列顺序。数值越小，排列越靠前，默认为0</li>
<li>CSS语法:</li>
</ul>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.item</span> &#123;</span><br><span class="line">  <span class="attribute">order</span>: integer;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>示意图:</li>
</ul>
<p><img src="/archives/1155e3cf/bg2015071013.png" alt="order"></p>
<h3 id="4-2-flex-grow"><a href="#4-2-flex-grow" class="headerlink" title="4.2.flex-grow"></a>4.2.flex-grow</h3><ul>
<li>设置项目的放大比例, 默认为0: 不放大,哪怕轴上有剩余空间</li>
<li>CSS语法:</li>
</ul>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.item</span> &#123;</span><br><span class="line">  <span class="attribute">flex-grow</span>: number; <span class="comment">/* default: 0 */</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>空间分配方案小案例:<ul>
<li><code>flex-grow: 1</code>: 每个项目等分, 都占全部的空间的N分之一(N: 项目数量)</li>
<li><code>flex-grow: 2</code>如果某个项目为2, 其它项目为1, 则它占据空间比其它项目多一倍</li>
</ul>
</li>
</ul>
<p><img src="/archives/1155e3cf/bg2015071014.png" alt="flex-grow"></p>
<h3 id="4-3-flex-shrink"><a href="#4-3-flex-shrink" class="headerlink" title="4.3.flex-shrink"></a>4.3.flex-shrink</h3><ul>
<li>设置了项目的缩小比例,默认为1, 即空间不足时, 自动缩小填充</li>
<li>CSS语法:</li>
</ul>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.item</span> &#123;</span><br><span class="line">  <span class="attribute">flex-shrink</span>: number; <span class="comment">/*defautl: 1*/</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>缩放规则<ul>
<li><code>flex-shrink: 1</code>: 所有项目都为1, 空间不足时, 自动等比例缩小填充主轴剩余空间</li>
<li><code>flex-shrink</code>: 如果有一个项目为0, 其它项目为1, 则空间不足时, 它并不随其它项目缩小</li>
<li>注意: 该属性不支持负值, 即<code>flex-shrink: -1</code> 无效</li>
</ul>
</li>
</ul>
<p><img src="/archives/1155e3cf/bg2015071015.jpg" alt="flex-shrink"></p>
<h3 id="4-4-flex-basis"><a href="#4-4-flex-basis" class="headerlink" title="4.4.flex-basis"></a>4.4.flex-basis</h3><ul>
<li>定义了在计算分配主轴上剩余空间之前, 项目占据的主轴空间(main size)<ul>
<li>浏览器根据该属性,可以计算出主轴上是否还有剩余空间, 决定是否换行</li>
<li>默认值为<code>auto</code>, 即项目原来占据的空间大小</li>
</ul>
</li>
<li>CSS语法:</li>
</ul>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.item</span> &#123;</span><br><span class="line">  <span class="attribute">flex-basis</span>: length | auto; <span class="comment">/* default auto */</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>你可以设置与<code>height</code>或者<code>width</code>属性一样的绝对值,例如<code>500px</code>,则该项目占据固定的空间大小</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.item</span> &#123;</span><br><span class="line">  <span class="attribute">flex-basis</span>: <span class="number">500px</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="4-5-flex"><a href="#4-5-flex" class="headerlink" title="4.5.flex"></a>4.5.flex</h3><ul>
<li>flex属性是前面<code>flex-grow</code>,<code>flex-shrink</code>和<code>flex-basis</code>属性的简写</li>
<li>默认值: <code>0  1 auto</code>, 除第一个外, 其它二个可选</li>
<li>CSS语法:</li>
</ul>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.item</span> &#123;</span><br><span class="line">  <span class="attribute">flex</span>: none | [ &lt;<span class="string">'flex-grow'</span>&gt; &lt;<span class="string">'flex-shrink'</span>&gt;? || &lt;<span class="string">'flex-basis'</span>&gt; ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>由于该属性极其常用, 为了简化, Flex布局还为该属性设置了快捷值<ul>
<li><code>flex: auto</code>:  等价于<code>flex: 1 1 auto</code></li>
<li><code>flex: none</code>: 等价于<code>flex: 0 0 auto</code></li>
</ul>
</li>
<li>推荐优先使用flex属性, 由浏览器自动计算出其它属性的值</li>
</ul>
<h3 id="4-6-align-self"><a href="#4-6-align-self" class="headerlink" title="4.6.align-self"></a>4.6.align-self</h3><ul>
<li>该属性允许单个项目有与其它项目不一样的对齐方式, 可覆盖掉容器的<code>flex-items</code>属性</li>
<li>默认值: <code>auto</code>,表示继承父元素的<code>align-items</code>,如果没有父元素,则等价于<code>stretch</code></li>
<li>CSS语法:</li>
</ul>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.item</span> &#123;</span><br><span class="line">  <span class="attribute">align-self</span>: auto | flex-start | flex-end | center | baseline | stretch;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>示意图:</li>
</ul>
<p><img src="/archives/1155e3cf/bg2015071016.png" alt="align-self"></p>
<blockquote>
<p>资源来源于网络</p>
</blockquote>
]]></content>
      <categories>
        <category>编程</category>
        <category>前端</category>
      </categories>
      <tags>
        <tag>css布局</tag>
        <tag>flex布局</tag>
      </tags>
  </entry>
  <entry>
    <title>【工具】（七）：win10常用工具整理！！！</title>
    <url>/archives/b4695b9b.html</url>
    <content><![CDATA[<blockquote>
<p>如题，本文主要为博主对电脑上安装的一些软件，所做的备份整理。</p>
</blockquote>
<a id="more"></a>
<h1 id="一、分类"><a href="#一、分类" class="headerlink" title="一、分类"></a>一、分类</h1><ul>
<li><a href="#1-系统工具">系统工具</a></li>
<li><a href="#2-办公软件">办公软件</a></li>
<li><a href="#3-桌面管理">桌面管理</a></li>
<li><a href="#4-编程开发">编程开发</a></li>
<li><a href="#5-数据库工具">数据库相关</a></li>
<li><a href="#6-图片视频工具">图片视频工具</a></li>
<li><a href="#7-网络及下载工具">网络及下载工具</a></li>
<li><a href="#8-解压缩工具">解压缩工具</a></li>
<li><a href="#9-影音娱乐工具">影音娱乐工具</a></li>
</ul>
<h1 id="二、软件工具"><a href="#二、软件工具" class="headerlink" title="二、软件工具"></a>二、软件工具</h1><h2 id="1-系统工具"><a href="#1-系统工具" class="headerlink" title="1.系统工具"></a>1.系统工具</h2><h3 id="1-1-磁盘管理"><a href="#1-1-磁盘管理" class="headerlink" title="1.1. 磁盘管理"></a>1.1. 磁盘管理</h3><p><a href="http://www.upantool.com/qita/fenqu/12795.html" target="_blank" rel="noopener">PartAssist</a>：一款好用的磁盘分区管理工具。</p>
<div>
    <img src="https://img-blog.csdnimg.cn/20191004181710258.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MTU5OTg1OA==,size_16,color_FFFFFF,t_70">
</div>

<h3 id="1-2-修复、引导"><a href="#1-2-修复、引导" class="headerlink" title="1.2. 修复、引导"></a>1.2. 修复、引导</h3><p><a href="https://www.techspot.com/downloads/3112-easybcd.html" target="_blank" rel="noopener">EasyBCD</a>：一款常用的系统引导和修复工具。</p>
<div>
    <img src="https://img-blog.csdnimg.cn/20191004182210332.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MTU5OTg1OA==,size_16,color_FFFFFF,t_70">
</div>

<h3 id="1-3-虚拟机管理工具"><a href="#1-3-虚拟机管理工具" class="headerlink" title="1.3. 虚拟机管理工具"></a>1.3. 虚拟机管理工具</h3><blockquote>
<p>win10 自带的Hyper-V，和常用的WMware工具</p>
</blockquote>
<p>Hyper-V：win10（企业版、专业版、教育版）自带。</p>
<div>
    <img src="https://img-blog.csdnimg.cn/20191004182814952.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MTU5OTg1OA==,size_16,color_FFFFFF,t_70">
</div>


<p><a href="https://my.vmware.com/web/vmware/downloads" target="_blank" rel="noopener">WMware</a>：适用多种系统（也有破解版）。</p>
<div>
    <img src="https://img-blog.csdnimg.cn/20191004183430786.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MTU5OTg1OA==,size_16,color_FFFFFF,t_70">
</div>

<h3 id="1-4-文件传输"><a href="#1-4-文件传输" class="headerlink" title="1.4. 文件传输"></a>1.4. 文件传输</h3><p><a href="https://filezilla-project.org/download.php?type=client" target="_blank" rel="noopener">FileZilla</a>：是一种快速、可信赖的FTP客户端以及服务器端开放源代码程序。</p>
<div>
    <img src="https://img-blog.csdnimg.cn/20191004183804115.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MTU5OTg1OA==,size_16,color_FFFFFF,t_70">
</div>

<h3 id="1-5-启动盘制作"><a href="#1-5-启动盘制作" class="headerlink" title="1.5. 启动盘制作"></a>1.5. 启动盘制作</h3><ol>
<li><p>制作PE启动盘工具：<br><a href="http://www.wepe.com.cn/download.html" target="_blank" rel="noopener">微PE工具箱</a>、<a href="http://www.uqidong.com/download/" target="_blank" rel="noopener">U启动</a>、<a href="https://www.dabaicai.com/" target="_blank" rel="noopener">大白菜</a>、<a href="http://www.laomaotao.org/lmtwinpe/" target="_blank" rel="noopener">老毛桃</a>、<a href="http://www.onlinedown.net/soft/984199.htm" target="_blank" rel="noopener">AbsolutePE工具箱</a>、<a href="http://www.shendupan.com/" target="_blank" rel="noopener">深度</a>等等。</p>
</li>
<li><p>软碟通<br><a href="http://www.onlinedown.net/soft/614.htm" target="_blank" rel="noopener">UltraISO</a>：一个类似于WinISO的ISO文件编辑工具，可以用来制作启动光盘映像。</p>
<div>
 <img src="https://img-blog.csdnimg.cn/20191004185215425.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MTU5OTg1OA==,size_16,color_FFFFFF,t_70">
</div>
</li>
<li><p><a href="https://rufus.ie/zh_CN.html" target="_blank" rel="noopener">Rufus</a>：一个可以帮助格式化和创建可引导USB闪存盘的工具。</p>
</li>
</ol>
<div>
    <img src="https://img-blog.csdnimg.cn/20191004185433841.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MTU5OTg1OA==,size_16,color_FFFFFF,t_70">
</div>


<p><strong>&gt;&gt;&gt;</strong> <a href="#一、分类">回到分类</a></p>
<h2 id="2-办公软件"><a href="#2-办公软件" class="headerlink" title="2. 办公软件"></a>2. 办公软件</h2><blockquote>
<p>不用多说，首选就是全套office办公软件，如：word、Excel、PowerPoint、Outlook、OneNote等等。</p>
</blockquote>
<ul>
<li><p><a href="https://cidian.youdao.com/index.html" target="_blank" rel="noopener">有道翻译</a>：以前用的一个翻译软件，当然Office Word也有在线翻译功能。</p>
</li>
<li><p>VoiceTra：语音翻译，PC用的话，可以下一个安卓模拟器试试。</p>
</li>
<li><p><a href="http://iskysoft-pdf-editor.findmysoft.com/" target="_blank" rel="noopener">iSkysoft PDF Editor</a>：一款强大的全能PDF编辑软件。</p>
</li>
<li><p><a href="https://www.foxitsoftware.cn/downloads/" target="_blank" rel="noopener">福昕阅读器</a>：PDF阅读器，其他，可见：<a href="https://www.apowersoft.cn/windows-10-pdf-viewer.html" target="_blank" rel="noopener">更多</a>。</p>
</li>
<li><p><a href="https://www.xmind.cn/" target="_blank" rel="noopener">Xmind</a>：思维导图软件。</p>
</li>
<li><p><a href="https://everything.en.softonic.com/download" target="_blank" rel="noopener">Everything</a>：一款文件索引工具（包括了路径、大小、扩展名、类型、修改时间、创建时间、访问时间、属性等）。</p>
</li>
<li><p><a href="https://pc.qq.com/detail/2/detail_24422.html" target="_blank" rel="noopener">WizTree</a>：一款Windows 磁盘分析工具。</p>
</li>
<li><p><a href="https://www.rapidee.com/en/download" target="_blank" rel="noopener">rapidee</a>：环境变量修改器。</p>
</li>
</ul>
<p><strong>&gt;&gt;&gt;</strong> <a href="#一、分类">回到分类</a></p>
<h2 id="3-桌面管理"><a href="#3-桌面管理" class="headerlink" title="3. 桌面管理"></a>3. 桌面管理</h2><blockquote>
<p>其实很多应用管家都是有自带的桌面整理工具，可以到工具箱去找，如电脑管家、360、腾讯管家等等。</p>
</blockquote>
<ul>
<li><a href="https://rocketdock.en.softonic.com/" target="_blank" rel="noopener">RocketDock</a>：高度可定制的Mac风格桌面导航栏，搭配Mac OS X Leopard主题</li>
<li><a href="https://www.mydockfinder.com/" target="_blank" rel="noopener">MyDock和MyFinder</a>：两款极致模仿mac os系统桌面的工具</li>
<li><a href="https://rainmeter.cn/" target="_blank" rel="noopener">Rainmeter</a>：雨滴桌面，个性化桌面定制工具</li>
<li><a href="https://startisback.com/#download-tab" target="_blank" rel="noopener">StartIsBack</a>：更改win图标，透明度，和任务栏样式等等</li>
<li><a href="https://www.fhyx.hk/item/1345.html" target="_blank" rel="noopener">Wallpaper Engine</a>：steam壁纸软件，可以在 Windows 桌面上使用动态壁纸</li>
</ul>
<p><strong>&gt;&gt;&gt;</strong> <a href="#一、分类">回到分类</a></p>
<h2 id="4-编程开发"><a href="#4-编程开发" class="headerlink" title="4. 编程开发"></a>4. 编程开发</h2><h3 id="4-1-编辑器"><a href="#4-1-编辑器" class="headerlink" title="4.1. 编辑器"></a>4.1. 编辑器</h3><ol>
<li><a href="https://notepad-plus-plus.org/downloads/" target="_blank" rel="noopener">NotePad++</a>：一款好用的纯文本编辑器，也可用于多种语言脚本的开发。</li>
<li><a href="https://www.sublimetext.com/3" target="_blank" rel="noopener">sublime text 3</a>：应用比较广泛的文本编辑器，功能非常强大，程序员必备。</li>
<li><a href="https://www.editplus.com/download.html" target="_blank" rel="noopener">Editplus</a>：小巧但是功能强大的可处理文本、HTML和程序语言的Windows编辑器，你甚至可以通过设置用户工具将其作为C,Java,Php等等语言的一个简单的IDE。</li>
<li><a href="https://ivarptr.github.io/yu-writer.site/" target="_blank" rel="noopener">Yu Writer</a>：一款支持多平台的Markdown编辑软件。</li>
<li><a href="https://atom.io/" target="_blank" rel="noopener">Atom</a>：作用类似Vscode，常用于web开发，但也可以打造成多种语言开发的IDE工具。</li>
<li><a href="https://www.spyder-ide.org/#fh5co-download" target="_blank" rel="noopener">spyder</a> ：一个简单的集成开发环境（python），配合Anaconda，做科学分析以及爬虫</li>
<li><a href="http://eric-ide.python-projects.org/eric-download.html" target="_blank" rel="noopener">Eric6</a>：一款python的编辑器，配合PyQt5，多用来GUI编程</li>
</ol>
<h3 id="4-2-IDE"><a href="#4-2-IDE" class="headerlink" title="4.2. IDE"></a>4.2. IDE</h3><ol>
<li><a href="https://sourceforge.net/projects/orwelldevcpp/" target="_blank" rel="noopener">Dev-C++</a>：简单 开发C/C++的集成开发环境（IDE）。</li>
<li><a href="https://www.jetbrains.com/pycharm/download/" target="_blank" rel="noopener">Pycharm</a>：应用广泛的Python开发 IDE 工具。</li>
<li><a href="https://www.jetbrains.com/ruby/download/" target="_blank" rel="noopener">RubyMine</a>：常用的Ruby开发的 IDE 工具。</li>
<li><a href="https://www.jetbrains.com/phpstorm/download/" target="_blank" rel="noopener">PHPstorm</a>：用于PHP开发的 IDE 工具。</li>
<li><a href="https://www.jetbrains.com/webstorm/download/" target="_blank" rel="noopener">Webstorm</a>：web开发的 IDE 工具。</li>
<li><a href="https://code.visualstudio.com/" target="_blank" rel="noopener">Visual  Studio Code</a>：功能强大的IDE工具，适用于多种语言。</li>
</ol>
<h3 id="4-3-Docker"><a href="#4-3-Docker" class="headerlink" title="4.3. Docker"></a>4.3. Docker</h3><ul>
<li><a href="https://docs.docker.com/docker-for-windows/install/" target="_blank" rel="noopener">docker</a>：一个开源的应用容器引擎，使用镜像模拟多种开发环境。</li>
</ul>
<h3 id="4-4-集成环境"><a href="#4-4-集成环境" class="headerlink" title="4.4. 集成环境"></a>4.4. 集成环境</h3><ul>
<li><a href="https://www.xp.cn/download.html" target="_blank" rel="noopener">phpstudy</a>：PHP中文网开发的一款功能强大的php集成开发环境软件。</li>
<li><a href="https://sourceforge.net/projects/wampserver/" target="_blank" rel="noopener">wampserver</a>：同样是强大的php集成开发环境工具。</li>
</ul>
<h3 id="4-5-项目开发管理"><a href="#4-5-项目开发管理" class="headerlink" title="4.5. 项目开发管理"></a>4.5. 项目开发管理</h3><ul>
<li><a href="https://git-scm.com/downloads" target="_blank" rel="noopener">Git</a>：最常用的项目托管工具。</li>
<li><a href="https://www.gitkraken.com/download" target="_blank" rel="noopener">GitKraken</a>：冲突显示和解决工具。</li>
<li><a href="https://www.scootersoftware.com/download.php" target="_blank" rel="noopener">Beyond Compare</a>：差异对比工具。</li>
<li><a href="https://tortoisegit.org/download/" target="_blank" rel="noopener">TortoiseGit</a>：小乌龟，界面化一个仓库管理工具。</li>
</ul>
<h3 id="4-6-开发测试"><a href="#4-6-开发测试" class="headerlink" title="4.6. 开发测试"></a>4.6. 开发测试</h3><ul>
<li><a href="https://www.getpostman.com/downloads/" target="_blank" rel="noopener">postman</a>：用于模拟构造http请求的web工具。</li>
<li><a href="https://www.telerik.com/download/fiddler" target="_blank" rel="noopener">Fiddler</a>：抓包工具。</li>
<li><a href="https://www.wireshark.org/download.html" target="_blank" rel="noopener">WireShark</a>：抓包工具。</li>
<li><a href="https://airtest.netease.com/" target="_blank" rel="noopener">Airtest</a>：一款 UI 界面自动化测试工具。</li>
<li><a href="https://www.jb51.net/softs/621119.html#downintro2" target="_blank" rel="noopener">LoveString</a>：字符编码转换器。</li>
<li><a href="https://github.com/snail007/goproxy" target="_blank" rel="noopener">goproxy 代理</a>：网络代理工具，支持多种协议，支持 ssh 穿透和 kcp 协议。</li>
<li><a href="https://github.com/gaia-pipeline/gaia" target="_blank" rel="noopener">Gaia</a>：自动化运维平台，可以轻松有趣地以任何编程语言构建功能强大的管道。</li>
</ul>
<p><strong>&gt;&gt;&gt;</strong> <a href="#一、分类">回到分类</a></p>
<h2 id="5-数据库工具"><a href="#5-数据库工具" class="headerlink" title="5. 数据库工具"></a>5. 数据库工具</h2><ul>
<li><a href="https://dev.mysql.com/downloads/" target="_blank" rel="noopener">MySQL</a>：广泛应用的关系型数据库工具。</li>
<li><a href="https://www.mongodb.com/download-center" target="_blank" rel="noopener">MongoDB</a>：文档型（非关系型）数据库工具。</li>
<li><a href="https://redis.io/download" target="_blank" rel="noopener">Redis</a>： 基于内存亦可持久化的日志型、Key-Value数据库。</li>
<li><a href="https://www.sqlite.org/download.html" target="_blank" rel="noopener">SqLite</a>：一个进程内的库，实现了自给自足的、无服务器的、零配置的、事务性的 SQL 数据库引擎。</li>
<li><a href="https://www.postgresql.org/download/" target="_blank" rel="noopener">PostgreSQL</a>：开源的对象-关系数据库。</li>
<li><a href="http://www.formysql.com/xiazai.html" target="_blank" rel="noopener">Navicat</a>：数据库可视化工具。</li>
<li><a href="https://sqlitestudio.pl/index.rvt" target="_blank" rel="noopener">SQLiteStudio</a>：可视化sqlite数据库工具，Qt写的。</li>
<li><a href="https://www.dbkoda.com/" target="_blank" rel="noopener">dbkoda</a>：MongoDB可视化工具，本以为IDE的Mongo插件数据显示效果已经相当OK了，不得不说这款颜值👍</li>
</ul>
<p><strong>&gt;&gt;&gt;</strong> <a href="#一、分类">回到分类</a></p>
<h2 id="6-图片视频工具"><a href="#6-图片视频工具" class="headerlink" title="6. 图片视频工具"></a>6. 图片视频工具</h2><ul>
<li><a href="https://www.screentogif.com/downloads.html?l=zh_cn" target="_blank" rel="noopener">ScreenToGif</a>：git动图制作、录屏小工具。</li>
<li><a href="https://faststone-capture.en.softonic.com/" target="_blank" rel="noopener">Fastston capture</a>：可录像的滚动截图神器。</li>
<li><a href="http://www.pointofix.de/download.php" target="_blank" rel="noopener">pointofix</a>：屏幕画笔。</li>
<li><a href="https://zh.snipaste.com/download.html" target="_blank" rel="noopener">snipaste</a>：截图工具。</li>
<li><a href="https://github.com/lltcggie/waifu2x-caffe/releases" target="_blank" rel="noopener">waifu2x</a>：图片无损放大器，一位来自日本的开发者所开源的项目。</li>
<li><a href="https://www.bandicam.com/free-screen-recorder/" target="_blank" rel="noopener">Bandicam</a>：一款简单好用的录屏工具。</li>
<li><a href="https://pc.qq.com/detail/8/detail_22668.html" target="_blank" rel="noopener">EVCapture</a>：录屏工具。</li>
<li><a href="https://www.shencut.com/" target="_blank" rel="noopener">瞄影工厂</a>：gif、视频制作工具，类似会声会影。</li>
</ul>
<p><strong>&gt;&gt;&gt;</strong> <a href="#一、分类">回到分类</a></p>
<h2 id="7-网络及下载工具"><a href="#7-网络及下载工具" class="headerlink" title="7. 网络及下载工具"></a>7. 网络及下载工具</h2><ul>
<li><a href="http://pan.baidu.com/download" target="_blank" rel="noopener">百度网盘</a></li>
<li><a href="https://dl.pconline.com.cn/html_2/1/89/id=8342&pn=0.html" target="_blank" rel="noopener">比特精灵</a>：下载工具，速度比较快，可以用它代替迅雷。</li>
<li><a href="https://pan.baidu.com/share/init?surl=duOpC04gbP8KaTawNkNJWQ" target="_blank" rel="noopener">迅雷极速版</a>：提取码: j3dv（来源：<a href="https://www.zhihu.com/question/52853014/answer/134346825" target="_blank" rel="noopener">知乎</a>）</li>
<li><a href="http://www.carrotchou.blog/59.html" target="_blank" rel="noopener">IDM</a>：（Internet Download Manager）国外的一款多线程下载神器。</li>
<li><a href="http://www.pc6.com/softview/SoftView_52259.html" target="_blank" rel="noopener">冰点下载器</a>：无需积分也无需登录就可以自由下载百度和豆丁等文库。</li>
<li><a href="https://support.google.com/chrome/answer/95346?co=GENIE.Platform=Desktop&hl=en&oco=0" target="_blank" rel="noopener">chrome</a>：谷歌浏览器，对开发比较友好，功能强大。</li>
<li><a href="https://www.mozilla.org/en-US/firefox/all/#product-desktop-release" target="_blank" rel="noopener">Firefox</a>：火狐浏览器，也是比较好用的一款浏览器。</li>
</ul>
<p><strong>&gt;&gt;&gt;</strong> <a href="#一、分类">回到分类</a></p>
<h2 id="8-解压缩工具"><a href="#8-解压缩工具" class="headerlink" title="8. 解压缩工具"></a>8. 解压缩工具</h2><ul>
<li><a href="https://www.7-zip.org/download.html" target="_blank" rel="noopener">7-Zip</a></li>
<li><a href="https://www.rarlab.com/download.htm" target="_blank" rel="noopener">WinRAR</a></li>
<li><a href="http://haozip.2345.cc/" target="_blank" rel="noopener">好压</a></li>
<li><a href="https://www.bandisoft.com/bandizip/" target="_blank" rel="noopener">Bandizip</a>：网友推荐的一款多功能解压缩软件</li>
</ul>
<p><strong>&gt;&gt;&gt;</strong> <a href="#一、分类">回到分类</a></p>
<h2 id="9-影音娱乐工具"><a href="#9-影音娱乐工具" class="headerlink" title="9. 影音娱乐工具"></a>9. 影音娱乐工具</h2><ul>
<li><a href="https://music.163.com/#/download" target="_blank" rel="noopener">网易云音乐</a>：以前比较喜欢，现在好多资源缺失。</li>
<li><a href="https://y.qq.com/download/" target="_blank" rel="noopener">QQ音乐</a></li>
<li><a href="https://listen1.github.io/listen1/" target="_blank" rel="noopener">Listen 1</a>：一个比较全面的音乐播放器，可以搜索和播放来自网易云音乐，虾米，QQ音乐，酷狗音乐，酷我音乐网站的歌曲（同时也有Chrome插件版、Mac版…）。</li>
<li><a href="https://daumpotplayer.com/download/" target="_blank" rel="noopener">Potplayer</a>：一款无广告，功能强大的视频播放器。</li>
<li><a href="https://pd.youku.com/?spm=a2hpd.20022520.uerCenter.5!5~5~5~A" target="_blank" rel="noopener">优酷视频</a></li>
<li><a href="https://www.iqiyi.com/" target="_blank" rel="noopener">爱奇艺</a></li>
<li><a href="http://v.qq.com/download.html" target="_blank" rel="noopener">腾讯视频</a></li>
</ul>
<p><strong>&gt;&gt;&gt;</strong> <a href="#一、分类">回到分类</a></p>
<hr>
<blockquote>
<p>原文地址： CSDN博客 - <a href="https://blog.csdn.net/weixin_41599858/article/details/102084565" target="_blank" rel="noopener">win10常用工具整理！</a></p>
</blockquote>
]]></content>
      <categories>
        <category>工具</category>
        <category>Win10</category>
      </categories>
      <tags>
        <tag>常用工具</tag>
      </tags>
  </entry>
  <entry>
    <title>【工具】（一）：关于Sublime Text 3，主题插件Boxy Theme安装问题，已解决！</title>
    <url>/archives/f81089b2.html</url>
    <content><![CDATA[<p>由于sublime更新后，新版下架了Boxy主题（ps：这应该是最舒服的一款主题样式了），</p>
<p><del>原链接失效：<a href="https://github.com/ihodev/sublime-boxy" target="_blank" rel="noopener">https://github.com/ihodev/sublime-boxy</a></del></p>
<p><strong>这真是不幸的消息！网上找了好久，终于解决了。。。</strong></p>
<a id="more"></a>

<p>参考博文：<a href="https://blog.csdn.net/qq_40258748/article/details/89362692" target="_blank" rel="noopener">https://blog.csdn.net/qq_40258748/article/details/89362692</a></p>
<p><strong><em>下面是解决方法：（仅供参考）</em></strong></p>
<h2 id="1-步骤一：修改插件安装位置"><a href="#1-步骤一：修改插件安装位置" class="headerlink" title="1.步骤一：修改插件安装位置"></a>1.步骤一：修改插件安装位置</h2><pre><code>（原目录：C:\Users\用户名\AppData\Roaming\Sublime Text 3\）

  关闭sublime程序，删掉原目录，

  在自定义sublime的安装目录下，新建Data文件夹，重启sublime，

  此时会发现，Data目录下：</code></pre><p><img src="https://img-blog.csdnimg.cn/2019091722383619.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MTU5OTg1OA==,size_16,color_FFFFFF,t_70" alt></p>
<h2 id="2-步骤二：重新安装Package-Control"><a href="#2-步骤二：重新安装Package-Control" class="headerlink" title="2.步骤二：重新安装Package Control"></a>2.步骤二：重新安装Package Control</h2><p>过程中如果出现error，可以尝试修改配置（解决方案，网上都能搜到。。。）</p>
<blockquote>
<p>打开 preferences -&gt;Package settings-&gt;Package Control -&gt;Settings - User，添加以下配置：</p>
</blockquote>
<figure class="highlight cs"><table><tr><td class="code"><pre><span class="line"><span class="string">"channels"</span>:</span><br><span class="line">    [<span class="meta"></span></span><br><span class="line"><span class="meta">        <span class="meta-string">"http://cst.stu.126.net/u/json/cms/channel_v3.json"</span>,</span></span><br><span class="line"><span class="meta">        <span class="meta-string">"https://packagecontrol.io/channel_v3.json"</span>,</span></span><br><span class="line"><span class="meta">        <span class="meta-string">"https://erhan.in/channel_v3.json"</span></span></span><br><span class="line"><span class="meta">    </span>],</span><br></pre></td></tr></table></figure>
<p>或者自己下载channel_v3.json，配置信息中改成该文件路径；</p>
<h2 id="3-步骤三：安装A-file-icon插件，可以配合Boxy主题，看起来超爽！"><a href="#3-步骤三：安装A-file-icon插件，可以配合Boxy主题，看起来超爽！" class="headerlink" title="3.步骤三：安装A file icon插件，可以配合Boxy主题，看起来超爽！"></a>3.步骤三：安装<a href="https://packagecontrol.io/packages/A%20File%20Icon" target="_blank" rel="noopener">A file icon</a>插件，可以配合Boxy主题，看起来超爽！</h2><blockquote>
<p><code>Ctrl + shift + p</code>，找到<code>package control：install...</code>，回车，输入 <code>A file icon</code>插件名，安装，</p>
</blockquote>
<p>另外推荐几款常用的高效插件：</p>
<ul>
<li><a href="https://packagecontrol.io/packages/Emmet" target="_blank" rel="noopener">Emmet</a>: 前端神器；</li>
<li><a href="https://packagecontrol.io/packages/DocBlockr" target="_blank" rel="noopener">DocBlockr</a>: 包含Javascript, PHP, CoffeeScript, Actionscript, C &amp; C++等插件；</li>
<li><a href="https://packagecontrol.io/packages/Git" target="_blank" rel="noopener">Git</a>: 代码跟踪；</li>
<li><a href="https://packagecontrol.io/packages/Terminal" target="_blank" rel="noopener">Terminal</a>: 终端工具；</li>
<li><a href="https://packagecontrol.io/packages/View%20In%20Browser" target="_blank" rel="noopener">View in Browser</a>: 浏览器显示；<br>。。。</li>
</ul>
<h2 id="4-步骤四：配置Boxy-Theme主题插件（重点）"><a href="#4-步骤四：配置Boxy-Theme主题插件（重点）" class="headerlink" title="4.步骤四：配置Boxy Theme主题插件（重点）"></a>4.步骤四：配置Boxy Theme主题插件（重点）</h2><h3 id="1）GitHub下载：sublime-boxy-theme-，可以自己到开源库搜；"><a href="#1）GitHub下载：sublime-boxy-theme-，可以自己到开源库搜；" class="headerlink" title="1）GitHub下载：sublime-boxy-theme ，可以自己到开源库搜；"></a>1）GitHub下载：<a href="https://github.com/bofm/sublime-boxy-theme" target="_blank" rel="noopener">sublime-boxy-theme</a> ，可以自己到开源库搜；</h3><h3 id="2）下载压缩包"><a href="#2）下载压缩包" class="headerlink" title="2）下载压缩包"></a>2）下载压缩包</h3><p>  网盘链接：<a href="https://pan.baidu.com/s/1SWNKD75Gm0IVzMI8_8589w" target="_blank" rel="noopener">压缩包</a><br>  提取码：knxx<br> <font color="rgb(30, 144, 255)">将下载的压缩包（boxy-theme-backup-master.zip）解压</font>，得到：</p>
<p><img src="https://img-blog.csdnimg.cn/20190917232402189.png" alt></p>
<p>将红框中解压得到的文件夹和文件一起复制到 sublime安装目录下的 F:\Sublime Text 3\Packages（<font color="rgb(250, 235, 215)">这里换成自己的安装目录</font>）文件夹下（<strong>注意</strong>：<font color="rgb(100, 149, 237)">这里不是Data目录下的Packages，Data目录与该Packages目录同级</font>）<br>重启sublime，等一会儿，OK！</p>
<p>效果图：</p>
<p><img src="https://img-blog.csdnimg.cn/20190917233107358.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MTU5OTg1OA==,size_16,color_FFFFFF,t_70" alt></p>
<p>同类型的主题插件还有不少：其中移植自Atom的 <a href="https://packagecontrol.io/packages/Seti_UI" target="_blank" rel="noopener">Seti_UI</a> 插件也不错，感兴趣的也可以去试试。</p>
<div align="left" style="height: auto;margin: auto;">
    <pre style="white-space: all;background-color: rgb(255, 255, 255);opacity: 0.5;color: black;font-weight: bold;">
         .----.
      _.'__    `. 
  .--(#)(##)---/#\
.' @          /###\
:         ,   #####
 `-..__.-' _.-\###/  
       `;_:    `"'
     .'"""""`. 
    /,  Boxy  ,\
   //  COOL!   \\
   `-._______.-'
   ___`. | .'___ 
  (______|______)         
    </pre>

</div>


<blockquote>
<p>原文地址： CSDN博客 - <a href="https://blog.csdn.net/weixin_41599858/article/details/100942288" target="_blank" rel="noopener">主题插件Boxy Theme安装</a></p>
</blockquote>
]]></content>
      <categories>
        <category>工具</category>
        <category>Sublime</category>
      </categories>
      <tags>
        <tag>插件</tag>
        <tag>Boxy</tag>
      </tags>
  </entry>
  <entry>
    <title>【工具】（三）：关于VS Code修改插件位置问题</title>
    <url>/archives/eabdca65.html</url>
    <content><![CDATA[<p>由于VSCode插件默认存放位置在C盘下，个人不是很喜欢，因为太过吃C盘内存，位置不易记住，不方便管理，</p>
<p>（ps：这些都是借口，博主控制欲极强！）</p>
<div>
    <img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly9xcS55aDMxLmNvbS90cC9xdy8yMDEzMDYwNTEyMjUwMzI0NTQuZ2lm">
</div>

<a id="more"></a>

<p>网上也查了一些资料，最后总结如下：</p>
<h2 id="1-安装-vscode："><a href="#1-安装-vscode：" class="headerlink" title="1.安装 vscode："></a>1.安装 vscode：</h2><p>存到目标目录</p>
<blockquote>
<p>如： F:\Vscode\Microsoft VS Code；</p>
</blockquote>
<h2 id="2-cmd修改插件安装位置："><a href="#2-cmd修改插件安装位置：" class="headerlink" title="2.cmd修改插件安装位置："></a>2.cmd修改插件安装位置：</h2><p>在安装目录打开dos命令窗口，输入：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">code --extensions-dir 目标文件夹</span><br></pre></td></tr></table></figure>
<p>回车，此时修改插件位置完成；<br>但若快捷键打开vscode，会发现，并未生效。</p>
<h2 id="3-继续：修改快捷键目标参数："><a href="#3-继续：修改快捷键目标参数：" class="headerlink" title="3.继续：修改快捷键目标参数："></a>3.继续：修改快捷键目标参数：</h2><p>打开快捷键属性，目标输入框修改为：</p>
<figure class="highlight taggerscript"><table><tr><td class="code"><pre><span class="line">"F:<span class="symbol">\V</span>scode<span class="symbol">\M</span>icrosoft VS Code<span class="symbol">\C</span>ode.exe" --extensions-dir  "F:<span class="symbol">\V</span>scode<span class="symbol">\M</span>icrosoft VS Code<span class="symbol">\p</span>lugins"</span><br></pre></td></tr></table></figure>
<p>（注意：这里填写自己的vscode安装目录和插件目录，前者是博主的vscode目录，后者是插件目录）</p>
<div align="center">
    <img src="https://img-blog.csdnimg.cn/20190921141916377.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MTU5OTg1OA==,size_16,color_FFFFFF,t_70">
</div>   

<p>这里快捷键参数修改完成，快捷键打开方式下，已生效；<br>但是，如果你用鼠标右键菜单打开，会发现，这种方式打开vscode，配置并没有生效；</p>
<h2 id="4-继续：配置鼠标右键菜单："><a href="#4-继续：配置鼠标右键菜单：" class="headerlink" title="4.继续：配置鼠标右键菜单："></a>4.继续：配置鼠标右键菜单：</h2><h3 id="4-1-原来就有右键选项"><a href="#4-1-原来就有右键选项" class="headerlink" title="4.1.原来就有右键选项"></a>4.1.原来就有右键选项</h3><p>修改command下的参数：</p>
<h4 id="4-1-1-win-R打开运行窗口"><a href="#4-1-1-win-R打开运行窗口" class="headerlink" title="4.1.1.win+R打开运行窗口"></a>4.1.1.<code>win+R</code>打开运行窗口</h4><p>输入：<code>regedit</code>，回车，打开注册表；</p>
<h4 id="4-1-2-搜索VSCode"><a href="#4-1-2-搜索VSCode" class="headerlink" title="4.1.2.搜索VSCode"></a>4.1.2.搜索VSCode</h4><p>编辑 -&gt; 查找，搜索VSCode，<br>或者直接搜索：<code>计算机\HKEY_CLASSES_ROOT\*\shell\VSCode\command</code>，</p>
<div align="center">
    <img src="https://img-blog.csdnimg.cn/20190921143338111.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MTU5OTg1OA==,size_16,color_FFFFFF,t_70">
</div>

<h4 id="4-1-3-修改数据"><a href="#4-1-3-修改数据" class="headerlink" title="4.1.3.修改数据"></a>4.1.3.修改数据</h4><p>将值修改为：</p>
<figure class="highlight taggerscript"><table><tr><td class="code"><pre><span class="line">"F:<span class="symbol">\V</span>scode<span class="symbol">\M</span>icrosoft VS Code<span class="symbol">\C</span>ode.exe" --extensions-dir  "F:<span class="symbol">\V</span>scode<span class="symbol">\M</span>icrosoft VS Code<span class="symbol">\p</span>lugins" "<span class="variable">%1"</span></span><br></pre></td></tr></table></figure>

<p>（同样，以你自己电脑目录为准）</p>
<div align="center">
    <img src="https://img-blog.csdnimg.cn/20190921143632281.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MTU5OTg1OA==,size_16,color_FFFFFF,t_70">
</div>

<p>此时，右键菜单配置完成，已生效；</p>
<h3 id="4-2-之前没有右键菜单选项"><a href="#4-2-之前没有右键菜单选项" class="headerlink" title="4.2.之前没有右键菜单选项"></a>4.2.之前没有右键菜单选项</h3><p>添加选项</p>
<h4 id="4-2-1-找到shell"><a href="#4-2-1-找到shell" class="headerlink" title="4.2.1.找到shell"></a>4.2.1.找到shell</h4><p>依次点开HKEY_CLASSES_ROOT —&gt; * —&gt; shell，</p>
<h4 id="4-2-2-新建command项"><a href="#4-2-2-新建command项" class="headerlink" title="4.2.2.新建command项"></a>4.2.2.新建command项</h4><p>右键shell，新建 —&gt;项，会出现一个让你命名的文件夹，写上你要添加的文件名，<br>再右键命名好的文件夹，新建 —&gt; 项。命名为command。</p>
<div align="center">
    <img src="https://img-blog.csdnimg.cn/20190921144035827.png">
</div>                           

<h4 id="4-2-3-填写参数"><a href="#4-2-3-填写参数" class="headerlink" title="4.2.3.填写参数"></a>4.2.3.填写参数</h4><p>具体参数可模仿已有项，与上面一样：</p>
<figure class="highlight taggerscript"><table><tr><td class="code"><pre><span class="line">"F:<span class="symbol">\V</span>scode<span class="symbol">\M</span>icrosoft VS Code<span class="symbol">\C</span>ode.exe" --extensions-dir  "F:<span class="symbol">\V</span>scode<span class="symbol">\M</span>icrosoft VS Code<span class="symbol">\p</span>lugins" "<span class="variable">%1"</span></span><br></pre></td></tr></table></figure>
<p>（以你自己电脑目录为准）</p>
<p>OK，大功告成！现在可以玩转你自己的vscode啦！！！</p>
<blockquote>
<p>原文地址： CSDN博客 - <a href="https://blog.csdn.net/weixin_41599858/article/details/101106083" target="_blank" rel="noopener">vscode插件位置修改</a></p>
</blockquote>
]]></content>
      <categories>
        <category>工具</category>
        <category>VSCode</category>
      </categories>
      <tags>
        <tag>插件</tag>
      </tags>
  </entry>
  <entry>
    <title>【工具】（二）：关于sublime使用的一些插件推荐！！！</title>
    <url>/archives/b27922f9.html</url>
    <content><![CDATA[<p>Sublime Text 3 插件推荐!</p>
<a id="more"></a>

<h2 id="1-A-File-Icon"><a href="#1-A-File-Icon" class="headerlink" title="1.A File Icon"></a>1.<a href="https://packagecontrol.io/packages/A%20File%20Icon" target="_blank" rel="noopener">A File Icon</a></h2><blockquote>
<p>这是一个字体图标插件。</p>
</blockquote>
<p>效果图如下：</p>
<div align="center">
    <img src="https://img-blog.csdnimg.cn/20190922140115133.png" width="25%">
</div>


<h2 id="2-Boxy-Theme"><a href="#2-Boxy-Theme" class="headerlink" title="2.Boxy Theme"></a>2.<a href="https://packagecontrol.io/packages/Boxy%20Theme" target="_blank" rel="noopener">Boxy Theme</a></h2><blockquote>
<p>这是一款相当舒适的主题插件，现在可能package control install 安装不了了，需要自己手动下载安装，不会的话可以参照我之前写的 <a href="https://blog.csdn.net/weixin_41599858/article/details/100942288" target="_blank" rel="noopener">安装boxy插件的博客</a></p>
</blockquote>
<p>安装完成后，可以选择想要的效果：<br><img src="https://img-blog.csdnimg.cn/2019092214073999.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MTU5OTg1OA==,size_16,color_FFFFFF,t_70" alt></p>
<h2 id="3-AutoFileName"><a href="#3-AutoFileName" class="headerlink" title="3.AutoFileName"></a>3.<a href="https://packagecontrol.io/packages/AutoFileName" target="_blank" rel="noopener">AutoFileName</a></h2><blockquote>
<p>这是一款可以自动识别补全文件路径的插件，可以为开发提供高效的辅助。</p>
</blockquote>
<p>效果图如下：<br><img src="https://img-blog.csdnimg.cn/20190928133142551.gif" alt></p>
<h2 id="4-SublimeLinter"><a href="#4-SublimeLinter" class="headerlink" title="4.SublimeLinter"></a>4.<a href="https://packagecontrol.io/packages/SublimeLinter" target="_blank" rel="noopener">SublimeLinter</a></h2><blockquote>
<p>语法检查插件。</p>
</blockquote>
<h2 id="5-LiveReload"><a href="#5-LiveReload" class="headerlink" title="5.LiveReload"></a>5.<a href="https://packagecontrol.io/packages/LiveReload" target="_blank" rel="noopener">LiveReload</a></h2><blockquote>
<p>自动刷新，如：HTML或php代码修改后，网页会自动刷新。</p>
</blockquote>
<h2 id="6-SublimeTmpl"><a href="#6-SublimeTmpl" class="headerlink" title="6.SublimeTmpl"></a>6.<a href="https://packagecontrol.io/packages/SublimeTmpl" target="_blank" rel="noopener">SublimeTmpl</a></h2><blockquote>
<p>通过SublimeTmpl可以新建一个自定义模板的文件，在file子菜单中找到new file (SublimeTmpl)这一项，你可以选择想要新建的模板文件。</p>
</blockquote>
<p>操作如下：</p>
<div align="center">
    <img src="https://img-blog.csdnimg.cn/20190928141353474.gif">
</div>

<blockquote>
<p>可以参考：<a href="https://xhl.me/archives/sublime-template-engine-sublimetmpl/" target="_blank" rel="noopener">添加模板</a></p>
</blockquote>
<h2 id="7-FileDiffs"><a href="#7-FileDiffs" class="headerlink" title="7.FileDiffs"></a>7.<a href="https://packagecontrol.io/packages/FileDiffs" target="_blank" rel="noopener">FileDiffs</a></h2><blockquote>
<p>文件差异对比插件，有点类似Beyong差异比对软件和gitkraken代码冲突展示的作用。</p>
</blockquote>
<p>效果如下：<br><img src="https://img-blog.csdnimg.cn/20190928142837100.gif" alt></p>
<h2 id="8-ColorPicker"><a href="#8-ColorPicker" class="headerlink" title="8.ColorPicker"></a>8.<a href="https://packagecontrol.io/packages/ColorPicker" target="_blank" rel="noopener">ColorPicker</a></h2><blockquote>
<p>ColorPicker提供了一个颜色面板，可以调色，选择不同颜色，在前端样式中，可以起到很好的辅助效果（快捷键：<code>Ctrl + Shift + C</code>）。</p>
</blockquote>
<p>画面展示：<br><img src="https://img-blog.csdnimg.cn/20190928153745856.gif" alt></p>
<h2 id="9-HTML-CSS-JS-Prettify"><a href="#9-HTML-CSS-JS-Prettify" class="headerlink" title="9.HTML-CSS-JS Prettify"></a>9.<a href="https://packagecontrol.io/packages/HTML-CSS-JS%20Prettify" target="_blank" rel="noopener">HTML-CSS-JS Prettify</a></h2><blockquote>
<p>代码个格式化插件，一般对于HTML、css、JavaScript文件，如果有大量代码，不想手动调格式的话，可以按下<code>Ctrl + Shift + h</code> 一键格式化。</p>
</blockquote>
<p>效果如下：<br><img src="https://img-blog.csdnimg.cn/20190928161506969.gif" alt></p>
<h2 id="10-Emmet"><a href="#10-Emmet" class="headerlink" title="10.Emmet"></a>10.<a href="https://packagecontrol.io/packages/Emmet" target="_blank" rel="noopener">Emmet</a></h2><blockquote>
<p>前端神器，可以快速批量生成代码。</p>
</blockquote>
<p>使用效果如下：<br><img src="https://img-blog.csdnimg.cn/20190928154658908.gif" alt></p>
<h2 id="11-BracketHighlighter"><a href="#11-BracketHighlighter" class="headerlink" title="11.BracketHighlighter"></a>11.<a href="https://packagecontrol.io/packages/BracketHighlighter" target="_blank" rel="noopener">BracketHighlighter</a></h2><blockquote>
<p>匹配标签/括号等符号，然后高亮显示，例如：{ }、[ ]、” “ 等符号的对应高亮显示，方便区分代码片段，类似vscode的中的Bracket Pair Colorizer插件。</p>
</blockquote>
<p>图示如下：<br><img src="https://img-blog.csdnimg.cn/20190928170700116.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MTU5OTg1OA==,size_12,color_FFFFFF,t_70" alt> </p>
<h2 id="12-Markdown-Editing"><a href="#12-Markdown-Editing" class="headerlink" title="12.Markdown Editing"></a>12.<a href="https://packagecontrol.io/packages/MarkdownEditing" target="_blank" rel="noopener">Markdown Editing</a></h2><blockquote>
<p>Markdown 编辑时的语法高亮插件，可以配合 <code>Markdown Preview</code> 插件，在浏览器预览。</p>
</blockquote>
<h2 id="13-SublimeREPL"><a href="#13-SublimeREPL" class="headerlink" title="13.SublimeREPL"></a>13.<a href="https://packagecontrol.io/packages/SublimeREPL" target="_blank" rel="noopener">SublimeREPL</a></h2><blockquote>
<p>可以让使用者在Sublime Text 里面运行解释器，<br>如：python/PHP/ruby/shell 等等</p>
</blockquote>
<p>展示效果如下：<br><img src="https://img-blog.csdnimg.cn/20190928182211517.gif" alt></p>
<h2 id="14-Open-In-Browser"><a href="#14-Open-In-Browser" class="headerlink" title="14.Open In Browser"></a>14.<a href="https://packagecontrol.io/packages/Open%20In%20Browser" target="_blank" rel="noopener">Open In Browser</a></h2><blockquote>
<p>在浏览器打开，主要对前端 HTML 文件进行预览和效果显示。</p>
</blockquote>
<h2 id="15-GitGutter-Git"><a href="#15-GitGutter-Git" class="headerlink" title="15.GitGutter + Git"></a>15.<a href="https://packagecontrol.io/packages/GitGutter" target="_blank" rel="noopener">GitGutter</a> + <a href="https://packagecontrol.io/packages/Git" target="_blank" rel="noopener">Git</a></h2><blockquote>
<p>代码管理插件.</p>
</blockquote>
<h2 id="16-CTags"><a href="#16-CTags" class="headerlink" title="16.CTags"></a>16.<a href="https://packagecontrol.io/packages/CTags" target="_blank" rel="noopener">CTags</a></h2><blockquote>
<p>函数跳转，任意跳转到代码定义处，可以设置项目路径。</p>
</blockquote>
<p>注意：需要下载ctags的exe文件，并配置路径</p>
<blockquote>
<p>CTags使用参考：<a href="https://www.zhihu.com/question/42132354" target="_blank" rel="noopener">知乎</a> 和 <a href="https://www.jianshu.com/p/2ca47bbae1cb" target="_blank" rel="noopener">简书</a></p>
</blockquote>
<blockquote>
<p>原文地址： CSDN博客 - <a href="https://blog.csdn.net/weixin_41599858/article/details/101154763" target="_blank" rel="noopener">Sublime Text 3 插件推荐!</a></p>
</blockquote>
]]></content>
      <categories>
        <category>工具</category>
        <category>Sublime</category>
      </categories>
      <tags>
        <tag>插件</tag>
      </tags>
  </entry>
  <entry>
    <title>Python（十）- tkinter案例(1): WiFi连接器!</title>
    <url>/archives/6eec6899.html</url>
    <content><![CDATA[<p>前段时间，在脉脉上看到一篇关于WiFi连接的python实现，感觉挺有意思的。</p>
<a id="more"></a>
<p>具体网址忘了，大概思路是利用 <code>tkinter</code> 和 <code>pywifi</code> 这两个库，搭建一个WiFi界面，通过密码文件暴力破解，并不是那种可以通过抓取空中报文，解析用户密码之类的，当然，如果有人有兴趣的话，可以去试一下。</p>
<h2 id="1-目标"><a href="#1-目标" class="headerlink" title="1.目标"></a>1.目标</h2><ul>
<li>以界面显示程序，提供连接操作；</li>
<li>展示附近 WiFi 信号列表，可选择；</li>
<li>用户可自定义密码文件；</li>
<li>程序提供破解器（即自动生成随机密码）- 本文暂不考虑（其实意义不大），有兴趣的可以试试；</li>
<li>连接测试，显示结果（账号密码）</li>
</ul>
<h2 id="2-思路"><a href="#2-思路" class="headerlink" title="2.思路"></a>2.思路</h2><ul>
<li>利用 <code>tkinter</code> 和 <code>pywifi</code> 这两个库，搭建一个WiFi界面；</li>
<li>扫描附近 wifi 信号；</li>
<li>密码文件暴力破解（这里方式多样化，不固定），也可以动态创建一个密码迭代器；</li>
<li>这里可以设定时间或次数之类的；</li>
<li>对wifi和密码进行匹配测试</li>
</ul>
<h2 id="3-实现"><a href="#3-实现" class="headerlink" title="3.实现"></a>3.实现</h2><ul>
<li>初始化与大体框架</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">from</span> tkinter <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> tkinter <span class="keyword">import</span> ttk</span><br><span class="line"><span class="keyword">import</span> pywifi</span><br><span class="line"><span class="keyword">from</span> pywifi <span class="keyword">import</span> const</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">import</span> tkinter.filedialog</span><br><span class="line"><span class="keyword">import</span> tkinter.messagebox</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">WiFi_GUI</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, init_window_name)</span>:</span></span><br><span class="line">        self.init_window_name = init_window_name</span><br><span class="line">        <span class="comment"># 密码文件路径</span></span><br><span class="line">        self.get_value = StringVar()</span><br><span class="line">        <span class="comment"># 获取破解wifi账号</span></span><br><span class="line">        self.get_wifi_value = StringVar()</span><br><span class="line">        <span class="comment"># 获取wifi密码</span></span><br><span class="line">        self.get_wifimm_value = StringVar()</span><br><span class="line">        self.wifi = pywifi.PyWiFi()</span><br><span class="line">        <span class="comment"># 抓取网卡接口</span></span><br><span class="line">        self.iface = self.wifi.interfaces()[<span class="number">0</span>]</span><br><span class="line">        <span class="comment"># 抓取第一个无线网卡</span></span><br><span class="line">        self.iface.disconnect()  <span class="comment"># 测试链接断开所有链接</span></span><br><span class="line">        time.sleep(<span class="number">1</span>)  <span class="comment"># 休眠1秒#测试网卡是否属于断开状态</span></span><br><span class="line">        <span class="keyword">assert</span> self.iface.status() <span class="keyword">in</span> [</span><br><span class="line">            const.IFACE_DISCONNECTED, const.IFACE_INACTIVE]</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__str__</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> <span class="string">'(WIFI:%s,%s)'</span> % (self.wifi, self.iface.name())</span><br></pre></td></tr></table></figure>

<ul>
<li>设置窗口</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">WiFi_GUI</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">set_init_window</span><span class="params">(self)</span>:</span></span><br><span class="line">        self.init_window_name.title(<span class="string">"WIFI破解工具"</span>)</span><br><span class="line">        self.init_window_name.geometry(<span class="string">'+500+200'</span>)</span><br><span class="line">        labelframe = LabelFrame(width=<span class="number">400</span>, height=<span class="number">200</span>, text=<span class="string">"配置"</span>)</span><br><span class="line">        labelframe.grid(column=<span class="number">0</span>, row=<span class="number">0</span>, padx=<span class="number">10</span>, pady=<span class="number">10</span>)</span><br><span class="line">        self.search = Button(labelframe, text=<span class="string">"搜索附近WiFi"</span>,</span><br><span class="line">                             command=self.scans_wifi_list).grid(column=<span class="number">0</span>, row=<span class="number">0</span>)</span><br><span class="line">        self.pojie = Button(labelframe, text=<span class="string">"开始破解"</span>,</span><br><span class="line">                            command=self.readPassWord).grid(column=<span class="number">1</span>, row=<span class="number">0</span>)</span><br><span class="line">        self.label = Label(labelframe, text=<span class="string">"目录路径："</span>).grid(column=<span class="number">0</span>, row=<span class="number">1</span>)</span><br><span class="line">        self.path = Entry(labelframe, width=<span class="number">12</span>,</span><br><span class="line">                          textvariable=self.get_value).grid(column=<span class="number">1</span>, row=<span class="number">1</span>)</span><br><span class="line">        self.file = Button(labelframe, text=<span class="string">"添加密码文件目录"</span>,</span><br><span class="line">                           command=self.add_mm_file).grid(column=<span class="number">2</span>, row=<span class="number">1</span>)</span><br><span class="line">        self.wifi_text = Label(</span><br><span class="line">            labelframe, text=<span class="string">"WiFi账号："</span>).grid(column=<span class="number">0</span>, row=<span class="number">2</span>)</span><br><span class="line">        self.wifi_input = Entry(</span><br><span class="line">            labelframe, width=<span class="number">12</span>, textvariable=self.get_wifi_value).grid(column=<span class="number">1</span>, row=<span class="number">2</span>)</span><br><span class="line">        self.wifi_mm_text = Label(</span><br><span class="line">            labelframe, text=<span class="string">"WiFi密码："</span>).grid(column=<span class="number">2</span>, row=<span class="number">2</span>)</span><br><span class="line">        self.wifi_mm_input = Entry(labelframe, width=<span class="number">10</span>, textvariable=self.get_wifimm_value).grid(</span><br><span class="line">            column=<span class="number">3</span>, row=<span class="number">2</span>, sticky=W)</span><br><span class="line">        self.wifi_labelframe = LabelFrame(text=<span class="string">"wifi列表"</span>)</span><br><span class="line">        self.wifi_labelframe.grid(column=<span class="number">0</span>, row=<span class="number">3</span>, columnspan=<span class="number">4</span>, sticky=NSEW)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 定义树形结构与滚动条</span></span><br><span class="line">        self.wifi_tree = ttk.Treeview(</span><br><span class="line">            self.wifi_labelframe, show=<span class="string">"headings"</span>, columns=(<span class="string">"a"</span>, <span class="string">"b"</span>, <span class="string">"c"</span>, <span class="string">"d"</span>))</span><br><span class="line">        self.vbar = ttk.Scrollbar(</span><br><span class="line">            self.wifi_labelframe, orient=VERTICAL, command=self.wifi_tree.yview)</span><br><span class="line">        self.wifi_tree.configure(yscrollcommand=self.vbar.set)</span><br><span class="line">        <span class="comment"># 表格的标题</span></span><br><span class="line">        self.wifi_tree.column(<span class="string">"a"</span>, width=<span class="number">50</span>, anchor=<span class="string">"center"</span>)</span><br><span class="line">        self.wifi_tree.column(<span class="string">"b"</span>, width=<span class="number">100</span>, anchor=<span class="string">"center"</span>)</span><br><span class="line">        self.wifi_tree.column(<span class="string">"c"</span>, width=<span class="number">100</span>, anchor=<span class="string">"center"</span>)</span><br><span class="line">        self.wifi_tree.column(<span class="string">"d"</span>, width=<span class="number">100</span>, anchor=<span class="string">"center"</span>)</span><br><span class="line">        self.wifi_tree.heading(<span class="string">"a"</span>, text=<span class="string">"WiFiID"</span>)</span><br><span class="line">        self.wifi_tree.heading(<span class="string">"b"</span>, text=<span class="string">"SSID"</span>)</span><br><span class="line">        self.wifi_tree.heading(<span class="string">"c"</span>, text=<span class="string">"BSSID"</span>)</span><br><span class="line">        self.wifi_tree.heading(<span class="string">"d"</span>, text=<span class="string">"signal"</span>)</span><br><span class="line">        self.wifi_tree.grid(row=<span class="number">4</span>, column=<span class="number">0</span>, sticky=NSEW)</span><br><span class="line">        self.wifi_tree.bind(<span class="string">"&lt;Double-1&gt;"</span>, self.onDBClick)</span><br><span class="line">        self.vbar.grid(row=<span class="number">4</span>, column=<span class="number">1</span>, sticky=NS)</span><br></pre></td></tr></table></figure>

<ul>
<li>搜索/显示wifi</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">WiFi_GUI</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="comment"># 搜索wifi</span></span><br><span class="line">    <span class="comment"># cmd /k C:\python\python36\python.exe "$(FULL_CURRENT_PATH)" &amp; PAUSE &amp; EXIT</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">scans_wifi_list</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="comment"># 扫描周围wifi列表#开始扫描</span></span><br><span class="line">        print(<span class="string">"^_^ 开始扫描附近wifi..."</span>)</span><br><span class="line">        self.iface.scan()</span><br><span class="line">        time.sleep(<span class="number">15</span>)</span><br><span class="line">        <span class="comment"># 在若干秒后获取扫描结果</span></span><br><span class="line">        scanres = self.iface.scan_results()</span><br><span class="line">        <span class="comment"># 统计附近被发现的热点数量</span></span><br><span class="line">        nums = len(scanres)</span><br><span class="line">        print(<span class="string">"数量: %s"</span> % (nums))</span><br><span class="line">        <span class="comment"># print ("| %s |  %s |  %s | %s"%("WIFIID","SSID","BSSID","signal"))</span></span><br><span class="line">        <span class="comment"># 实际数据</span></span><br><span class="line">        self.show_scans_wifi_list(scanres)</span><br><span class="line">        <span class="keyword">return</span> scanres</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 显示wifi列表</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">show_scans_wifi_list</span><span class="params">(self, scans_res)</span>:</span></span><br><span class="line">        <span class="keyword">for</span> index, wifi_info <span class="keyword">in</span> enumerate(scans_res):</span><br><span class="line">            <span class="comment"># print("%-*s| %s | %*s |%*s\n"%(20,index,wifi_info.ssid,wifi_info.bssid,,wifi_info.signal))</span></span><br><span class="line">            self.wifi_tree.insert(<span class="string">""</span>, <span class="string">'end'</span>, values=(</span><br><span class="line">                index + <span class="number">1</span>, wifi_info.ssid, wifi_info.bssid, wifi_info.signal))</span><br><span class="line">            <span class="comment"># print("| %s | %s | %s | %s \n"%(index,wifi_info.ssid,wifi_info.bssid,wifi_info.signal))</span></span><br></pre></td></tr></table></figure>

<ul>
<li>绑定事件</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">WiFi_GUI</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="comment"># Treeview绑定事件</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">onDBClick</span><span class="params">(self, event)</span>:</span></span><br><span class="line">        self.sels = event.widget.selection()</span><br><span class="line">        self.get_wifi_value.set(self.wifi_tree.item(self.sels, <span class="string">"values"</span>)[<span class="number">1</span>])</span><br><span class="line">        <span class="comment"># print("you clicked on",self.wifi_tree.item(self.sels,"values")[1])</span></span><br></pre></td></tr></table></figure>


<ul>
<li>读取密码，进行匹配</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">WiFi_GUI</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="comment"># 添加密码文件目录</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">add_mm_file</span><span class="params">(self)</span>:</span></span><br><span class="line">        self.filename = tkinter.filedialog.askopenfilename()</span><br><span class="line">        self.get_value.set(self.filename)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 读取密码字典，进行匹配</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">readPassWord</span><span class="params">(self)</span>:</span></span><br><span class="line">        self.getFilePath = self.get_value.get()</span><br><span class="line">        <span class="comment"># print("文件路径：%s\n" %(self.getFilePath))</span></span><br><span class="line">        self.get_wifissid = self.get_wifi_value.get()</span><br><span class="line">        <span class="comment"># print("ssid：%s\n" %(self.get_wifissid))</span></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> self.getFilePath:</span><br><span class="line">            self.getFilePath = <span class="string">'misdic.txt'</span></span><br><span class="line"></span><br><span class="line">        self.pwdfilehander = open(self.getFilePath, <span class="string">"r"</span>, errors=<span class="string">"ignore"</span>)</span><br><span class="line">        <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">            <span class="keyword">try</span>:</span><br><span class="line">                self.pwdStr = self.pwdfilehander.readline()</span><br><span class="line">                <span class="comment"># print("密码: %s " %(self.pwdStr))</span></span><br><span class="line">                <span class="keyword">if</span> <span class="keyword">not</span> self.pwdStr:</span><br><span class="line">                    <span class="keyword">break</span></span><br><span class="line">                self.bool1 = self.connect(self.pwdStr, self.get_wifissid)</span><br><span class="line">                <span class="comment"># print("返回值：%s\n" %(self.bool1) )</span></span><br><span class="line">                <span class="keyword">if</span> self.bool1:</span><br><span class="line">                    <span class="comment"># print("密码正确："+pwdStr)</span></span><br><span class="line">                    <span class="comment"># res = "密码:%s 正确 \n"%self.pwdStr</span></span><br><span class="line">                    self.res = <span class="string">"===正确===  wifi名:%s  匹配密码：%s "</span> % (</span><br><span class="line">                        self.get_wifissid, self.pwdStr)</span><br><span class="line">                    self.get_wifimm_value.set(self.pwdStr)</span><br><span class="line">                    tkinter.messagebox.showinfo(<span class="string">'提示'</span>, <span class="string">'破解成功！！！'</span>)</span><br><span class="line">                    print(self.res)</span><br><span class="line">                    <span class="keyword">break</span></span><br><span class="line">                <span class="keyword">else</span>:</span><br><span class="line">                    <span class="comment"># print("密码:"+self.pwdStr+"错误")</span></span><br><span class="line">                    self.res = <span class="string">"---错误--- wifi名:%s匹配密码：%s"</span> % (</span><br><span class="line">                        self.get_wifissid, self.pwdStr)</span><br><span class="line">                    print(self.res)</span><br><span class="line">                    time.sleep(<span class="number">3</span>)</span><br><span class="line">            <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">                print(e)</span><br><span class="line">                <span class="keyword">continue</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 对wifi和密码进行匹配</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">connect</span><span class="params">(self, pwd_Str, wifi_ssid)</span>:</span></span><br><span class="line">        <span class="comment"># 创建wifi链接文件</span></span><br><span class="line">        self.profile = pywifi.Profile()</span><br><span class="line">        self.profile.ssid = wifi_ssid</span><br><span class="line">        <span class="comment"># wifi名称</span></span><br><span class="line">        self.profile.auth = const.AUTH_ALG_OPEN</span><br><span class="line">        <span class="comment"># 网卡的开放</span></span><br><span class="line">        self.profile.akm.append(const.AKM_TYPE_WPA2PSK)</span><br><span class="line">        <span class="comment"># wifi加密算法</span></span><br><span class="line">        self.profile.cipher = const.CIPHER_TYPE_CCMP</span><br><span class="line">        <span class="comment"># 加密单元</span></span><br><span class="line">        self.profile.key = pwd_Str</span><br><span class="line">        <span class="comment"># 密码</span></span><br><span class="line">        self.iface.remove_all_network_profiles()</span><br><span class="line">        <span class="comment"># 删除所有的wifi文件</span></span><br><span class="line">        self.tmp_profile = self.iface.add_network_profile(self.profile)</span><br><span class="line">        <span class="comment"># 设定新的链接文件</span></span><br><span class="line">        self.iface.connect(self.tmp_profile)</span><br><span class="line">        <span class="comment"># 链接</span></span><br><span class="line">        time.sleep(<span class="number">5</span>)</span><br><span class="line">        <span class="keyword">if</span> self.iface.status() == const.IFACE_CONNECTED:</span><br><span class="line">            <span class="comment"># 判断是否连接上</span></span><br><span class="line">            isOK = <span class="literal">True</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            isOK = <span class="literal">False</span></span><br><span class="line">        self.iface.disconnect()  <span class="comment"># 断开</span></span><br><span class="line">        time.sleep(<span class="number">1</span>)</span><br><span class="line">        <span class="comment"># 检查断开状态</span></span><br><span class="line">        <span class="keyword">assert</span> self.iface.status() <span class="keyword">in</span> [</span><br><span class="line">            const.IFACE_DISCONNECTED, const.IFACE_INACTIVE]</span><br><span class="line">        <span class="keyword">return</span> isOK</span><br></pre></td></tr></table></figure>

<ul>
<li>启动</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">gui_start</span><span class="params">()</span>:</span></span><br><span class="line">    init_window = Tk()</span><br><span class="line">    ui = WiFi_GUI(init_window)</span><br><span class="line">    print(ui)</span><br><span class="line">    ui.set_init_window()</span><br><span class="line">    ui.scans_wifi_list()</span><br><span class="line">    init_window.mainloop()</span><br><span class="line">    gui_start()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">"__main__"</span>:</span><br><span class="line">    gui_start()</span><br></pre></td></tr></table></figure>

<ul>
<li>显示</li>
</ul>
<div>
  <img width="36%" src="/archives/6eec6899/WiFi破解工具.png">
</div>


<h2 id="4-优化"><a href="#4-优化" class="headerlink" title="4.优化"></a>4.优化</h2><p>优化思路主要是密码字典生成方式，线程池、进程池、密码迭代器等等，如果要做复杂的话，可以试试考虑截取空中报文。<br>具体代码就不写了，感兴趣的可以自己试试去实现。</p>
<hr>
]]></content>
      <categories>
        <category>编程</category>
        <category>Python</category>
        <category>GUI编程</category>
      </categories>
      <tags>
        <tag>Tkinter</tag>
        <tag>WiFi连接</tag>
      </tags>
  </entry>
  <entry>
    <title>【工具】（五）：Windows和Linux下 Docker的安装！</title>
    <url>/archives/ef94d4d4.html</url>
    <content><![CDATA[<blockquote>
<p>本文介绍关于docker在Windows和Linux下的安装。</p>
</blockquote>
<a id="more"></a>

<h1 id="1-简介"><a href="#1-简介" class="headerlink" title="1. 简介"></a>1. 简介</h1><blockquote>
<p>国际惯例，我们先了解一下，什么是docker：</p>
</blockquote>
<ul>
<li>Docker 英译为码头工人，是一个开源的应用容器引擎，可以让开发者将他们的应用程序以及依赖包打包到一个轻量级、可移植的容器中，然后发布到    Linux 机器上，也可以实现虚拟化。</li>
<li>也有人说，它等同一个微型虚拟机，可以利用虚拟镜像，替代传统虚拟机，按照开发者需求搭建任意开发环境，管理方便、启动快捷、资源占用率低。</li>
</ul>
<h2 id="1-1-虚拟机"><a href="#1-1-虚拟机" class="headerlink" title="1.1. 虚拟机"></a>1.1. 虚拟机</h2><blockquote>
<p>虚拟机（virtual machine），其实就是通过虚拟化管理软件（如：VMware、Hyper-V等）和ISO系统镜像，在一个操作系统中安装另一个系统，满足某些对环境有特殊需求的情况。</p>
</blockquote>
<p>尽管它很强大，能够完全模拟出另一个操作系统，并且对底层主系统几乎没有什么影响，但不可否认，一定程度上加大了硬件系统的负担，导致资源占用率过高。</p>
<h2 id="1-2-Linux容器"><a href="#1-2-Linux容器" class="headerlink" title="1.2. Linux容器"></a>1.2. Linux容器</h2><blockquote>
<p>基于上述虚拟机的缺陷，于是有了LXC（Linux Container）这样一个解决方案，它是与系统其他部分隔离开的一系列进程，运行这些进程所需的所有文件都由另一个镜像提供，这意味着从开发到测试再到生产的整个过程中，Linux 容器都具有可移植性和一致性。</p>
</blockquote>
<p>详细资料，可见：<a href="https://www.jianshu.com/p/63fea471bc43" target="_blank" rel="noopener">Linux容器简述</a>、<a href="https://www.redhat.com/zh/topics/containers/whats-a-linux-container" target="_blank" rel="noopener">什么是Linux容器</a></p>
<h2 id="1-3-Docker"><a href="#1-3-Docker" class="headerlink" title="1.3. Docker"></a>1.3. Docker</h2><blockquote>
<p>Docker 属于 Linux 容器的一种封装，提供简单易用的容器使用接口。</p>
</blockquote>
<ul>
<li>Docker提供了一种可移植的配置标准化机制，允许你一致性地在不同的机器上运行同一个Container。</li>
<li>Docker的主要目标是“Build, Ship and Run Any App, Anywhere”，即通过对应用组件的封装（Packaging）、分发（Distribution）、部署（Deployment）、运行（Runtime）等生命周期的管理，达到应用组件级别的“一次封装，到处运行”。</li>
</ul>
<p>详细资料，可见：<a href="https://hujb2000.gitbooks.io/docker-flow-evolution/content/cn/basis/comp_concept.html" target="_blank" rel="noopener">Docker入门实践</a></p>
<h1 id="2-安装"><a href="#2-安装" class="headerlink" title="2. 安装"></a>2. 安装</h1><blockquote>
<p>Docker 是一个开源的商业产品，有两个版本：社区版（Community Edition，缩写为 CE）和企业版（Enterprise Edition，缩写为 EE）。<br>参考：<a href="http://www.ruanyifeng.com/blog/2018/02/docker-tutorial.html" target="_blank" rel="noopener">Docker 入门教程</a></p>
</blockquote>
<p>下面，我们主要讨论社区版的安装：</p>
<h2 id="2-1-Linux"><a href="#2-1-Linux" class="headerlink" title="2.1. Linux"></a>2.1. Linux</h2><blockquote>
<p>以 deepin 为例，其他Linux大致类似，参考：<a href="https://wiki.deepin.org/wiki/Docker" target="_blank" rel="noopener">deepin下的docker安装</a></p>
</blockquote>
<p>1.更新本地软件包索引：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo apt-get update</span><br></pre></td></tr></table></figure>

<p>2.安装docker-ce相关的秘钥管理和下载工具：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo apt-get install apt-transport-https ca-certificates curl python-software-properties software-properties-common</span><br></pre></td></tr></table></figure>

<p>3.下载并安装密钥：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">curl -fsSL https://download.docker.com/linux/debian/gpg | sudo apt-key add -</span><br></pre></td></tr></table></figure>

<p>4.添加官方仓库：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo add-apt-repository  <span class="string">"deb [arch=amd64] https://download.docker.com/linux/debian <span class="variable">$(lsb_release -cs)</span> stable"</span></span><br></pre></td></tr></table></figure>

<p>5.安装docker-ce：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo apt-get update</span><br><span class="line">sudo apt-get install docker-ce</span><br></pre></td></tr></table></figure>

<p>6.完成后，启动并查看：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 启动 docker</span></span><br><span class="line">systemctl start docker</span><br><span class="line"><span class="comment"># 查看安装的版本信息</span></span><br><span class="line">docker version</span><br></pre></td></tr></table></figure>

<h2 id="2-2-Windows"><a href="#2-2-Windows" class="headerlink" title="2.2. Windows"></a>2.2. Windows</h2><blockquote>
<p>以 win10 为例，参考：<a href="https://docs.docker.com/docker-for-windows/install/" target="_blank" rel="noopener">Docker官方安装</a></p>
</blockquote>
<p>1.首先，我们需要先有一个依赖环境：</p>
<ul>
<li>Windows 10 64位：专业版，企业版或教育版</li>
<li>必须启用Hyper-V和Containers Windows功能</li>
<li>运行Hyper-V</li>
</ul>
<p>2.开启虚拟技术支持</p>
<blockquote>
<p>BIOS设置中启用BIOS级硬件虚拟化支持：</p>
<ul>
<li>开机按 <code>F2</code> 或 <code>F12</code> ，进入BIOS设置</li>
<li>Intel Virtual Technology 选项 设为 enable</li>
</ul>
</blockquote>
<p>3.开启并运行Hyper-V工具</p>
<ol>
<li>打开Windows功能<br><img src="https://img-blog.csdnimg.cn/20191002194426300.png" alt></li>
<li>勾选Hyper-V，点击确定<br><img src="https://img-blog.csdnimg.cn/20191002194713777.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MTU5OTg1OA==,size_16,color_FFFFFF,t_70" alt></li>
<li>等待一会儿，提示重启，点击重启</li>
<li>重启完成后，到Windows管理工具，找到Hyper-V管理器，运行。<br><img src="https://img-blog.csdnimg.cn/20191002195238496.png" alt><br>看到如下界面：<br><img src="https://img-blog.csdnimg.cn/20191002195747654.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MTU5OTg1OA==,size_16,color_FFFFFF,t_70" alt><blockquote>
<p>因为我的电脑已经安装了docker，所以有 DockerDesktopVM 显示，下面开始真正的安装。</p>
</blockquote>
</li>
</ol>
<p>4.安装Docker for Windows</p>
<blockquote>
<p>官网下载：<a href="https://hub.docker.com/editions/community/docker-ce-desktop-windows" target="_blank" rel="noopener">Docker Desktop</a></p>
</blockquote>
<p><img src="https://img-blog.csdnimg.cn/20191002200604156.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MTU5OTg1OA==,size_16,color_FFFFFF,t_70" alt><br><img src="https://img-blog.csdnimg.cn/201910022007050.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MTU5OTg1OA==,size_16,color_FFFFFF,t_70" alt><br><img src="https://img-blog.csdnimg.cn/20191002200304371.png" alt></p>
<p>5.点击运行 <code>Docker for Windows Installer.exe</code></p>
<blockquote>
<p>该过程中可能需要你关闭电脑的杀毒软件，以完成安装。<br>安装结束会有重启提示，点击确定就行。<br>因为博主已经安装过了，就不在这里演示了。</p>
</blockquote>
<p>6.完成后，开启服务，查看版本信息</p>
<blockquote>
<p><code>Win + R</code> 输入 cmd，打开dos窗口，输入：</p>
</blockquote>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker version  <span class="comment"># 查看版本</span></span><br></pre></td></tr></table></figure>
<p><img src="https://img-blog.csdnimg.cn/20191002204927448.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MTU5OTg1OA==,size_16,color_FFFFFF,t_70" alt><br>到此，docker的安装也就完成了。下面开始玩转我们的docker吧！</p>
<hr>
<p>使用参考：<a href="https://doc.yonyoucloud.com/doc/chinese_docker/userguide/dockerrepos.html" target="_blank" rel="noopener">Docker使用</a>、<a href="https://www.jianshu.com/p/a23539a519b7" target="_blank" rel="noopener">Docker基本命令-简书</a>、<a href="https://yeasy.gitbooks.io/docker_practice/image/build.html" target="_blank" rel="noopener">构建Docker镜像</a></p>
<blockquote>
<p>原文地址： CSDN博客 - <a href="https://blog.csdn.net/weixin_41599858/article/details/101929473" target="_blank" rel="noopener">Windows和Linux下 Docker的安装！</a></p>
</blockquote>
]]></content>
      <categories>
        <category>工具</category>
        <category>Docker</category>
      </categories>
      <tags>
        <tag>Docker</tag>
      </tags>
  </entry>
  <entry>
    <title>【工具】（八）：VSCode 之个性化配置</title>
    <url>/archives/9a4a16.html</url>
    <content><![CDATA[<p>本文主要记录VSCode中的一些个性化配置。</p>
<a id="more"></a>

<p>主要插件如下：</p>
<ul>
<li><a href="https://marketplace.visualstudio.com/items?itemName=hoovercj.vscode-power-mode" target="_blank" rel="noopener">Power Mode</a></li>
<li><a href="https://marketplace.visualstudio.com/items?itemName=shalldie.background" target="_blank" rel="noopener">background</a></li>
<li><a href="https://marketplace.visualstudio.com/items?itemName=yuansnowboy.yuansnowboy" target="_blank" rel="noopener">Live2D</a></li>
<li><a href="https://marketplace.visualstudio.com/items?itemName=karigari.chat" target="_blank" rel="noopener">Live Share Chat</a></li>
<li><a href="https://marketplace.visualstudio.com/items?itemName=auchenberg.vscode-browser-preview" target="_blank" rel="noopener">Browser Preview</a></li>
<li><a href="https://marketplace.visualstudio.com/items?itemName=shengchen.vscode-leetcode" target="_blank" rel="noopener">LeetCode</a></li>
<li><a href="https://marketplace.visualstudio.com/items?itemName=ms-azuretools.vscode-docker" target="_blank" rel="noopener">Docker</a></li>
<li><a href="https://marketplace.visualstudio.com/items?itemName=formulahendry.vscode-mysql" target="_blank" rel="noopener">MySQL</a></li>
<li><a href="https://marketplace.visualstudio.com/items?itemName=ms-vscode-remote.remote-ssh" target="_blank" rel="noopener">Remote - SSH</a> | <a href="https://marketplace.visualstudio.com/items?itemName=ms-vscode-remote.remote-wsl" target="_blank" rel="noopener">Remote - WSL</a></li>
</ul>
<h2 id="1-Power-Mode"><a href="#1-Power-Mode" class="headerlink" title="1.Power Mode"></a>1.<a href="https://marketplace.visualstudio.com/items?itemName=hoovercj.vscode-power-mode" target="_blank" rel="noopener">Power Mode</a></h2><p>vscode代码特效插件，</p>
<h3 id="1-1-安装"><a href="#1-1-安装" class="headerlink" title="1.1.安装"></a>1.1.安装</h3><p><code>Ctrl+Shift+X</code> 打开扩展，搜索插件 <code>Power Mode</code>，点击 <code>install</code> 安装。</p>


<h3 id="1-2-配置"><a href="#1-2-配置" class="headerlink" title="1.2.配置"></a>1.2.配置</h3><p><code>Ctrl+Shift+P</code> -&gt; 搜索 <code>Open User Settings</code>，找到 <code>settings.json</code> 文件:<br>做如下配置：</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="comment">// power mode 输入特效配置</span></span><br><span class="line">  <span class="attr">"powermode.enabled"</span>: <span class="literal">true</span>,         <span class="comment">//是否开启</span></span><br><span class="line">  <span class="attr">"powermode.enableShake"</span>: <span class="literal">false</span>,    <span class="comment">//是否抖动</span></span><br><span class="line">  <span class="attr">"powermode.presets"</span>: <span class="string">"flames"</span>,   <span class="comment">//动画效果 particles | fireworks | flames | magic | clippy</span></span><br><span class="line">  <span class="attr">"editor.renderWhitespace"</span>: <span class="string">"all"</span>,</span><br><span class="line">  <span class="attr">"workbench.colorCustomizations"</span>: &#123;</span><br><span class="line">    <span class="attr">"editorWhitespace.foreground"</span>: <span class="string">"#FFFFFF00"</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="1-3-效果"><a href="#1-3-效果" class="headerlink" title="1.3.效果"></a>1.3.效果</h3><img src="/archives/9a4a16/demo-presets-flames.gif" class title="图片来源于官网">


<h2 id="2-background"><a href="#2-background" class="headerlink" title="2.background"></a>2.<a href="https://marketplace.visualstudio.com/items?itemName=shalldie.background" target="_blank" rel="noopener">background</a></h2><h3 id="2-1-安装"><a href="#2-1-安装" class="headerlink" title="2.1.安装"></a>2.1.安装</h3><p><code>Ctrl+Shift+X</code> 打开扩展，搜索插件 <code>background</code>，点击 <code>install</code> 安装。</p>
<img src="/archives/9a4a16/background-setup.png" class>

<h3 id="2-2-配置"><a href="#2-2-配置" class="headerlink" title="2.2.配置"></a>2.2.配置</h3><p>可以通过 <code>Ctrl+Shift+P</code> -&gt; 搜索 <code>Open Default Settings</code> 找到默认配置文件，查看配置项，再搜索 <code>Open User Settings</code>，找到 <code>settings.json</code> 文件:<br>做如下配置：</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="comment">// 背景图片</span></span><br><span class="line">  <span class="comment">// 自己定制背景图，最多3个</span></span><br><span class="line">    <span class="attr">"background.customImages"</span>: [</span><br><span class="line">    <span class="string">"file:///E:/Jusheng_Yao/Pictures/background/others/2018-09-12_背景图片27.jpg"</span>,</span><br><span class="line">  ],</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 插件是否启用</span></span><br><span class="line">    <span class="attr">"background.enabled"</span>: <span class="literal">true</span>,</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 背景图样式。</span></span><br><span class="line">    <span class="attr">"background.style"</span>: &#123;</span><br><span class="line">    <span class="attr">"content"</span>: <span class="string">"''"</span>,</span><br><span class="line">    <span class="attr">"pointer-events"</span>: <span class="string">"none"</span>,</span><br><span class="line">    <span class="attr">"position"</span>: <span class="string">"absolute"</span>,</span><br><span class="line">    <span class="attr">"z-index"</span>: <span class="string">"99999"</span>,</span><br><span class="line">    <span class="attr">"width"</span>: <span class="string">"100%"</span>,</span><br><span class="line">    <span class="attr">"height"</span>: <span class="string">"100%"</span>,</span><br><span class="line">    <span class="attr">"background-position"</span>: <span class="string">"center"</span>,</span><br><span class="line">    <span class="attr">"background-size"</span>: <span class="string">"cover"</span>,</span><br><span class="line">    <span class="attr">"background-repeat"</span>: <span class="string">"no-repeat"</span>,</span><br><span class="line">    <span class="attr">"opacity"</span>: <span class="number">0.1</span></span><br><span class="line">  &#125;,</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 使用默认图片</span></span><br><span class="line">    <span class="attr">"background.useDefault"</span>: <span class="literal">false</span>,</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 是否使用前景图，这样会使图片放在代码的顶部</span></span><br><span class="line">  <span class="attr">"background.useFront"</span>: <span class="literal">true</span>,</span><br><span class="line">  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="2-3-效果"><a href="#2-3-效果" class="headerlink" title="2.3.效果"></a>2.3.效果</h3><img src="/archives/9a4a16/background.png" class>

<p>插件自带：</p>
<img src="/archives/9a4a16/background.gif" class title="图片来源于官网">

<h2 id="3-Live2D"><a href="#3-Live2D" class="headerlink" title="3.Live2D"></a>3.<a href="https://marketplace.visualstudio.com/items?itemName=yuansnowboy.yuansnowboy" target="_blank" rel="noopener">Live2D</a></h2><h3 id="3-1-安装"><a href="#3-1-安装" class="headerlink" title="3.1.安装"></a>3.1.安装</h3><p><code>Ctrl+Shift+X</code> 打开扩展，搜索插件 <code>Live2D</code>，点击 <code>install</code> 安装。</p>
<img src="/archives/9a4a16/Live2D-setup.png" class>

<h3 id="3-2-配置"><a href="#3-2-配置" class="headerlink" title="3.2.配置"></a>3.2.配置</h3><figure class="highlight json"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">  <span class="comment">// 是否开启live2D</span></span><br><span class="line">    <span class="attr">"live2D.use"</span>: <span class="literal">true</span>,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="3-3-效果"><a href="#3-3-效果" class="headerlink" title="3.3.效果"></a>3.3.效果</h3><img src="/archives/9a4a16/Live2D-show.png" class>

<h2 id="4-Live-Share-Chat"><a href="#4-Live-Share-Chat" class="headerlink" title="4.Live Share Chat"></a>4.<a href="https://marketplace.visualstudio.com/items?itemName=karigari.chat" target="_blank" rel="noopener">Live Share Chat</a></h2><h3 id="4-1-安装"><a href="#4-1-安装" class="headerlink" title="4.1.安装"></a>4.1.安装</h3><p>该插件可以让你进行团队交流和协同开发，使开发变得更高效。<br><code>Ctrl+Shift+X</code> 打开扩展，搜索插件 <code>Live Share Chat</code>，点击 <code>install</code> 安装。</p>
<img src="/archives/9a4a16/LiveShareChat-setup.png" class>

<h3 id="4-2-效果"><a href="#4-2-效果" class="headerlink" title="4.2.效果"></a>4.2.效果</h3><img src="/archives/9a4a16/Live_Share_Chat.gif" class title="图片来源于官网">

<h2 id="5-Browser-Preview"><a href="#5-Browser-Preview" class="headerlink" title="5.Browser Preview"></a>5.<a href="https://marketplace.visualstudio.com/items?itemName=auchenberg.vscode-browser-preview" target="_blank" rel="noopener">Browser Preview</a></h2><h3 id="5-1-安装"><a href="#5-1-安装" class="headerlink" title="5.1.安装"></a>5.1.安装</h3><p><code>Ctrl+Shift+X</code> 打开扩展，搜索插件 <code>Browser Preview</code>，点击 <code>install</code> 安装。</p>
<img src="/archives/9a4a16/BrowserPreview-setup.png" class>

<h3 id="5-2-效果"><a href="#5-2-效果" class="headerlink" title="5.2.效果"></a>5.2.效果</h3><img src="/archives/9a4a16/browser-demo.gif" class title="图片来源于官网">

<h2 id="6-LeetCode"><a href="#6-LeetCode" class="headerlink" title="6.LeetCode"></a>6.<a href="https://marketplace.visualstudio.com/items?itemName=shengchen.vscode-leetcode" target="_blank" rel="noopener">LeetCode</a></h2><h3 id="6-1-安装"><a href="#6-1-安装" class="headerlink" title="6.1.安装"></a>6.1.安装</h3><p><code>Ctrl+Shift+X</code> 打开扩展，搜索插件 <code>LeetCode</code>，点击 <code>install</code> 安装。</p>
<img src="/archives/9a4a16/LeetCode-setup.png" class>

<h3 id="6-2-效果"><a href="#6-2-效果" class="headerlink" title="6.2.效果"></a>6.2.效果</h3><img src="/archives/9a4a16/LeetCode-menu.png" class>
<p>官网图片：</p>
<img src="/archives/9a4a16/LeetCode-demo.gif" class>

<h2 id="7-MySQL"><a href="#7-MySQL" class="headerlink" title="7.MySQL"></a>7.<a href="https://marketplace.visualstudio.com/items?itemName=formulahendry.vscode-mysql" target="_blank" rel="noopener">MySQL</a></h2><h3 id="7-1-安装"><a href="#7-1-安装" class="headerlink" title="7.1.安装"></a>7.1.安装</h3><p><code>Ctrl+Shift+X</code> 打开扩展，搜索插件 <code>MySQL</code>，点击 <code>install</code> 安装。</p>
<img src="/archives/9a4a16/MySQL-setup.png" class>

<h3 id="7-2-效果"><a href="#7-2-效果" class="headerlink" title="7.2.效果"></a>7.2.效果</h3><img src="/archives/9a4a16/mysql-run.png" class title="图片来源于官网">

<h2 id="8-Remote-SSH"><a href="#8-Remote-SSH" class="headerlink" title="8.Remote - SSH"></a>8.<a href="https://marketplace.visualstudio.com/items?itemName=ms-vscode-remote.remote-ssh" target="_blank" rel="noopener">Remote - SSH</a></h2><p>该插件可以让vscode使用任何远程计算机与SSH服务器作为开发环境。<br><a href="https://marketplace.visualstudio.com/items?itemName=ms-vscode-remote.remote-wsl" target="_blank" rel="noopener">Remote - WSL</a> 插件可以让vscode连接Windows子系统作为开发环境。</p>
<h3 id="8-1-安装"><a href="#8-1-安装" class="headerlink" title="8.1.安装"></a>8.1.安装</h3><p><code>Ctrl+Shift+X</code> 打开扩展，搜索插件 <code>Remote - SSH</code> 或 <code>Remote - WSL</code>，点击 <code>install</code> 安装。</p>
<img src="/archives/9a4a16/Remote-SSH-setup.png" class>

<h3 id="8-2-效果"><a href="#8-2-效果" class="headerlink" title="8.2.效果"></a>8.2.效果</h3><p>ssh:</p>
<img src="/archives/9a4a16/ssh-readme.gif" class title="图片来源于官网">
<p>wsl:</p>
<img src="/archives/9a4a16/wsl-readme.gif" class title="图片来源于官网">

<hr>
]]></content>
      <categories>
        <category>工具</category>
        <category>VSCode</category>
      </categories>
      <tags>
        <tag>插件</tag>
      </tags>
  </entry>
  <entry>
    <title>【工具】（六）：衔接上一篇：Windows 10 下对docker镜像的简单使用及创建！</title>
    <url>/archives/ffda6757.html</url>
    <content><![CDATA[<blockquote>
<p>如题，上一篇已经安装好了docker环境，下面聊聊它的基本使用。</p>
</blockquote>
<a id="more"></a>
<h1 id="一、简单使用"><a href="#一、简单使用" class="headerlink" title="一、简单使用"></a>一、简单使用</h1><p>类似git仓库管理工具的操作</p>
<h2 id="1-查看信息"><a href="#1-查看信息" class="headerlink" title="1.查看信息"></a>1.查看信息</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 查看版本</span></span><br><span class="line">docker version</span><br><span class="line"><span class="comment"># 系统信息</span></span><br><span class="line">docker info</span><br><span class="line"><span class="comment"># 查看容器信息</span></span><br><span class="line">docker ps [-a/-l]</span><br></pre></td></tr></table></figure>

<div align="left">
    <img src="https://img-blog.csdnimg.cn/20191003123613541.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MTU5OTg1OA==,size_16,color_FFFFFF,t_70">
</div>

<div align="left">
    <img src="https://img-blog.csdnimg.cn/20191003124113824.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MTU5OTg1OA==,size_16,color_FFFFFF,t_70">
</div>

<h2 id="2-镜像操作"><a href="#2-镜像操作" class="headerlink" title="2.镜像操作"></a>2.镜像操作</h2><blockquote>
<p>所有命令，可以通过 <code>docker 操作指令 --help</code> 来查看完整的命令选项.</p>
</blockquote>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 搜索image  </span></span><br><span class="line">docker search image_name  </span><br><span class="line">  </span><br><span class="line"><span class="comment"># 下载image  </span></span><br><span class="line">docker image pull &lt;repository&gt;:&lt;tag&gt; </span><br><span class="line">  </span><br><span class="line"><span class="comment"># 镜像列表</span></span><br><span class="line">docker images  </span><br><span class="line"></span><br><span class="line"><span class="comment"># 启动/停止镜像</span></span><br><span class="line">docker create <span class="comment"># 创建一个容器但是不启动它</span></span><br><span class="line">docker run <span class="comment"># 创建并启动一个容器</span></span><br><span class="line">docker stop <span class="comment"># 停止容器运行，发送信号SIGTERM</span></span><br><span class="line">docker start <span class="comment"># 启动一个停止状态的容器</span></span><br><span class="line">docker restart <span class="comment"># 重启一个容器</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 删除一个或者多个镜像; </span></span><br><span class="line">docker rmi [-f] image_name  </span><br><span class="line"></span><br><span class="line"><span class="comment"># 显示一个镜像的历史</span></span><br><span class="line">docker <span class="built_in">history</span> image_name</span><br></pre></td></tr></table></figure>
<p>更多，可参考：<a href="https://blog.51cto.com/13581826/2121938" target="_blank" rel="noopener">docker入门基本操作</a>、<a href="https://blog.csdn.net/omnispace/article/details/79778544" target="_blank" rel="noopener">Docker操作命令详解</a></p>
<h1 id="二、创建镜像"><a href="#二、创建镜像" class="headerlink" title="二、创建镜像"></a>二、创建镜像</h1><ul>
<li>从已经创建的容器中更新镜像，并且提交这个镜像；</li>
<li>使用 Dockerfile 指令来创建一个新的镜像；</li>
</ul>
<h2 id="1-镜像加速"><a href="#1-镜像加速" class="headerlink" title="1.镜像加速"></a>1.镜像加速</h2><blockquote>
<p>无论是下载还是创建上传镜像，默认下，官方源速度是比较慢的，不妨使用阿里镜像加速，首先，去 <a href="https://account.aliyun.com/register/register.htm?spm=a2c45.11132027.495866.10.66b754552L4ioF" target="_blank" rel="noopener">注册</a>。</p>
</blockquote>
<div>
    <img src="https://img-blog.csdnimg.cn/20191003130806313.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MTU5OTg1OA==,size_12,color_FFFFFF,t_70">
</div>

<div>
    <img src="https://img-blog.csdnimg.cn/20191003131025784.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MTU5OTg1OA==,size_12,color_FFFFFF,t_70">
</div>

<blockquote>
<p>如果是在Windows下，将地址复制到 settings下的Daemon中，如下（阿里操作文档有详细说明）：</p>
</blockquote>
<div>
    <img src="https://img-blog.csdnimg.cn/20191003131308809.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MTU5OTg1OA==,size_12,color_FFFFFF,t_70">
</div>

<h2 id="2-开始创建image"><a href="#2-开始创建image" class="headerlink" title="2.开始创建image"></a>2.开始创建image</h2><blockquote>
<p>第一种方式比较简单，相当于拉取一个基础镜像，再进行修改，这里主要说一下第二种方式：Dockerfile创建</p>
</blockquote>
<p>这里以python为例，在一个空白目录中，建立一个文本文件，并命名为 <code>Dockerfile</code>：<br><img src="https://img-blog.csdnimg.cn/20191003132432479.png" alt><br>Dockerfile 的内容为：<br><img src="https://img-blog.csdnimg.cn/20191003132956811.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MTU5OTg1OA==,size_16,color_FFFFFF,t_70" alt><br>以上是我的配置，这里可以根据需要，进行修改，保存。</p>
<p>该目录下打开DOS窗口，输入：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 根据实际情况，修改image_name 和 tag</span></span><br><span class="line">docker build -t `image_name`:`tag` .</span><br></pre></td></tr></table></figure>

<div>
    <img src="https://img-blog.csdnimg.cn/20191003133838445.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MTU5OTg1OA==,size_16,color_FFFFFF,t_70">
</div>

<p>完成后，可以试着输入以下命令：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 查看</span></span><br><span class="line">docker version</span><br><span class="line"><span class="comment"># 运行</span></span><br><span class="line">docker run -ti [imageID] [<span class="built_in">command</span>]  <span class="comment"># 通常 command 为 /bin/bash</span></span><br></pre></td></tr></table></figure>

<h2 id="3-推送到镜像仓库"><a href="#3-推送到镜像仓库" class="headerlink" title="3.推送到镜像仓库"></a>3.推送到镜像仓库</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 登录阿里云</span></span><br><span class="line">docker login --username=阿里云帐号名 registry.cn-hangzhou.aliyuncs.com</span><br><span class="line"><span class="comment"># 对本地的image镜像进行重命名</span></span><br><span class="line">docker tag [ImageId] registry.cn-hangzhou.aliyuncs.com/[命名空间]/[仓库名称]:[镜像版本号]</span><br><span class="line"><span class="comment"># 推送到Registry</span></span><br><span class="line">docker push registry.cn-hangzhou.aliyuncs.com/[命名空间]/[仓库名称]:[镜像版本号]</span><br></pre></td></tr></table></figure>

<hr>
<p>好了，到此也就完成了，最后可以去自己的阿里云仓库查看。</p>
<blockquote>
<p>原文地址： CSDN博客 - <a href="https://blog.csdn.net/weixin_41599858/article/details/101986072" target="_blank" rel="noopener">Windows 10 下对docker镜像的简单使用及创建！</a></p>
</blockquote>
]]></content>
      <categories>
        <category>工具</category>
        <category>Docker</category>
      </categories>
      <tags>
        <tag>Docker</tag>
      </tags>
  </entry>
  <entry>
    <title>【工具】（四）：衔接上一篇：VSCode插件推荐！！！</title>
    <url>/archives/dd145cc.html</url>
    <content><![CDATA[<p>对于很多编程工作者来说，一款好的IDE或者编辑器至关重要，</p>
<p>很多人都喜欢用IDE，因为全面，配置方便，管理更是一键式，用起来贼爽，不需要关心开发之外的东西，</p>
<a id="more"></a>

<p>ps: 本人也喜欢。。。<img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly9xcS55aDMxLmNvbS90cC96amJxLzIwMTMwMjI3MDgwNTI5MTc1MC5wbmc?x-oss-process=image/format,png" alt></p>
<p>尤其是对于jetbrains系列的IDE，相当满意，如：pycharm、phpstorm、Rubymine、webstorm等；</p>
<p>但是有个问题，很多人都遇到过，就是打开一款IDE时，等待时间比较久，尤其是电脑配置不高的情况下，更是糟心，</p>
<p>于是想换用轻量级的编辑器，使用灵活、操作方便，如：sublime text 3、Visual studio Code、Notepad++、Editplus等，</p>
<p>其中博主偏爱两款编辑器：sublime text 3 和 Visual studio Code，插件超多，应有尽有！</p>
<p><strong>废话不多说，下面我们主要看VSCode的相关插件：</strong><br>当然我们也可以去 <a href="https://marketplace.visualstudio.com/vscode" target="_blank" rel="noopener">插件库</a> 中搜索</p>
<h2 id="1-通用插件"><a href="#1-通用插件" class="headerlink" title="1. 通用插件"></a>1. 通用插件</h2><p>   ① <a href="https://marketplace.visualstudio.com/items?itemName=robertohuertasm.vscode-icons" target="_blank" rel="noopener">vscode-icons</a>：一款图标插件，看起来超带感；</p>
<div align="center">
    <img src="https://img-blog.csdnimg.cn/20190921152408835.png" width="800px">
</div>

<p>   ② <a href="https://marketplace.visualstudio.com/items?itemName=PKief.material-icon-theme" target="_blank" rel="noopener">Material Icon Theme</a>：侧栏图标插件，图标设计十分精美，赏心悦目：</p>
<div align="center">
    <img src="https://img-blog.csdnimg.cn/20190921154208513.png" width="800px">
</div>

<p>   ③ <a href="https://marketplace.visualstudio.com/items?itemName=CoenraadS.bracket-pair-colorizer" target="_blank" rel="noopener">Bracket Pair Colorizer</a>：区分不同代码段，代码量大的时候，相当有助：</p>
<div align="center">
    <img src="https://img-blog.csdnimg.cn/20190921152720502.png" width="800px">
</div> 

<p>   ④ <a href="https://marketplace.visualstudio.com/items?itemName=zhuangtongfa.Material-theme" target="_blank" rel="noopener">One Dark Pro</a>：源于 Atom 的 One Dark Theme，在配色上 One Dark Pro 要更为丰富：</p>
<div align="center">
    <img src="https://img-blog.csdnimg.cn/20190921153414243.png" width="800px">
</div>  

<p>   ⑤ <a href="https://marketplace.visualstudio.com/items?itemName=monokai.theme-monokai-pro-vscode" target="_blank" rel="noopener">Monokai Pro</a>：一套极具现代化的功能配色方案，插件带有文件图标设计：</p>
<div align="center">
    <img src="https://img-blog.csdnimg.cn/20190921153601551.png" width="800px">
</div> 

<p>   ⑥ <a href="https://marketplace.visualstudio.com/items?itemName=dracula-theme.theme-dracula" target="_blank" rel="noopener">Dracula Official</a>：颇受喜爱的一款主题插件，插件带有文件图标设计：</p>
<div align="center">
    <img src="https://img-blog.csdnimg.cn/20190921153820455.png" width="800px">
</div> 

<p>   ⑦ <a href="https://marketplace.visualstudio.com/items?itemName=formulahendry.code-runner" target="_blank" rel="noopener">Code Runner</a>：支持多种语言的代码的立即执行：</p>
<div align="center">
    <img src="https://img-blog.csdnimg.cn/20190921154852407.png" width="800px">
</div> 

<p>   ⑧ <a href="https://marketplace.visualstudio.com/items?itemName=WakaTime.vscode-wakatime" target="_blank" rel="noopener">WakaTime</a>：可以从你的使用习惯中生成数据报表：</p>
<div align="center">
    <img src="https://img-blog.csdnimg.cn/20190921155603408.png" width="800px">
</div> 

<p>   ⑨ <a href="https://marketplace.visualstudio.com/items?itemName=mkxml.vscode-filesize" target="_blank" rel="noopener">filesize</a>：一款在左下角显示文件大小的插件：</p>
<div align="center">
    <img src="https://img-blog.csdnimg.cn/20190921160057966.png" width="800px">
</div>

<p>   ⑩ <a href="https://marketplace.visualstudio.com/items?itemName=VisualStudioExptTeam.vscodeintellicode" target="_blank" rel="noopener">Visual Studio IntelliCode</a>：AI 辅助功能，可通过上下文智能感知，代码样式的推理和执行等功能提高开发人员的工作效率：</p>
<div align="center">
    <img src="https://img-blog.csdnimg.cn/20190921161138613.png" width="800px">
</div> 

<h2 id="2-Python相关"><a href="#2-Python相关" class="headerlink" title="2. Python相关"></a>2. Python相关</h2><p>   ① <a href="https://marketplace.visualstudio.com/items?itemName=ms-python.python" target="_blank" rel="noopener">Python</a>：必备，提供了代码分析，高亮，规范化等基本功能：</p>
<div align="center">
    <img src="https://img-blog.csdnimg.cn/2019092115571725.png" width="800px">
</div>  

<p>   ② <a href="https://marketplace.visualstudio.com/items?itemName=ms-python.anaconda-extension-pack" target="_blank" rel="noopener">Anaconda Extension Pack</a>：Python集成科学环境：</p>
<div align="center">
    <img src="https://img-blog.csdnimg.cn/20190921155751272.png" width="800px">
</div>

<p>   ③ <a href="https://marketplace.visualstudio.com/items?itemName=christian-kohler.path-intellisense" target="_blank" rel="noopener">Path Intellisense</a>：当代码中读入文件名或者文件路径时，提供文件名或者文件路径的自动补全：</p>
<div align="center">
    <img src="https://img-blog.csdnimg.cn/20190921161507329.png" width="800px">
</div> 

<p>   ④ <a href="https://link.zhihu.com/?target=https%3A//marketplace.visualstudio.com/items%3FitemName%3Dnjpwerner.autodocstring">Python Docstring by Nils Werner</a>：可以快速为python函数生成文档字符串：</p>
<div align="center">
    <img src="https://img-blog.csdnimg.cn/20190921163600479.png" width="800px">
</div>

<p>   ⑤ <a href="https://link.zhihu.com/?target=https%3A//code.visualstudio.com/docs/python/linting">Code Linting</a>：识别和纠正细微的编程错误或可能导致错误的非常规编码实践：</p>
<blockquote>
<p>可以用：pip install pylint 安装</p>
</blockquote>
<p>   ⑥ <a href="https://marketplace.visualstudio.com/items?itemName=donjayamanne.python-extension-pack" target="_blank" rel="noopener">Python Extension Pack</a>：Python扩展包：</p>
<div align="center">
    <img src="https://img-blog.csdnimg.cn/20190921172849261.png" width="800px">
</div>


<h2 id="3-Ruby相关"><a href="#3-Ruby相关" class="headerlink" title="3. Ruby相关"></a>3. Ruby相关</h2><p>   ① <a href="https://marketplace.visualstudio.com/items?itemName=rebornix.Ruby" target="_blank" rel="noopener">Ruby</a>：必备，提供了代码分析，高亮，规范化等基本功能：</p>
<div align="center">
    <img src="https://img-blog.csdnimg.cn/20190921160236494.png" width="800px">
</div>

<p>   ② <a href="https://marketplace.visualstudio.com/items?itemName=hridoy.rails-snippets" target="_blank" rel="noopener">Ruby on Rails</a>：一款高效的web框架：</p>
<div align="center">
    <img src="https://img-blog.csdnimg.cn/20190921160336710.png" width="800px">
</div>

<p>   ③ <a href="https://marketplace.visualstudio.com/items?itemName=castwide.solargraph" target="_blank" rel="noopener">Ruby Solargraph</a>：智能感知和上下文检测：</p>
<div align="center">
    <img src="https://img-blog.csdnimg.cn/20190921174641367.png" width="800px">
</div>

<p>   ④ <a href="https://marketplace.visualstudio.com/items?itemName=misogi.ruby-rubocop" target="_blank" rel="noopener">ruby-rubocop</a>：一个Ruby静态代码分析器，主要作用Ruby代码规范：</p>
<div align="center">
    <img src="https://img-blog.csdnimg.cn/20190921175655789.png" width="800px">
</div>

<h2 id="4-web前端"><a href="#4-web前端" class="headerlink" title="4. web前端"></a>4. web前端</h2><p>   ① <a href="https://marketplace.visualstudio.com/items?itemName=FallenMax.mithril-emmet" target="_blank" rel="noopener">Mithril Emmet</a>：前端快速开发神器：</p>
<div align="center">
    <img src="https://img-blog.csdnimg.cn/20190921170034103.png" width="800px">
</div>

<p>   ② <a href="https://marketplace.visualstudio.com/items?itemName=octref.vetur" target="_blank" rel="noopener">Vetur</a>：VS Code下面的Vue工具：</p>
<div align="center">
    <img src="https://img-blog.csdnimg.cn/2019092117013550.png" width="800px">
</div>

<p>   ③ <a href="http://link.zhihu.com/?target=https%3A//marketplace.visualstudio.com/items%3FitemName%3Dcoderfee.open-html-in-browser">Open-In-Browser</a>：HTML在浏览器打开：</p>
<div align="center">
    <img src="https://img-blog.csdnimg.cn/20190921170229218.png" width="800px">
</div>

<p>   ④ <a href="https://marketplace.visualstudio.com/items?itemName=deerawan.vscode-faker" target="_blank" rel="noopener">vscode-faker</a>：JavaScript 库，能够快速的插入用例数据：</p>
<div align="center">
    <img src="https://img-blog.csdnimg.cn/20190921170350741.png" width="800px">
</div>

<p>   ⑤ <a href="https://marketplace.visualstudio.com/items?itemName=esbenp.prettier-vscode" target="_blank" rel="noopener">Prettier - Code formatter</a>：目前 Web 开发中最受欢迎的代码格式化程序：</p>
<div align="center">
    <img src="https://img-blog.csdnimg.cn/20190921170513249.png" width="800px">
</div>

<p>   ⑥ <a href="http://link.zhihu.com/?target=https%3A//marketplace.visualstudio.com/items%3FitemName%3Didleberg.icon-fonts">Icon Fonts</a>：一个能够在项目中添加图标字体的插件，支持超过 20 个热门的图标集：</p>
<div align="center">
    <img src="https://img-blog.csdnimg.cn/20190921170610809.png" width="800px">
</div>

<p>   ⑦ <a href="http://link.zhihu.com/?target=https%3A//quokkajs.com/">Quokka</a>：调试工具插件，能够根据你正在编写的代码提供实时反馈：</p>
<div align="center">
    <img src="https://img-blog.csdnimg.cn/20190921170711659.png" width="800px">
</div>

<h2 id="5-PHP相关"><a href="#5-PHP相关" class="headerlink" title="5. PHP相关"></a>5. PHP相关</h2><p>   ① <a href="https://marketplace.visualstudio.com/items?itemName=felixfbecker.php-debug" target="_blank" rel="noopener">PHP Debug</a>：用于在程序中打断点检测：</p>
<div align="center">
    <img src="https://img-blog.csdnimg.cn/20190921171121433.png" width="800px">
</div>

<p>   ② <a href="https://marketplace.visualstudio.com/items?itemName=felixfbecker.php-intellisense" target="_blank" rel="noopener">PHP IntelliSense</a>：PHP代码的阅读和格式化，查看定义／转到定义：</p>
<div align="center">
    <img src="https://img-blog.csdnimg.cn/20190921171227345.png" width="800px">
</div>

<p>   ③  <a href="https://marketplace.visualstudio.com/items?itemName=kokororin.vscode-phpfmt" target="_blank" rel="noopener">phpfmt - PHP formatter</a>：格式化插件：</p>
<div align="center">
    <img src="https://img-blog.csdnimg.cn/20190921171326538.png" width="800px">
</div>

<p>   ④  <a href="https://marketplace.visualstudio.com/items?itemName=felixfbecker.php-pack" target="_blank" rel="noopener">PHP Extension Pack</a>：PHP扩展包：</p>
<div align="center">
    <img src="https://img-blog.csdnimg.cn/20190921171410495.png" width="800px">
</div>

<p>   ⑤  <a href="https://marketplace.visualstudio.com/items?itemName=eamodio.gitlens" target="_blank" rel="noopener">GitLens — Git supercharged</a>：显示文件最近的commit和作者，显示当前行commit信息：</p>
<div align="center">
    <img src="https://img-blog.csdnimg.cn/20190921171532294.png" width="800px">
</div>

<p>   ⑥  <a href="https://marketplace.visualstudio.com/items?itemName=idleberg.emoji-code" target="_blank" rel="noopener">Emoji Code</a>：在代码中输入emoji：</p>
<div align="center">
    <img src="https://img-blog.csdnimg.cn/20190921171814877.png" width="800px">
</div>

<p>   ⑦  <a href="https://marketplace.visualstudio.com/items?itemName=Shan.code-settings-sync" target="_blank" rel="noopener">Settings Sync</a>：用于同步vscode配置，使用插件将目前配置保存到GitHub上，以后只需要从GitHub上获取，就可以一次性安装插件配置信息：</p>
<ul>
<li><p>Upload Key : <code>Shift + Alt + U</code></p>
</li>
<li><p>Download Key : <code>Shift + Alt + D</code></p>
</li>
</ul>
<div align="center">
    <img src="https://img-blog.csdnimg.cn/20190921171933171.png" width="800px">
</div>

<blockquote>
<p>原文地址： CSDN博客 - <a href="https://blog.csdn.net/weixin_41599858/article/details/101108222" target="_blank" rel="noopener">VSCode插件推荐！</a></p>
</blockquote>
]]></content>
      <categories>
        <category>工具</category>
        <category>VSCode</category>
      </categories>
      <tags>
        <tag>插件</tag>
      </tags>
  </entry>
  <entry>
    <title>个人网站之GitBook的简单使用</title>
    <url>/archives/4544d152.html</url>
    <content><![CDATA[<p>相比于博客网站（如：CSDN、简书、Hexo搭建的个人博客等），个人感觉GitBook更能做一些系列型的技术存档与学习，<br>前者更适合做一些笔记的整理和技术分享，而GitBook的作用相当于将这些笔记做了一些归纳，类似电子书的方式。<br>对于查询资料和文档整理会更好些，当然，工具的使用因人而异。</p>
<a id="more"></a>

<h2 id="1-环境安装"><a href="#1-环境安装" class="headerlink" title="1.环境安装"></a>1.环境安装</h2><p>使用之前，先确保安装了 <code>Git</code> 和 <code>Node.js</code>。</p>
<h3 id="1-1-安装-Git-工具"><a href="#1-1-安装-Git-工具" class="headerlink" title="1.1.安装 Git 工具"></a>1.1.安装 <code>Git</code> 工具</h3><blockquote>
<p>传送门：<a href="https://git-scm.com/downloads" target="_blank" rel="noopener">Git 下载</a></p>
</blockquote>
<img src="/archives/4544d152/git_download.png" class>

<p>检查环境变量，将 <code>Git</code> 加入<strong>系统环境变量</strong>，做一些简单的<strong>配置</strong>：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 设定user和email</span></span><br><span class="line">git config --global user.name <span class="string">"username"</span></span><br><span class="line">git config --global user.email <span class="string">"email@example.com"</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建SSH Key，使用ssh进行上传提交更新时需要公钥，生成获取pubkey</span></span><br><span class="line">ssh-keygen -t rsa -b 4096 -C <span class="string">"email@example.com"</span></span><br></pre></td></tr></table></figure>

<h3 id="1-2-安装-Node-js-环境"><a href="#1-2-安装-Node-js-环境" class="headerlink" title="1.2.安装 Node.js 环境"></a>1.2.安装 <code>Node.js</code> 环境</h3><blockquote>
<p>传送门：<a href="https://nodejs.org/zh-cn/download/" target="_blank" rel="noopener">Node.js 下载</a></p>
</blockquote>
<img src="/archives/4544d152/node_download.png" class>

<p>选好版本下载、安装完成后，同样将程序加入环境变量。</p>
<p>检查安装结果：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 检查 node 和 npm 版本</span></span><br><span class="line">node -v</span><br><span class="line">npm -v</span><br></pre></td></tr></table></figure>

<h3 id="1-3-安装-GitBook"><a href="#1-3-安装-GitBook" class="headerlink" title="1.3.安装 GitBook"></a>1.3.安装 <code>GitBook</code></h3><blockquote>
<p>官网：<a href="https://www.gitbook.com/" target="_blank" rel="noopener">GitBook</a></p>
</blockquote>
<p>安装 <code>GitBook</code> 插件：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm install gitbook-cli -g</span><br></pre></td></tr></table></figure>

<p>检查版本：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ gitbook -V</span><br><span class="line">CLI version: 2.3.2</span><br><span class="line">GitBook version: 3.2.3</span><br></pre></td></tr></table></figure>

<h2 id="2-简单使用"><a href="#2-简单使用" class="headerlink" title="2.简单使用"></a>2.简单使用</h2><h3 id="2-1-初始化图书目录"><a href="#2-1-初始化图书目录" class="headerlink" title="2.1.初始化图书目录"></a>2.1.初始化图书目录</h3><p>在图书目录，打开 <code>gitbash</code> 或者 <code>DOS</code> 窗口，输入：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ gitbook init</span><br><span class="line">warn: no summary file <span class="keyword">in</span> this book</span><br><span class="line">info: create README.md</span><br><span class="line">info: create SUMMARY.md</span><br><span class="line">info: initialization is finished</span><br></pre></td></tr></table></figure>

<p>此时，目录下会生成 <code>README.md</code> 和 <code>SUMMARY.md</code> 这两个文件。</p>
<p>前者是 图书说明文档，后者是目录章节配置文档。</p>
<figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line"><span class="xml"><span class="comment">&lt;!-- README.md --&gt;</span></span></span><br><span class="line"><span class="section"># Introduction</span></span><br><span class="line"></span><br><span class="line"><span class="xml"><span class="comment">&lt;!-- SUMMARY.md --&gt;</span></span></span><br><span class="line"><span class="section"># Summary</span></span><br><span class="line"></span><br><span class="line"><span class="bullet">* </span>[<span class="string">Introduction</span>](<span class="link">README.md</span>)</span><br></pre></td></tr></table></figure>

<h3 id="2-2-一些简单操作"><a href="#2-2-一些简单操作" class="headerlink" title="2.2.一些简单操作"></a>2.2.一些简单操作</h3><blockquote>
<p>将要写的文章系列以 mrakdown 的形式生成，放到图书根目录下。</p>
</blockquote>
<p>（1）、将 <strong><code>.md</code></strong> 文件转成页面文件 <strong><code>.html</code></strong>，运行 <strong>命令</strong>:</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">gitbook build</span><br></pre></td></tr></table></figure>

<p>此时，根目录中会生成 <code>_book</code> 目录，这是网站的静态资源目录。</p>
<p>（2）、本地运行，在网页显示GitBook页面内容，运行 <strong>命令</strong>：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">gitbook serve --port=xxxx</span><br></pre></td></tr></table></figure>
<p>此时，浏览器输入网址： <code>http://localhost:xxxx</code>，即可打开本地部署的网站。</p>
<p>（3）、命令帮助<br>命令行输入以下命令，会显示 <code>gitbook</code> 的 <strong>帮助信息</strong>：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">gitbook <span class="built_in">help</span></span><br></pre></td></tr></table></figure>

<p>（4）、安装插件</p>
<p>命令行输入：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm install &lt;gitbook-plugin-xxx&gt;</span><br></pre></td></tr></table></figure>

<p>（5）、更新和卸载</p>
<p>命令行输入：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 更新</span></span><br><span class="line">gitbook update</span><br><span class="line"></span><br><span class="line"><span class="comment"># 卸载</span></span><br><span class="line">gitbook uninstall &lt;version&gt;</span><br></pre></td></tr></table></figure>

<h3 id="2-3-配置-book-json-文件"><a href="#2-3-配置-book-json-文件" class="headerlink" title="2.3.配置 book.json 文件"></a>2.3.配置 <code>book.json</code> 文件</h3><p>根目录下，新建文件 <strong><code>book.json</code></strong>，内容如下：</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">"title"</span> : <span class="string">"标题"</span>,</span><br><span class="line">  <span class="attr">"author"</span>: <span class="string">"作者"</span>,</span><br><span class="line">  <span class="attr">"description"</span>: <span class="string">"描述"</span>,</span><br><span class="line">  <span class="attr">"extension"</span>: <span class="literal">null</span>,</span><br><span class="line">  <span class="attr">"generator"</span>: <span class="string">"site"</span>,</span><br><span class="line">  <span class="attr">"language"</span> : <span class="string">"zh-hans"</span>,</span><br><span class="line">  <span class="attr">"links"</span>: &#123;</span><br><span class="line">    <span class="attr">"sharing"</span>: &#123;</span><br><span class="line">      <span class="attr">"all"</span>: <span class="literal">null</span>,</span><br><span class="line">      <span class="attr">"facebook"</span>: <span class="literal">null</span>,</span><br><span class="line">      <span class="attr">"google"</span>: <span class="literal">null</span>,</span><br><span class="line">      <span class="attr">"twitter"</span>: <span class="literal">null</span>,</span><br><span class="line">      <span class="attr">"weibo"</span>: <span class="literal">null</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">"sidebar"</span>: &#123;</span><br><span class="line">      <span class="attr">"个人主页"</span>: <span class="string">"网址"</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">"variables"</span>: &#123;&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="3-GitBook-部分常用插件"><a href="#3-GitBook-部分常用插件" class="headerlink" title="3.GitBook 部分常用插件"></a>3.<code>GitBook</code> 部分常用插件</h2><p><strong><font color="green"><code>book.json</code> 插件配置</font></strong>：</p>
<ul>
<li>插件放置在 <strong><code>plugins</code></strong> 数组中。</li>
<li>插件配置在 <strong><code>pluginsConfig</code></strong> 字典中。 </li>
</ul>
<h3 id="3-1-expandable-chapters-章节导航扩展"><a href="#3-1-expandable-chapters-章节导航扩展" class="headerlink" title="3.1.expandable-chapters 章节导航扩展"></a>3.1.<code>expandable-chapters</code> 章节导航扩展</h3><figure class="highlight json"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">"plugins"</span>: [</span><br><span class="line">    <span class="string">"expandable-chapters"</span></span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="3-2-copy-code-button-代码复制按钮"><a href="#3-2-copy-code-button-代码复制按钮" class="headerlink" title="3.2.copy-code-button 代码复制按钮"></a>3.2.<code>copy-code-button</code> 代码复制按钮</h3><figure class="highlight json"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">"plugins"</span>: [<span class="string">"copy-code-button"</span>]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="3-3-search-plus-页面搜索"><a href="#3-3-search-plus-页面搜索" class="headerlink" title="3.3. search-plus 页面搜索"></a>3.3. <code>search-plus</code> 页面搜索</h3><figure class="highlight json"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">"plugins"</span>: [<span class="string">"search-plus"</span>]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="3-4-右上角添加-github-图标"><a href="#3-4-右上角添加-github-图标" class="headerlink" title="3.4.右上角添加 github 图标"></a>3.4.右上角添加 <code>github</code> 图标</h3><figure class="highlight json"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">"plugins"</span>: [ </span><br><span class="line">    <span class="string">"github"</span> </span><br><span class="line">  ],</span><br><span class="line">  <span class="attr">"pluginsConfig"</span>: &#123;</span><br><span class="line">    <span class="attr">"github"</span>: &#123;</span><br><span class="line">      <span class="attr">"url"</span>: <span class="string">"https://github.com/&#123;github-id&#125;"</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="3-5-splitter-侧边栏宽度可调节"><a href="#3-5-splitter-侧边栏宽度可调节" class="headerlink" title="3.5.splitter 侧边栏宽度可调节"></a>3.5.<code>splitter</code> 侧边栏宽度可调节</h3><figure class="highlight json"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">"plugins"</span>: [<span class="string">"splitter"</span>]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="3-6-sharing-plus-分享"><a href="#3-6-sharing-plus-分享" class="headerlink" title="3.6.sharing-plus 分享"></a>3.6.<code>sharing-plus</code> 分享</h3><figure class="highlight json"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">"plugins"</span>: [<span class="string">"-sharing"</span>, <span class="string">"sharing-plus"</span>],</span><br><span class="line">  <span class="attr">"pluginsConfig"</span>: &#123;</span><br><span class="line">    <span class="attr">"sharing"</span>: &#123;</span><br><span class="line">      <span class="attr">"douban"</span>: <span class="literal">false</span>,</span><br><span class="line">      <span class="attr">"facebook"</span>: <span class="literal">false</span>,</span><br><span class="line">      <span class="attr">"google"</span>: <span class="literal">true</span>,</span><br><span class="line">      <span class="attr">"pocket"</span>: <span class="literal">false</span>,</span><br><span class="line">      <span class="attr">"qq"</span>: <span class="literal">false</span>,</span><br><span class="line">      <span class="attr">"qzone"</span>: <span class="literal">true</span>,</span><br><span class="line">      <span class="attr">"twitter"</span>: <span class="literal">false</span>,</span><br><span class="line">      <span class="attr">"weibo"</span>: <span class="literal">true</span>,</span><br><span class="line">      <span class="attr">"all"</span>: [</span><br><span class="line">        <span class="string">"douban"</span>, <span class="string">"facebook"</span>, <span class="string">"google"</span>, <span class="string">"instapaper"</span>, <span class="string">"linkedin"</span>,<span class="string">"twitter"</span>, <span class="string">"weibo"</span>, </span><br><span class="line">        <span class="string">"messenger"</span>,<span class="string">"qq"</span>, <span class="string">"qzone"</span>,<span class="string">"viber"</span>,<span class="string">"whatsapp"</span></span><br><span class="line">      ]</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="3-7-page-copyright-页面页脚版权"><a href="#3-7-page-copyright-页面页脚版权" class="headerlink" title="3.7.page-copyright 页面页脚版权"></a>3.7.<code>page-copyright</code> 页面页脚版权</h3><figure class="highlight json"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">"plugins"</span> : [<span class="string">"page-copyright"</span>],</span><br><span class="line">  <span class="attr">"pluginsConfig"</span> : &#123;</span><br><span class="line">    <span class="attr">"page-copyright"</span>: &#123;</span><br><span class="line">      <span class="attr">"description"</span>: <span class="string">"modified at"</span>,</span><br><span class="line">      <span class="attr">"signature"</span>: <span class="string">"你的签名"</span>,</span><br><span class="line">      <span class="attr">"wisdom"</span>: <span class="string">"Designer info"</span>,</span><br><span class="line">      <span class="attr">"format"</span>: <span class="string">"YYYY-MM-dd hh:mm:ss"</span>,</span><br><span class="line">      <span class="attr">"copyright"</span>: <span class="string">"Copyright &amp;#169; 你的名字"</span>,</span><br><span class="line">      <span class="attr">"timeColor"</span>: <span class="string">"#666"</span>,</span><br><span class="line">      <span class="attr">"copyrightColor"</span>: <span class="string">"#666"</span>,</span><br><span class="line">      <span class="attr">"utcOffset"</span>: <span class="string">"8"</span>,</span><br><span class="line">      <span class="attr">"style"</span>: <span class="string">"normal"</span>,</span><br><span class="line">      <span class="attr">"noPowered"</span>: <span class="literal">false</span>,</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="3-8-anchor-navigation-ex-悬浮目录与置顶"><a href="#3-8-anchor-navigation-ex-悬浮目录与置顶" class="headerlink" title="3.8.anchor-navigation-ex 悬浮目录与置顶"></a>3.8.<code>anchor-navigation-ex</code> 悬浮目录与置顶</h3><figure class="highlight json"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">"plugins"</span> : [ </span><br><span class="line">    <span class="string">"anchor-navigation-ex"</span> </span><br><span class="line">  ],</span><br><span class="line">  <span class="attr">"pluginsConfig"</span>: &#123;</span><br><span class="line">    <span class="attr">"anchor-navigation-ex"</span>: &#123;</span><br><span class="line">      <span class="attr">"showLevel"</span>: <span class="literal">true</span>,</span><br><span class="line">        <span class="attr">"associatedWithSummary"</span>: <span class="literal">true</span>,</span><br><span class="line">        <span class="attr">"printLog"</span>: <span class="literal">false</span>,</span><br><span class="line">        <span class="attr">"multipleH1"</span>: <span class="literal">true</span>,</span><br><span class="line">        <span class="attr">"mode"</span>: <span class="string">"float"</span>,</span><br><span class="line">        <span class="attr">"showGoTop"</span>:<span class="literal">true</span>,</span><br><span class="line">        <span class="attr">"float"</span>: &#123;</span><br><span class="line">          <span class="attr">"floatIcon"</span>: <span class="string">"fa fa-navicon"</span>,</span><br><span class="line">          <span class="attr">"showLevelIcon"</span>: <span class="literal">false</span>, </span><br><span class="line">          <span class="attr">"level1Icon"</span>: <span class="string">"fa fa-hand-o-right"</span>, </span><br><span class="line">          <span class="attr">"level2Icon"</span>: <span class="string">"fa fa-hand-o-right"</span>,</span><br><span class="line">          <span class="attr">"level3Icon"</span>: <span class="string">"fa fa-hand-o-right"</span></span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="attr">"pageTop"</span>: &#123;</span><br><span class="line">          <span class="attr">"showLevelIcon"</span>: <span class="literal">false</span>,</span><br><span class="line">          <span class="attr">"level1Icon"</span>: <span class="string">"fa fa-hand-o-right"</span>,</span><br><span class="line">          <span class="attr">"level2Icon"</span>: <span class="string">"fa fa-hand-o-right"</span>,</span><br><span class="line">          <span class="attr">"level3Icon"</span>: <span class="string">"fa fa-hand-o-right"</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="3-9-donate-打赏"><a href="#3-9-donate-打赏" class="headerlink" title="3.9.donate 打赏"></a>3.9.<code>donate</code> 打赏</h3><figure class="highlight json"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">"plugins"</span> : [ </span><br><span class="line">    <span class="string">"donate"</span> </span><br><span class="line">  ],</span><br><span class="line">  <span class="attr">"donate"</span>: &#123;</span><br><span class="line">    <span class="attr">"wechat"</span>: <span class="string">"微信图片"</span>,</span><br><span class="line">    <span class="attr">"alipay"</span>: <span class="string">"支付宝图片"</span>,</span><br><span class="line">    <span class="attr">"title"</span>: <span class="string">""</span>,</span><br><span class="line">    <span class="attr">"button"</span>: <span class="string">"赏"</span>,</span><br><span class="line">    <span class="attr">"alipayText"</span>: <span class="string">"支付宝打赏"</span>,</span><br><span class="line">    <span class="attr">"wechatText"</span>: <span class="string">"微信打赏"</span></span><br><span class="line">  &#125;,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="3-10-mygitalk-评论插件"><a href="#3-10-mygitalk-评论插件" class="headerlink" title="3.10.mygitalk 评论插件"></a>3.10.<code>mygitalk</code> 评论插件</h3><figure class="highlight json"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">"plugins"</span> : [ </span><br><span class="line">    <span class="string">"mygitalk"</span> </span><br><span class="line">  ],</span><br><span class="line">  <span class="attr">"mygitalk"</span>: &#123;</span><br><span class="line">    <span class="attr">"clientID"</span>: <span class="string">"gitalk id"</span>,</span><br><span class="line">    <span class="attr">"clientSecret"</span>: <span class="string">"密钥"</span>,</span><br><span class="line">    <span class="attr">"repo"</span>: <span class="string">""</span>,</span><br><span class="line">    <span class="attr">"owner"</span>: <span class="string">"GitHub id"</span>,</span><br><span class="line">    <span class="attr">"admin"</span>: [<span class="string">"username"</span>],</span><br><span class="line">    <span class="attr">"distractionFreeMode"</span>: <span class="literal">false</span></span><br><span class="line">  &#125;,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>


<h2 id="4-安装-gitbook-插件"><a href="#4-安装-gitbook-插件" class="headerlink" title="4.安装 gitbook 插件"></a>4.安装 <code>gitbook</code> 插件</h2><p>命令行输入：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">gitbook install</span><br></pre></td></tr></table></figure>
<p>可能会比较慢，等待一会儿，安装完成后再重新构建页面和启动服务。</p>
<blockquote>
<p>参考： <a href="https://www.jianshu.com/p/427b8bb066e6" target="_blank" rel="noopener">GitBook 插件整理</a></p>
</blockquote>
]]></content>
      <categories>
        <category>网站</category>
      </categories>
      <tags>
        <tag>GitBook</tag>
        <tag>插件配置</tag>
      </tags>
  </entry>
</search>
